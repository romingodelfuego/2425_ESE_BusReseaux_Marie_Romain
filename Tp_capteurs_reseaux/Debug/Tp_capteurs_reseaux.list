
Tp_capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000580c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080059dc  080059dc  000069dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c04  08005c04  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005c04  08005c04  00006c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c0c  08005c0c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c0c  08005c0c  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005c14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000068  08005c7c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005c7c  000072fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1b7  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002913  00000000  00000000  0001624f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00018b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f3  00000000  00000000  00019850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023775  00000000  00000000  0001a243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f43  00000000  00000000  0003d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf93a  00000000  00000000  0004f8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f235  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c68  00000000  00000000  0011f278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00122ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059c4 	.word	0x080059c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080059c4 	.word	0x080059c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005a6:	23d0      	movs	r3, #208	@ 0xd0
 80005a8:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005aa:	23ee      	movs	r3, #238	@ 0xee
 80005ac:	4619      	mov	r1, r3
 80005ae:	1d3a      	adds	r2, r7, #4
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	481a      	ldr	r0, [pc, #104]	@ (8000624 <BMP280_check+0x84>)
 80005ba:	f001 fdc5 	bl	8002148 <HAL_I2C_Master_Transmit>
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80005c8:	4817      	ldr	r0, [pc, #92]	@ (8000628 <BMP280_check+0x88>)
 80005ca:	f004 fc45 	bl	8004e58 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80005ce:	23ee      	movs	r3, #238	@ 0xee
 80005d0:	4619      	mov	r1, r3
 80005d2:	2301      	movs	r3, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	1d3a      	adds	r2, r7, #4
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4603      	mov	r3, r0
 80005e0:	4810      	ldr	r0, [pc, #64]	@ (8000624 <BMP280_check+0x84>)
 80005e2:	f001 feaf 	bl	8002344 <HAL_I2C_Master_Receive>
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 80005f0:	480e      	ldr	r0, [pc, #56]	@ (800062c <BMP280_check+0x8c>)
 80005f2:	f004 fc31 	bl	8004e58 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80005f6:	793b      	ldrb	r3, [r7, #4]
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <BMP280_check+0x90>)
 80005fc:	f004 fbc4 	bl	8004d88 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000600:	793b      	ldrb	r3, [r7, #4]
 8000602:	2258      	movs	r2, #88	@ 0x58
 8000604:	4293      	cmp	r3, r2
 8000606:	d104      	bne.n	8000612 <BMP280_check+0x72>
		printf("Ok\r\n");
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <BMP280_check+0x94>)
 800060a:	f004 fc25 	bl	8004e58 <puts>
		return 0;
 800060e:	2300      	movs	r3, #0
 8000610:	e003      	b.n	800061a <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 8000612:	4809      	ldr	r0, [pc, #36]	@ (8000638 <BMP280_check+0x98>)
 8000614:	f004 fc20 	bl	8004e58 <puts>
		return 1;
 8000618:	2301      	movs	r3, #1
	}
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000c4 	.word	0x200000c4
 8000628:	080059dc 	.word	0x080059dc
 800062c:	08005a00 	.word	0x08005a00
 8000630:	08005a24 	.word	0x08005a24
 8000634:	08005a30 	.word	0x08005a30
 8000638:	08005a34 	.word	0x08005a34

0800063c <get_coef_temperature>:


uint8_t get_coef_temperature(){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
	uint8_t coeff_TEMP[3*2];
	uint8_t reg_trimming_TEMP=0x88;
 8000642:	2388      	movs	r3, #136	@ 0x88
 8000644:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_TEMP, 1,1000);
 8000646:	23ee      	movs	r3, #238	@ 0xee
 8000648:	4619      	mov	r1, r3
 800064a:	1dfa      	adds	r2, r7, #7
 800064c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <get_coef_temperature+0x78>)
 8000656:	f001 fd77 	bl	8002148 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(BMP280_ADDR), coeff_TEMP, 3*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 800065a:	23ee      	movs	r3, #238	@ 0xee
 800065c:	4619      	mov	r1, r3
 800065e:	f107 0208 	add.w	r2, r7, #8
 8000662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2306      	movs	r3, #6
 800066a:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <get_coef_temperature+0x78>)
 800066c:	f001 fe6a 	bl	8002344 <HAL_I2C_Master_Receive>

	dig_T1 = coeff_TEMP[0];
 8000670:	7a3b      	ldrb	r3, [r7, #8]
 8000672:	461a      	mov	r2, r3
 8000674:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <get_coef_temperature+0x7c>)
 8000676:	801a      	strh	r2, [r3, #0]
	dig_T2 = coeff_TEMP[1];
 8000678:	7a7b      	ldrb	r3, [r7, #9]
 800067a:	b21a      	sxth	r2, r3
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <get_coef_temperature+0x80>)
 800067e:	801a      	strh	r2, [r3, #0]
	dig_T3 = coeff_TEMP[3];
 8000680:	7afb      	ldrb	r3, [r7, #11]
 8000682:	b21a      	sxth	r2, r3
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <get_coef_temperature+0x84>)
 8000686:	801a      	strh	r2, [r3, #0]
	printf("temperature coefficient: %d, %d, %d \r\n", dig_T1, dig_T2, dig_T3);
 8000688:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <get_coef_temperature+0x7c>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <get_coef_temperature+0x80>)
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	461a      	mov	r2, r3
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <get_coef_temperature+0x84>)
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <get_coef_temperature+0x88>)
 800069e:	f004 fb73 	bl	8004d88 <iprintf>
	return dig_T1, dig_T2, dig_T3;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <get_coef_temperature+0x84>)
 80006a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000c4 	.word	0x200000c4
 80006b8:	20000084 	.word	0x20000084
 80006bc:	20000086 	.word	0x20000086
 80006c0:	20000088 	.word	0x20000088
 80006c4:	08005a40 	.word	0x08005a40

080006c8 <get_coef_pressure>:

uint8_t get_coef_pressure(){
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	b08d      	sub	sp, #52	@ 0x34
 80006cc:	af06      	add	r7, sp, #24
	uint8_t coeff_PRESS[9*2];
	uint8_t reg_trimming_PRESS=0x8E;
 80006ce:	238e      	movs	r3, #142	@ 0x8e
 80006d0:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit( &hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_PRESS, 1,1000);
 80006d2:	23ee      	movs	r3, #238	@ 0xee
 80006d4:	4619      	mov	r1, r3
 80006d6:	1cfa      	adds	r2, r7, #3
 80006d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	4833      	ldr	r0, [pc, #204]	@ (80007b0 <get_coef_pressure+0xe8>)
 80006e2:	f001 fd31 	bl	8002148 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1,(uint16_t)(BMP280_ADDR), coeff_PRESS, 9*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 80006e6:	23ee      	movs	r3, #238	@ 0xee
 80006e8:	4619      	mov	r1, r3
 80006ea:	1d3a      	adds	r2, r7, #4
 80006ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2312      	movs	r3, #18
 80006f4:	482e      	ldr	r0, [pc, #184]	@ (80007b0 <get_coef_pressure+0xe8>)
 80006f6:	f001 fe25 	bl	8002344 <HAL_I2C_Master_Receive>

	dig_P1 =coeff_PRESS[0];
 80006fa:	793b      	ldrb	r3, [r7, #4]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <get_coef_pressure+0xec>)
 8000700:	801a      	strh	r2, [r3, #0]
	dig_P2 =coeff_PRESS[1];
 8000702:	797b      	ldrb	r3, [r7, #5]
 8000704:	b21a      	sxth	r2, r3
 8000706:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <get_coef_pressure+0xf0>)
 8000708:	801a      	strh	r2, [r3, #0]
	dig_P3 =coeff_PRESS[2];
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	b21a      	sxth	r2, r3
 800070e:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <get_coef_pressure+0xf4>)
 8000710:	801a      	strh	r2, [r3, #0]
	dig_P4 =coeff_PRESS[3];
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	b21a      	sxth	r2, r3
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <get_coef_pressure+0xf8>)
 8000718:	801a      	strh	r2, [r3, #0]
	dig_P5 =coeff_PRESS[4];
 800071a:	7a3b      	ldrb	r3, [r7, #8]
 800071c:	b21a      	sxth	r2, r3
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <get_coef_pressure+0xfc>)
 8000720:	801a      	strh	r2, [r3, #0]
	dig_P6 =coeff_PRESS[5];
 8000722:	7a7b      	ldrb	r3, [r7, #9]
 8000724:	b21a      	sxth	r2, r3
 8000726:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <get_coef_pressure+0x100>)
 8000728:	801a      	strh	r2, [r3, #0]
	dig_P7 =coeff_PRESS[6];
 800072a:	7abb      	ldrb	r3, [r7, #10]
 800072c:	b21a      	sxth	r2, r3
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <get_coef_pressure+0x104>)
 8000730:	801a      	strh	r2, [r3, #0]
	dig_P8 =coeff_PRESS[7];
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <get_coef_pressure+0x108>)
 8000738:	801a      	strh	r2, [r3, #0]
	dig_P9 =coeff_PRESS[8];
 800073a:	7b3b      	ldrb	r3, [r7, #12]
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <get_coef_pressure+0x10c>)
 8000740:	801a      	strh	r2, [r3, #0]

	printf("pressure coefficient: %d, %d, %d, %d,%d,%d,%d, %d,%d \r\n", dig_P1, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9);
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <get_coef_pressure+0xec>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	461e      	mov	r6, r3
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <get_coef_pressure+0xf0>)
 800074a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074e:	469c      	mov	ip, r3
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <get_coef_pressure+0xf4>)
 8000752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000756:	469e      	mov	lr, r3
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <get_coef_pressure+0xf8>)
 800075a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075e:	461a      	mov	r2, r3
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <get_coef_pressure+0xfc>)
 8000762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000766:	4619      	mov	r1, r3
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <get_coef_pressure+0x100>)
 800076a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076e:	4618      	mov	r0, r3
 8000770:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <get_coef_pressure+0x104>)
 8000772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000776:	461c      	mov	r4, r3
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <get_coef_pressure+0x108>)
 800077a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077e:	461d      	mov	r5, r3
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <get_coef_pressure+0x10c>)
 8000782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000786:	9305      	str	r3, [sp, #20]
 8000788:	9504      	str	r5, [sp, #16]
 800078a:	9403      	str	r4, [sp, #12]
 800078c:	9002      	str	r0, [sp, #8]
 800078e:	9101      	str	r1, [sp, #4]
 8000790:	9200      	str	r2, [sp, #0]
 8000792:	4673      	mov	r3, lr
 8000794:	4662      	mov	r2, ip
 8000796:	4631      	mov	r1, r6
 8000798:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <get_coef_pressure+0x110>)
 800079a:	f004 faf5 	bl	8004d88 <iprintf>

	return dig_P1, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <get_coef_pressure+0x10c>)
 80007a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a4:	b2db      	uxtb	r3, r3

}
 80007a6:	4618      	mov	r0, r3
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000c4 	.word	0x200000c4
 80007b4:	2000008a 	.word	0x2000008a
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	2000008e 	.word	0x2000008e
 80007c0:	20000090 	.word	0x20000090
 80007c4:	20000092 	.word	0x20000092
 80007c8:	20000094 	.word	0x20000094
 80007cc:	20000096 	.word	0x20000096
 80007d0:	20000098 	.word	0x20000098
 80007d4:	2000009a 	.word	0x2000009a
 80007d8:	08005a68 	.word	0x08005a68

080007dc <BMP280_init>:


int BMP280_init() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 80007e2:	2357      	movs	r3, #87	@ 0x57
 80007e4:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 80007e6:	480f      	ldr	r0, [pc, #60]	@ (8000824 <BMP280_init+0x48>)
 80007e8:	f004 fb36 	bl	8004e58 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 80007ec:	22f4      	movs	r2, #244	@ 0xf4
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4610      	mov	r0, r2
 80007f4:	f000 f81c 	bl	8000830 <BMP280_Write_Reg>
 80007f8:	4603      	mov	r3, r0
 80007fa:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <BMP280_init+0x38>
		printf("Config Ok\r\n");
 8000802:	4809      	ldr	r0, [pc, #36]	@ (8000828 <BMP280_init+0x4c>)
 8000804:	f004 fb28 	bl	8004e58 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	get_coef_pressure();
 8000808:	f7ff ff5e 	bl	80006c8 <get_coef_pressure>
	get_coef_temperature();
 800080c:	f7ff ff16 	bl	800063c <get_coef_temperature>
	return 0;
 8000810:	2300      	movs	r3, #0
 8000812:	e003      	b.n	800081c <BMP280_init+0x40>
		printf("Config not Ok!\r\n");
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <BMP280_init+0x50>)
 8000816:	f004 fb1f 	bl	8004e58 <puts>
		return 1;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	08005aa0 	.word	0x08005aa0
 8000828:	08005ab0 	.word	0x08005ab0
 800082c:	08005abc 	.word	0x08005abc

08000830 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000848:	23ee      	movs	r3, #238	@ 0xee
 800084a:	4619      	mov	r1, r3
 800084c:	f107 020c 	add.w	r2, r7, #12
 8000850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2302      	movs	r3, #2
 8000858:	4814      	ldr	r0, [pc, #80]	@ (80008ac <BMP280_Write_Reg+0x7c>)
 800085a:	f001 fc75 	bl	8002148 <HAL_I2C_Master_Transmit>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <BMP280_Write_Reg+0x3e>
		printf("xErreur with I2C Transmit\r\n");
 8000868:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <BMP280_Write_Reg+0x80>)
 800086a:	f004 faf5 	bl	8004e58 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800086e:	23ee      	movs	r3, #238	@ 0xee
 8000870:	4619      	mov	r1, r3
 8000872:	f107 020c 	add.w	r2, r7, #12
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	480b      	ldr	r0, [pc, #44]	@ (80008ac <BMP280_Write_Reg+0x7c>)
 8000880:	f001 fd60 	bl	8002344 <HAL_I2C_Master_Receive>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <BMP280_Write_Reg+0x64>
		printf("xErreur with I2C Receive\r\n");
 800088e:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <BMP280_Write_Reg+0x84>)
 8000890:	f004 fae2 	bl	8004e58 <puts>
	}

	if (buf[0] == value) {
 8000894:	7b3b      	ldrb	r3, [r7, #12]
 8000896:	79ba      	ldrb	r2, [r7, #6]
 8000898:	429a      	cmp	r2, r3
 800089a:	d101      	bne.n	80008a0 <BMP280_Write_Reg+0x70>
		return 0;
 800089c:	2300      	movs	r3, #0
 800089e:	e000      	b.n	80008a2 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 80008a0:	2301      	movs	r3, #1
	}
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	08005acc 	.word	0x08005acc
 80008b4:	08005ae8 	.word	0x08005ae8

080008b8 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af02      	add	r7, sp, #8
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80008c8:	23ee      	movs	r3, #238	@ 0xee
 80008ca:	4619      	mov	r1, r3
 80008cc:	1dfa      	adds	r2, r7, #7
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	4814      	ldr	r0, [pc, #80]	@ (8000928 <BMP280_Read_Reg+0x70>)
 80008d8:	f001 fc36 	bl	8002148 <HAL_I2C_Master_Transmit>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <BMP280_Read_Reg+0x34>
		printf("xErreur with I2C Transmit\r\n");
 80008e6:	4811      	ldr	r0, [pc, #68]	@ (800092c <BMP280_Read_Reg+0x74>)
 80008e8:	f004 fab6 	bl	8004e58 <puts>
	}

	buf = (uint8_t*) malloc(length);
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 f8ca 	bl	8004a88 <malloc>
 80008f4:	4603      	mov	r3, r0
 80008f6:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80008f8:	23ee      	movs	r3, #238	@ 0xee
 80008fa:	4619      	mov	r1, r3
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000904:	9200      	str	r2, [sp, #0]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <BMP280_Read_Reg+0x70>)
 800090a:	f001 fd1b 	bl	8002344 <HAL_I2C_Master_Receive>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <BMP280_Read_Reg+0x66>
		printf("xErreur with I2C Receive\r\n");
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <BMP280_Read_Reg+0x78>)
 800091a:	f004 fa9d 	bl	8004e58 <puts>
	}

	return buf;
 800091e:	68bb      	ldr	r3, [r7, #8]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000c4 	.word	0x200000c4
 800092c:	08005acc 	.word	0x08005acc
 8000930:	08005ae8 	.word	0x08005ae8

08000934 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 800093a:	23fa      	movs	r3, #250	@ 0xfa
 800093c:	2203      	movs	r2, #3
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ffb9 	bl	80008b8 <BMP280_Read_Reg>
 8000946:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	031a      	lsls	r2, r3, #12
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3301      	adds	r3, #1
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	3202      	adds	r2, #2
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	0912      	lsrs	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000962:	4313      	orrs	r3, r2
 8000964:	603b      	str	r3, [r7, #0]

	free(buf);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f004 f896 	bl	8004a98 <free>

	printf("Temperature: ");
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <BMP280_get_temperature+0x58>)
 800096e:	f004 fa0b 	bl	8004d88 <iprintf>
	printf("%d", adc_T);
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	4806      	ldr	r0, [pc, #24]	@ (8000990 <BMP280_get_temperature+0x5c>)
 8000976:	f004 fa07 	bl	8004d88 <iprintf>
	printf("\r\n");
 800097a:	4806      	ldr	r0, [pc, #24]	@ (8000994 <BMP280_get_temperature+0x60>)
 800097c:	f004 fa6c 	bl	8004e58 <puts>

	return adc_T;
 8000980:	683b      	ldr	r3, [r7, #0]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	08005b04 	.word	0x08005b04
 8000990:	08005b14 	.word	0x08005b14
 8000994:	08005b18 	.word	0x08005b18

08000998 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800099c:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_CAN1_Init+0x68>)
 800099e:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <MX_CAN1_Init+0x6c>)
 80009a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009a4:	2206      	movs	r2, #6
 80009a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009b0:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 80009b4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80009b6:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009b8:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80009bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80009c4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009da:	2200      	movs	r2, #0
 80009dc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009ec:	f000 fd06 	bl	80013fc <HAL_CAN_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80009f6:	f000 fa39 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000009c 	.word	0x2000009c
 8000a04:	40006400 	.word	0x40006400

08000a08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a22      	ldr	r2, [pc, #136]	@ (8000ab0 <HAL_CAN_MspInit+0xa8>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d13d      	bne.n	8000aa6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <HAL_CAN_MspInit+0xac>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a20      	ldr	r2, [pc, #128]	@ (8000ab4 <HAL_CAN_MspInit+0xac>)
 8000a34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <HAL_CAN_MspInit+0xac>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <HAL_CAN_MspInit+0xac>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <HAL_CAN_MspInit+0xac>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_CAN_MspInit+0xac>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a74:	2309      	movs	r3, #9
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <HAL_CAN_MspInit+0xb0>)
 8000a80:	f001 f870 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a96:	2309      	movs	r3, #9
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_CAN_MspInit+0xb0>)
 8000aa2:	f001 f85f 	bl	8001b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40006400 	.word	0x40006400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400

08000abc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a2c      	ldr	r2, [pc, #176]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a25      	ldr	r2, [pc, #148]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	4812      	ldr	r0, [pc, #72]	@ (8000b90 <MX_GPIO_Init+0xd4>)
 8000b48:	f001 f9a0 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <MX_GPIO_Init+0xd8>)
 8000b64:	f000 fffe 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b68:	2320      	movs	r3, #32
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_GPIO_Init+0xd4>)
 8000b80:	f000 fff0 	bl	8001b64 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	@ 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020800 	.word	0x40020800

08000b98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <MX_I2C1_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_I2C1_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd6:	f001 f973 	bl	8001ec0 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f944 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000c4 	.word	0x200000c4
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_I2C_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c32:	23c0      	movs	r3, #192	@ 0xc0
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c36:	2312      	movs	r3, #18
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c42:	2304      	movs	r3, #4
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <HAL_I2C_MspInit+0x8c>)
 8000c4e:	f000 ff89 	bl	8001b64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b092      	sub	sp, #72	@ 0x48
 8000c88:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c8a:	f000 fb21 	bl	80012d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c8e:	f000 f87f 	bl	8000d90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c92:	f7ff ff13 	bl	8000abc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c96:	f000 fa43 	bl	8001120 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000c9a:	f000 fa17 	bl	80010cc <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8000c9e:	f7ff fe7b 	bl	8000998 <MX_CAN1_Init>
	MX_I2C1_Init();
 8000ca2:	f7ff ff79 	bl	8000b98 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
#ifdef CAN
	printf("START\r\n");
 8000ca6:	4831      	ldr	r0, [pc, #196]	@ (8000d6c <main+0xe8>)
 8000ca8:	f004 f8d6 	bl	8004e58 <puts>
	if(HAL_CAN_Start(&hcan1)==HAL_ERROR){printf("Erreur initialisation\r\n");}
 8000cac:	4830      	ldr	r0, [pc, #192]	@ (8000d70 <main+0xec>)
 8000cae:	f000 fca0 	bl	80015f2 <HAL_CAN_Start>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d102      	bne.n	8000cbe <main+0x3a>
 8000cb8:	482e      	ldr	r0, [pc, #184]	@ (8000d74 <main+0xf0>)
 8000cba:	f004 f8cd 	bl	8004e58 <puts>

	CAN_TxHeaderTypeDef pHeader =(CAN_TxHeaderTypeDef){
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <main+0xf4>)
 8000cc0:	f107 0420 	add.w	r4, r7, #32
 8000cc4:	461d      	mov	r5, r3
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cce:	e884 0003 	stmia.w	r4, {r0, r1}
				.RTR = CAN_RTR_DATA,
				.DLC = 0x02,
				.TransmitGlobalTime = DISABLE
	};
	uint32_t pTxMailbox;
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, NULL, &pTxMailbox);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	f107 0120 	add.w	r1, r7, #32
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4825      	ldr	r0, [pc, #148]	@ (8000d70 <main+0xec>)
 8000cdc:	f000 fccd 	bl	800167a <HAL_CAN_AddTxMessage>

	}
	 */
#endif
#ifdef I2Cinit
	printf("\r\nChecking for BMP280\r\n");
 8000ce0:	4826      	ldr	r0, [pc, #152]	@ (8000d7c <main+0xf8>)
 8000ce2:	f004 f8b9 	bl	8004e58 <puts>
	BMP280_check();
 8000ce6:	f7ff fc5b 	bl	80005a0 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 8000cea:	4825      	ldr	r0, [pc, #148]	@ (8000d80 <main+0xfc>)
 8000cec:	f004 f8b4 	bl	8004e58 <puts>
	BMP280_init();
 8000cf0:	f7ff fd74 	bl	80007dc <BMP280_init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	pHeader.StdId=0x61;
 8000cf4:	2361      	movs	r3, #97	@ 0x61
 8000cf6:	623b      	str	r3, [r7, #32]
	uint8_t sens;
	uint32_t temp_ref =  BMP280_get_temperature();
 8000cf8:	f7ff fe1c 	bl	8000934 <BMP280_get_temperature>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	643b      	str	r3, [r7, #64]	@ 0x40
	while (1)
	{
		uint32_t temp =  BMP280_get_temperature();
 8000d00:	f7ff fe18 	bl	8000934 <BMP280_get_temperature>
 8000d04:	4603      	mov	r3, r0
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint8_t angle = (uint8_t)((temp_ref-temp)/3);
 8000d08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <main+0x100>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	085b      	lsrs	r3, r3, #1
 8000d16:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		if (angle >180){sens=0x01;}
 8000d1a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d1e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d20:	d903      	bls.n	8000d2a <main+0xa6>
 8000d22:	2301      	movs	r3, #1
 8000d24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000d28:	e002      	b.n	8000d30 <main+0xac>
		else{sens=0x00;}
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		printf("angle  : %u°\r\n", angle);
 8000d30:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d34:	4619      	mov	r1, r3
 8000d36:	4814      	ldr	r0, [pc, #80]	@ (8000d88 <main+0x104>)
 8000d38:	f004 f826 	bl	8004d88 <iprintf>
		uint8_t aData[2] = {angle,sens};
 8000d3c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d40:	703b      	strb	r3, [r7, #0]
 8000d42:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d46:	707b      	strb	r3, [r7, #1]
		HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	463a      	mov	r2, r7
 8000d4c:	f107 0120 	add.w	r1, r7, #32
 8000d50:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <main+0xec>)
 8000d52:	f000 fc92 	bl	800167a <HAL_CAN_AddTxMessage>
		printf("moteur actualisé\r\n");
 8000d56:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <main+0x108>)
 8000d58:	f004 f87e 	bl	8004e58 <puts>
		HAL_Delay(1000);
 8000d5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d60:	f000 fb28 	bl	80013b4 <HAL_Delay>
		temp_ref = temp;
 8000d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d66:	643b      	str	r3, [r7, #64]	@ 0x40
	{
 8000d68:	e7ca      	b.n	8000d00 <main+0x7c>
 8000d6a:	bf00      	nop
 8000d6c:	08005b30 	.word	0x08005b30
 8000d70:	2000009c 	.word	0x2000009c
 8000d74:	08005b38 	.word	0x08005b38
 8000d78:	08005ba0 	.word	0x08005ba0
 8000d7c:	08005b50 	.word	0x08005b50
 8000d80:	08005b68 	.word	0x08005b68
 8000d84:	aaaaaaab 	.word	0xaaaaaaab
 8000d88:	08005b7c 	.word	0x08005b7c
 8000d8c:	08005b8c 	.word	0x08005b8c

08000d90 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	@ 0x50
 8000d94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	2234      	movs	r2, #52	@ 0x34
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 f862 	bl	8004e68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <SystemClock_Config+0xd4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	4a29      	ldr	r2, [pc, #164]	@ (8000e64 <SystemClock_Config+0xd4>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <SystemClock_Config+0xd4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <SystemClock_Config+0xd8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ddc:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <SystemClock_Config+0xd8>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <SystemClock_Config+0xd8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e02:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e04:	2308      	movs	r3, #8
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000e08:	23b4      	movs	r3, #180	@ 0xb4
 8000e0a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fb93 	bl	8003548 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000e28:	f000 f820 	bl	8000e6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e42:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 f832 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000e56:	f000 f809 	bl	8000e6c <Error_Handler>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3750      	adds	r7, #80	@ 0x50
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000

08000e6c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <Error_Handler+0x8>

08000e78 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e80:	1d39      	adds	r1, r7, #4
 8000e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e86:	2201      	movs	r2, #1
 8000e88:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <__io_putchar+0x20>)
 8000e8a:	f002 fe4b 	bl	8003b24 <HAL_UART_Transmit>

  return ch;
 8000e8e:	687b      	ldr	r3, [r7, #4]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000164 	.word	0x20000164

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eda:	2007      	movs	r0, #7
 8000edc:	f000 fd6e 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 fa17 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <USART1_IRQHandler+0x10>)
 8000f52:	f002 fe73 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000011c 	.word	0x2000011c

08000f60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f72:	f3af 8000 	nop.w
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
  }

  return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e009      	b.n	8000fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf1      	blt.n	8000fac <_write+0x12>
  }
  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_close>:

int _close(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f003 ff14 	bl	8004e98 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20020000 	.word	0x20020000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20000118 	.word	0x20000118
 80010a4:	20000300 	.word	0x20000300

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <MX_USART1_UART_Init+0x50>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_USART1_UART_Init+0x4c>)
 8001104:	f002 fcbe 	bl	8003a84 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800110e:	f7ff fead 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000011c 	.word	0x2000011c
 800111c:	40011000 	.word	0x40011000

08001120 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <MX_USART2_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_USART2_UART_Init+0x4c>)
 8001158:	f002 fc94 	bl	8003a84 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f7ff fe83 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000164 	.word	0x20000164
 8001170:	40004400 	.word	0x40004400

08001174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	@ 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a36      	ldr	r2, [pc, #216]	@ (800126c <HAL_UART_MspInit+0xf8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d135      	bne.n	8001202 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a34      	ldr	r2, [pc, #208]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e0:	2307      	movs	r3, #7
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4822      	ldr	r0, [pc, #136]	@ (8001274 <HAL_UART_MspInit+0x100>)
 80011ec:	f000 fcba 	bl	8001b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2025      	movs	r0, #37	@ 0x25
 80011f6:	f000 fbec 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011fa:	2025      	movs	r0, #37	@ 0x25
 80011fc:	f000 fc05 	bl	8001a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001200:	e030      	b.n	8001264 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1c      	ldr	r2, [pc, #112]	@ (8001278 <HAL_UART_MspInit+0x104>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d12b      	bne.n	8001264 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	4a16      	ldr	r2, [pc, #88]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121a:	6413      	str	r3, [r2, #64]	@ 0x40
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	4a0f      	ldr	r2, [pc, #60]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6313      	str	r3, [r2, #48]	@ 0x30
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <HAL_UART_MspInit+0xfc>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001244:	230c      	movs	r3, #12
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001254:	2307      	movs	r3, #7
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <HAL_UART_MspInit+0x100>)
 8001260:	f000 fc80 	bl	8001b64 <HAL_GPIO_Init>
}
 8001264:	bf00      	nop
 8001266:	3730      	adds	r7, #48	@ 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40011000 	.word	0x40011000
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40004400 	.word	0x40004400

0800127c <Reset_Handler>:
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b4 <LoopFillZerobss+0xe>
 8001280:	f7ff ff12 	bl	80010a8 <SystemInit>
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x12>)
 8001286:	490d      	ldr	r1, [pc, #52]	@ (80012bc <LoopFillZerobss+0x16>)
 8001288:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <LoopFillZerobss+0x1a>)
 800128a:	2300      	movs	r3, #0
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:
 800128e:	58d4      	ldr	r4, [r2, r3]
 8001290:	50c4      	str	r4, [r0, r3]
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:
 8001294:	18c4      	adds	r4, r0, r3
 8001296:	428c      	cmp	r4, r1
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <LoopFillZerobss+0x1e>)
 800129c:	4c0a      	ldr	r4, [pc, #40]	@ (80012c8 <LoopFillZerobss+0x22>)
 800129e:	2300      	movs	r3, #0
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:
 80012a6:	42a2      	cmp	r2, r4
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>
 80012aa:	f003 fdfb 	bl	8004ea4 <__libc_init_array>
 80012ae:	f7ff fce9 	bl	8000c84 <main>
 80012b2:	4770      	bx	lr
 80012b4:	20020000 	.word	0x20020000
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000068 	.word	0x20000068
 80012c0:	08005c14 	.word	0x08005c14
 80012c4:	20000068 	.word	0x20000068
 80012c8:	200002fc 	.word	0x200002fc

080012cc <ADC_IRQHandler>:
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001310 <HAL_Init+0x40>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_Init+0x40>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_Init+0x40>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 fb5f 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fdca 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fb77 	bl	8001a26 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001350:	f000 fb3f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	20000008 	.word	0x20000008
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	200001ac 	.word	0x200001ac

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200001ac 	.word	0x200001ac

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008

080013fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0ed      	b.n	80015ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff faf4 	bl	8000a08 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001430:	f7ff ffb4 	bl	800139c <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001436:	e012      	b.n	800145e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001438:	f7ff ffb0 	bl	800139c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b0a      	cmp	r3, #10
 8001444:	d90b      	bls.n	800145e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2205      	movs	r2, #5
 8001456:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0c5      	b.n	80015ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0e5      	beq.n	8001438 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0202 	bic.w	r2, r2, #2
 800147a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800147c:	f7ff ff8e 	bl	800139c <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001482:	e012      	b.n	80014aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001484:	f7ff ff8a 	bl	800139c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b0a      	cmp	r3, #10
 8001490:	d90b      	bls.n	80014aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001496:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2205      	movs	r2, #5
 80014a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e09f      	b.n	80015ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e5      	bne.n	8001484 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d108      	bne.n	80014d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e007      	b.n	80014e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7e5b      	ldrb	r3, [r3, #25]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e007      	b.n	800150c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800150a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e9b      	ldrb	r3, [r3, #26]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d108      	bne.n	8001526 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0220 	orr.w	r2, r2, #32
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e007      	b.n	8001536 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0220 	bic.w	r2, r2, #32
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7edb      	ldrb	r3, [r3, #27]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0210 	bic.w	r2, r2, #16
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e007      	b.n	8001560 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0210 	orr.w	r2, r2, #16
 800155e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7f1b      	ldrb	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0208 	orr.w	r2, r2, #8
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e007      	b.n	800158a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0208 	bic.w	r2, r2, #8
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7f5b      	ldrb	r3, [r3, #29]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0204 	orr.w	r2, r2, #4
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e007      	b.n	80015b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0204 	bic.w	r2, r2, #4
 80015b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	ea42 0103 	orr.w	r1, r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d12e      	bne.n	8001664 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800161e:	f7ff febd 	bl	800139c <HAL_GetTick>
 8001622:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001624:	e012      	b.n	800164c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001626:	f7ff feb9 	bl	800139c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d90b      	bls.n	800164c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2205      	movs	r2, #5
 8001644:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e012      	b.n	8001672 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e5      	bne.n	8001626 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	e006      	b.n	8001672 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
  }
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800167a:	b480      	push	{r7}
 800167c:	b089      	sub	sp, #36	@ 0x24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001698:	7ffb      	ldrb	r3, [r7, #31]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d003      	beq.n	80016a6 <HAL_CAN_AddTxMessage+0x2c>
 800169e:	7ffb      	ldrb	r3, [r7, #31]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 80ad 	bne.w	8001800 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8095 	beq.w	80017f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	0e1b      	lsrs	r3, r3, #24
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016d0:	2201      	movs	r2, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	409a      	lsls	r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3318      	adds	r3, #24
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	440b      	add	r3, r1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e00f      	b.n	800171e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001708:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800170e:	68f9      	ldr	r1, [r7, #12]
 8001710:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001712:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3318      	adds	r3, #24
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	440b      	add	r3, r1
 800171c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3318      	adds	r3, #24
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	440b      	add	r3, r1
 800172e:	3304      	adds	r3, #4
 8001730:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	7d1b      	ldrb	r3, [r3, #20]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d111      	bne.n	800175e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3318      	adds	r3, #24
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	3304      	adds	r3, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3318      	adds	r3, #24
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	440b      	add	r3, r1
 800175a:	3304      	adds	r3, #4
 800175c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3307      	adds	r3, #7
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	061a      	lsls	r2, r3, #24
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3306      	adds	r3, #6
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3305      	adds	r3, #5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4313      	orrs	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	3204      	adds	r2, #4
 800177e:	7812      	ldrb	r2, [r2, #0]
 8001780:	4610      	mov	r0, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	6811      	ldr	r1, [r2, #0]
 8001786:	ea43 0200 	orr.w	r2, r3, r0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001794:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3303      	adds	r3, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	061a      	lsls	r2, r3, #24
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3302      	adds	r3, #2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4313      	orrs	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4610      	mov	r0, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6811      	ldr	r1, [r2, #0]
 80017bc:	ea43 0200 	orr.w	r2, r3, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	440b      	add	r3, r1
 80017c6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80017ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3318      	adds	r3, #24
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3318      	adds	r3, #24
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	440b      	add	r3, r1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e00e      	b.n	800180e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e006      	b.n	800180e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001804:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
  }
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff29 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff3e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff31 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fca6 	bl	800139c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d008      	beq.n	8001a70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e052      	b.n	8001b16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0216 	bic.w	r2, r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <HAL_DMA_Abort+0x62>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0208 	bic.w	r2, r2, #8
 8001aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac0:	e013      	b.n	8001aea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac2:	f7ff fc6b 	bl	800139c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d90c      	bls.n	8001aea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e015      	b.n	8001b16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e4      	bne.n	8001ac2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	223f      	movs	r2, #63	@ 0x3f
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d004      	beq.n	8001b3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2280      	movs	r2, #128	@ 0x80
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e00c      	b.n	8001b56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2205      	movs	r2, #5
 8001b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e165      	b.n	8001e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8154 	bne.w	8001e46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80ae 	beq.w	8001e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a58      	ldr	r2, [pc, #352]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e6c <HAL_GPIO_Init+0x308>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d025      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4e      	ldr	r2, [pc, #312]	@ (8001e70 <HAL_GPIO_Init+0x30c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01f      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e74 <HAL_GPIO_Init+0x310>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	@ (8001e78 <HAL_GPIO_Init+0x314>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e7c <HAL_GPIO_Init+0x318>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4a      	ldr	r2, [pc, #296]	@ (8001e80 <HAL_GPIO_Init+0x31c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	@ (8001e84 <HAL_GPIO_Init+0x320>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x202>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e00c      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e00a      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc2:	4a31      	ldr	r2, [pc, #196]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dec:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df2:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e16:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e40:	4a11      	ldr	r2, [pc, #68]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f67f ae96 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40021800 	.word	0x40021800
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e12b      	b.n	800212a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fe84 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	@ 0x24
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f24:	f001 f8b8 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8001f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4a81      	ldr	r2, [pc, #516]	@ (8002134 <HAL_I2C_Init+0x274>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d807      	bhi.n	8001f44 <HAL_I2C_Init+0x84>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a80      	ldr	r2, [pc, #512]	@ (8002138 <HAL_I2C_Init+0x278>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e006      	b.n	8001f52 <HAL_I2C_Init+0x92>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a7d      	ldr	r2, [pc, #500]	@ (800213c <HAL_I2C_Init+0x27c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	bf94      	ite	ls
 8001f4c:	2301      	movls	r3, #1
 8001f4e:	2300      	movhi	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0e7      	b.n	800212a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a78      	ldr	r2, [pc, #480]	@ (8002140 <HAL_I2C_Init+0x280>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a6a      	ldr	r2, [pc, #424]	@ (8002134 <HAL_I2C_Init+0x274>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d802      	bhi.n	8001f94 <HAL_I2C_Init+0xd4>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3301      	adds	r3, #1
 8001f92:	e009      	b.n	8001fa8 <HAL_I2C_Init+0xe8>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	4a69      	ldr	r2, [pc, #420]	@ (8002144 <HAL_I2C_Init+0x284>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	495c      	ldr	r1, [pc, #368]	@ (8002134 <HAL_I2C_Init+0x274>)
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d819      	bhi.n	8001ffc <HAL_I2C_Init+0x13c>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e59      	subs	r1, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fdc:	400b      	ands	r3, r1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_I2C_Init+0x138>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1e59      	subs	r1, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	e051      	b.n	800209c <HAL_I2C_Init+0x1dc>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e04f      	b.n	800209c <HAL_I2C_Init+0x1dc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d111      	bne.n	8002028 <HAL_I2C_Init+0x168>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e012      	b.n	800204e <HAL_I2C_Init+0x18e>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e58      	subs	r0, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	0099      	lsls	r1, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	fbb0 f3f3 	udiv	r3, r0, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Init+0x196>
 8002052:	2301      	movs	r3, #1
 8002054:	e022      	b.n	800209c <HAL_I2C_Init+0x1dc>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10e      	bne.n	800207c <HAL_I2C_Init+0x1bc>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1e58      	subs	r0, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	440b      	add	r3, r1
 800206c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800207a:	e00f      	b.n	800209c <HAL_I2C_Init+0x1dc>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	0099      	lsls	r1, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	6809      	ldr	r1, [r1, #0]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6911      	ldr	r1, [r2, #16]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	000186a0 	.word	0x000186a0
 8002138:	001e847f 	.word	0x001e847f
 800213c:	003d08ff 	.word	0x003d08ff
 8002140:	431bde83 	.word	0x431bde83
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	460b      	mov	r3, r1
 8002156:	817b      	strh	r3, [r7, #10]
 8002158:	4613      	mov	r3, r2
 800215a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff f91e 	bl	800139c <HAL_GetTick>
 8002160:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	f040 80e0 	bne.w	8002330 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2319      	movs	r3, #25
 8002176:	2201      	movs	r2, #1
 8002178:	4970      	ldr	r1, [pc, #448]	@ (800233c <HAL_I2C_Master_Transmit+0x1f4>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fc64 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
 8002188:	e0d3      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_I2C_Master_Transmit+0x50>
 8002194:	2302      	movs	r3, #2
 8002196:	e0cc      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1ea>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d007      	beq.n	80021be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2221      	movs	r2, #33	@ 0x21
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2210      	movs	r2, #16
 80021da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	893a      	ldrh	r2, [r7, #8]
 80021ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a50      	ldr	r2, [pc, #320]	@ (8002340 <HAL_I2C_Master_Transmit+0x1f8>)
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002200:	8979      	ldrh	r1, [r7, #10]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	6a3a      	ldr	r2, [r7, #32]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 face 	bl	80027a8 <I2C_MasterRequestWrite>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e08d      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800222c:	e066      	b.n	80022fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	6a39      	ldr	r1, [r7, #32]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fd22 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00d      	beq.n	800225a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	2b04      	cmp	r3, #4
 8002244:	d107      	bne.n	8002256 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002254:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06b      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d11b      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x188>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	d017      	beq.n	80022d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	6a39      	ldr	r1, [r7, #32]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fd19 	bl	8002d0c <I2C_WaitOnBTFFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00d      	beq.n	80022fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d107      	bne.n	80022f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e01a      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d194      	bne.n	800222e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	e000      	b.n	8002332 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002330:	2302      	movs	r3, #2
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	00100002 	.word	0x00100002
 8002340:	ffff0000 	.word	0xffff0000

08002344 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	@ 0x30
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	461a      	mov	r2, r3
 8002350:	460b      	mov	r3, r1
 8002352:	817b      	strh	r3, [r7, #10]
 8002354:	4613      	mov	r3, r2
 8002356:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff f820 	bl	800139c <HAL_GetTick>
 800235c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	f040 8217 	bne.w	800279a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2319      	movs	r3, #25
 8002372:	2201      	movs	r2, #1
 8002374:	497c      	ldr	r1, [pc, #496]	@ (8002568 <HAL_I2C_Master_Receive+0x224>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fb66 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002382:	2302      	movs	r3, #2
 8002384:	e20a      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_I2C_Master_Receive+0x50>
 8002390:	2302      	movs	r3, #2
 8002392:	e203      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d007      	beq.n	80023ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2222      	movs	r2, #34	@ 0x22
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2210      	movs	r2, #16
 80023d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a5c      	ldr	r2, [pc, #368]	@ (800256c <HAL_I2C_Master_Receive+0x228>)
 80023fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023fc:	8979      	ldrh	r1, [r7, #10]
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fa52 	bl	80028ac <I2C_MasterRequestRead>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1c4      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002416:	2b00      	cmp	r3, #0
 8002418:	d113      	bne.n	8002442 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e198      	b.n	8002774 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002446:	2b01      	cmp	r3, #1
 8002448:	d11b      	bne.n	8002482 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e178      	b.n	8002774 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002486:	2b02      	cmp	r3, #2
 8002488:	d11b      	bne.n	80024c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002498:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	e158      	b.n	8002774 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024e8:	e144      	b.n	8002774 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	f200 80f1 	bhi.w	80026d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d123      	bne.n	8002544 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fc4b 	bl	8002d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e145      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002542:	e117      	b.n	8002774 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002548:	2b02      	cmp	r3, #2
 800254a:	d14e      	bne.n	80025ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	2200      	movs	r2, #0
 8002554:	4906      	ldr	r1, [pc, #24]	@ (8002570 <HAL_I2C_Master_Receive+0x22c>)
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fa76 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e11a      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
 8002566:	bf00      	nop
 8002568:	00100002 	.word	0x00100002
 800256c:	ffff0000 	.word	0xffff0000
 8002570:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025e8:	e0c4      	b.n	8002774 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	2200      	movs	r2, #0
 80025f2:	496c      	ldr	r1, [pc, #432]	@ (80027a4 <HAL_I2C_Master_Receive+0x460>)
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fa27 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cb      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	2200      	movs	r2, #0
 800264e:	4955      	ldr	r1, [pc, #340]	@ (80027a4 <HAL_I2C_Master_Receive+0x460>)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f9f9 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e09d      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026d4:	e04e      	b.n	8002774 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fb5e 	bl	8002d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e058      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b04      	cmp	r3, #4
 8002728:	d124      	bne.n	8002774 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002740:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f aeb6 	bne.w	80024ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3728      	adds	r7, #40	@ 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	00010004 	.word	0x00010004

080027a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	460b      	mov	r3, r1
 80027b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d006      	beq.n	80027d2 <I2C_MasterRequestWrite+0x2a>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d003      	beq.n	80027d2 <I2C_MasterRequestWrite+0x2a>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027d0:	d108      	bne.n	80027e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e00b      	b.n	80027fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	2b12      	cmp	r3, #18
 80027ea:	d107      	bne.n	80027fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f91d 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002822:	d103      	bne.n	800282c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e035      	b.n	800289c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002838:	d108      	bne.n	800284c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	e01b      	b.n	8002884 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800284c:	897b      	ldrh	r3, [r7, #10]
 800284e:	11db      	asrs	r3, r3, #7
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0306 	and.w	r3, r3, #6
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f063 030f 	orn	r3, r3, #15
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	490e      	ldr	r1, [pc, #56]	@ (80028a4 <I2C_MasterRequestWrite+0xfc>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f966 	bl	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e010      	b.n	800289c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800287a:	897b      	ldrh	r3, [r7, #10]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4907      	ldr	r1, [pc, #28]	@ (80028a8 <I2C_MasterRequestWrite+0x100>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f956 	bl	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	00010008 	.word	0x00010008
 80028a8:	00010002 	.word	0x00010002

080028ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	460b      	mov	r3, r1
 80028ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d006      	beq.n	80028e6 <I2C_MasterRequestRead+0x3a>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d003      	beq.n	80028e6 <I2C_MasterRequestRead+0x3a>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028e4:	d108      	bne.n	80028f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e00b      	b.n	8002910 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	2b11      	cmp	r3, #17
 80028fe:	d107      	bne.n	8002910 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800290e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f893 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002936:	d103      	bne.n	8002940 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e079      	b.n	8002a38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800294c:	d108      	bne.n	8002960 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	b2da      	uxtb	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	611a      	str	r2, [r3, #16]
 800295e:	e05f      	b.n	8002a20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002960:	897b      	ldrh	r3, [r7, #10]
 8002962:	11db      	asrs	r3, r3, #7
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 0306 	and.w	r3, r3, #6
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f063 030f 	orn	r3, r3, #15
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4930      	ldr	r1, [pc, #192]	@ (8002a40 <I2C_MasterRequestRead+0x194>)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f8dc 	bl	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e054      	b.n	8002a38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800298e:	897b      	ldrh	r3, [r7, #10]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4929      	ldr	r1, [pc, #164]	@ (8002a44 <I2C_MasterRequestRead+0x198>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f8cc 	bl	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e044      	b.n	8002a38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f831 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029fa:	d103      	bne.n	8002a04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e017      	b.n	8002a38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a08:	897b      	ldrh	r3, [r7, #10]
 8002a0a:	11db      	asrs	r3, r3, #7
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 0306 	and.w	r3, r3, #6
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f063 030e 	orn	r3, r3, #14
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4907      	ldr	r1, [pc, #28]	@ (8002a44 <I2C_MasterRequestRead+0x198>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f888 	bl	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	00010008 	.word	0x00010008
 8002a44:	00010002 	.word	0x00010002

08002a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a58:	e048      	b.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a60:	d044      	beq.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fe fc9b 	bl	800139c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d139      	bne.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10d      	bne.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	e00c      	b.n	8002ab8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d116      	bne.n	8002aec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e023      	b.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10d      	bne.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	e00c      	b.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d093      	beq.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b4a:	e071      	b.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5a:	d123      	bne.n	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e067      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002baa:	d041      	beq.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bac:	f7fe fbf6 	bl	800139c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d136      	bne.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d10c      	bne.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e00b      	b.n	8002bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e021      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10c      	bne.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e00b      	b.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af6d 	bne.w	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c88:	e034      	b.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f8e3 	bl	8002e56 <I2C_IsAcknowledgeFailed>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e034      	b.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ca0:	d028      	beq.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7fe fb7b 	bl	800139c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11d      	bne.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc2:	2b80      	cmp	r3, #128	@ 0x80
 8002cc4:	d016      	beq.n	8002cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b80      	cmp	r3, #128	@ 0x80
 8002d00:	d1c3      	bne.n	8002c8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d18:	e034      	b.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f89b 	bl	8002e56 <I2C_IsAcknowledgeFailed>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e034      	b.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d30:	d028      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe fb33 	bl	800139c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11d      	bne.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d016      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e007      	b.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d1c3      	bne.n	8002d1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002da8:	e049      	b.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d119      	bne.n	8002dec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0210 	mvn.w	r2, #16
 8002dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e030      	b.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7fe fad6 	bl	800139c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11d      	bne.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0c:	2b40      	cmp	r3, #64	@ 0x40
 8002e0e:	d016      	beq.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	d1ae      	bne.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6c:	d11b      	bne.n	8002ea6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cc      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b68      	ldr	r3, [pc, #416]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a52      	ldr	r2, [pc, #328]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b3f      	ldr	r3, [pc, #252]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3b      	ldr	r3, [pc, #236]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e067      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4934      	ldr	r1, [pc, #208]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe f9fa 	bl	800139c <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe f9f6 	bl	800139c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d20c      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f855 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe f95a 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00
 8003070:	40023800 	.word	0x40023800
 8003074:	08005bb8 	.word	0x08005bb8
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08005bc8 	.word	0x08005bc8

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c4:	f7ff ffdc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08005bc8 	.word	0x08005bc8

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b0ae      	sub	sp, #184	@ 0xb8
 80030ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310e:	4bcb      	ldr	r3, [pc, #812]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b0c      	cmp	r3, #12
 8003118:	f200 8206 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x440>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003159 	.word	0x08003159
 8003128:	08003529 	.word	0x08003529
 800312c:	08003529 	.word	0x08003529
 8003130:	08003529 	.word	0x08003529
 8003134:	08003161 	.word	0x08003161
 8003138:	08003529 	.word	0x08003529
 800313c:	08003529 	.word	0x08003529
 8003140:	08003529 	.word	0x08003529
 8003144:	08003169 	.word	0x08003169
 8003148:	08003529 	.word	0x08003529
 800314c:	08003529 	.word	0x08003529
 8003150:	08003529 	.word	0x08003529
 8003154:	08003359 	.word	0x08003359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4bb9      	ldr	r3, [pc, #740]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x358>)
 800315a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800315e:	e1e7      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003160:	4bb8      	ldr	r3, [pc, #736]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003166:	e1e3      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4bb4      	ldr	r3, [pc, #720]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003174:	4bb1      	ldr	r3, [pc, #708]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d071      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003180:	4bae      	ldr	r3, [pc, #696]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	099b      	lsrs	r3, r3, #6
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800318c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	0159      	lsls	r1, r3, #5
 80031b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b8:	0150      	lsls	r0, r2, #5
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4621      	mov	r1, r4
 80031c0:	1a51      	subs	r1, r2, r1
 80031c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80031c4:	4629      	mov	r1, r5
 80031c6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031d8:	4649      	mov	r1, r9
 80031da:	018b      	lsls	r3, r1, #6
 80031dc:	4641      	mov	r1, r8
 80031de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e2:	4641      	mov	r1, r8
 80031e4:	018a      	lsls	r2, r1, #6
 80031e6:	4641      	mov	r1, r8
 80031e8:	1a51      	subs	r1, r2, r1
 80031ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031ec:	4649      	mov	r1, r9
 80031ee:	eb63 0301 	sbc.w	r3, r3, r1
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003200:	4649      	mov	r1, r9
 8003202:	00cb      	lsls	r3, r1, #3
 8003204:	4641      	mov	r1, r8
 8003206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320a:	4641      	mov	r1, r8
 800320c:	00ca      	lsls	r2, r1, #3
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	4603      	mov	r3, r0
 8003214:	4622      	mov	r2, r4
 8003216:	189b      	adds	r3, r3, r2
 8003218:	633b      	str	r3, [r7, #48]	@ 0x30
 800321a:	462b      	mov	r3, r5
 800321c:	460a      	mov	r2, r1
 800321e:	eb42 0303 	adc.w	r3, r2, r3
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003230:	4629      	mov	r1, r5
 8003232:	024b      	lsls	r3, r1, #9
 8003234:	4621      	mov	r1, r4
 8003236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800323a:	4621      	mov	r1, r4
 800323c:	024a      	lsls	r2, r1, #9
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003246:	2200      	movs	r2, #0
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800324c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003254:	f7fd f82c 	bl	80002b0 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003262:	e067      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003264:	4b75      	ldr	r3, [pc, #468]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003270:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800327e:	2300      	movs	r3, #0
 8003280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	0159      	lsls	r1, r3, #5
 8003294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003298:	0150      	lsls	r0, r2, #5
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4621      	mov	r1, r4
 80032a0:	1a51      	subs	r1, r2, r1
 80032a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032a4:	4629      	mov	r1, r5
 80032a6:	eb63 0301 	sbc.w	r3, r3, r1
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032b8:	4649      	mov	r1, r9
 80032ba:	018b      	lsls	r3, r1, #6
 80032bc:	4641      	mov	r1, r8
 80032be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c2:	4641      	mov	r1, r8
 80032c4:	018a      	lsls	r2, r1, #6
 80032c6:	4641      	mov	r1, r8
 80032c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80032cc:	4649      	mov	r1, r9
 80032ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e6:	4692      	mov	sl, r2
 80032e8:	469b      	mov	fp, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	eb1a 0303 	adds.w	r3, sl, r3
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	462b      	mov	r3, r5
 80032f4:	eb4b 0303 	adc.w	r3, fp, r3
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003306:	4629      	mov	r1, r5
 8003308:	028b      	lsls	r3, r1, #10
 800330a:	4621      	mov	r1, r4
 800330c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003310:	4621      	mov	r1, r4
 8003312:	028a      	lsls	r2, r1, #10
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800331c:	2200      	movs	r2, #0
 800331e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003320:	677a      	str	r2, [r7, #116]	@ 0x74
 8003322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003326:	f7fc ffc3 	bl	80002b0 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4613      	mov	r3, r2
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003334:	4b41      	ldr	r3, [pc, #260]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	3301      	adds	r3, #1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800334a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003356:	e0eb      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003358:	4b38      	ldr	r3, [pc, #224]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003364:	4b35      	ldr	r3, [pc, #212]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d06b      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003370:	4b32      	ldr	r3, [pc, #200]	@ (800343c <HAL_RCC_GetSysClockFreq+0x354>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	2200      	movs	r2, #0
 8003378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800337a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800337c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003382:	663b      	str	r3, [r7, #96]	@ 0x60
 8003384:	2300      	movs	r3, #0
 8003386:	667b      	str	r3, [r7, #100]	@ 0x64
 8003388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800338c:	4622      	mov	r2, r4
 800338e:	462b      	mov	r3, r5
 8003390:	f04f 0000 	mov.w	r0, #0
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	0159      	lsls	r1, r3, #5
 800339a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339e:	0150      	lsls	r0, r2, #5
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4621      	mov	r1, r4
 80033a6:	1a51      	subs	r1, r2, r1
 80033a8:	61b9      	str	r1, [r7, #24]
 80033aa:	4629      	mov	r1, r5
 80033ac:	eb63 0301 	sbc.w	r3, r3, r1
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033be:	4659      	mov	r1, fp
 80033c0:	018b      	lsls	r3, r1, #6
 80033c2:	4651      	mov	r1, sl
 80033c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c8:	4651      	mov	r1, sl
 80033ca:	018a      	lsls	r2, r1, #6
 80033cc:	4651      	mov	r1, sl
 80033ce:	ebb2 0801 	subs.w	r8, r2, r1
 80033d2:	4659      	mov	r1, fp
 80033d4:	eb63 0901 	sbc.w	r9, r3, r1
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ec:	4690      	mov	r8, r2
 80033ee:	4699      	mov	r9, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	eb18 0303 	adds.w	r3, r8, r3
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	462b      	mov	r3, r5
 80033fa:	eb49 0303 	adc.w	r3, r9, r3
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800340c:	4629      	mov	r1, r5
 800340e:	024b      	lsls	r3, r1, #9
 8003410:	4621      	mov	r1, r4
 8003412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003416:	4621      	mov	r1, r4
 8003418:	024a      	lsls	r2, r1, #9
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003422:	2200      	movs	r2, #0
 8003424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003426:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800342c:	f7fc ff40 	bl	80002b0 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343a:	e065      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x420>
 800343c:	40023800 	.word	0x40023800
 8003440:	00f42400 	.word	0x00f42400
 8003444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003448:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x458>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	2200      	movs	r2, #0
 8003450:	4618      	mov	r0, r3
 8003452:	4611      	mov	r1, r2
 8003454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003458:	653b      	str	r3, [r7, #80]	@ 0x50
 800345a:	2300      	movs	r3, #0
 800345c:	657b      	str	r3, [r7, #84]	@ 0x54
 800345e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003462:	4642      	mov	r2, r8
 8003464:	464b      	mov	r3, r9
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	0159      	lsls	r1, r3, #5
 8003470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003474:	0150      	lsls	r0, r2, #5
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4641      	mov	r1, r8
 800347c:	1a51      	subs	r1, r2, r1
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	4649      	mov	r1, r9
 8003482:	eb63 0301 	sbc.w	r3, r3, r1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003494:	4659      	mov	r1, fp
 8003496:	018b      	lsls	r3, r1, #6
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349e:	4651      	mov	r1, sl
 80034a0:	018a      	lsls	r2, r1, #6
 80034a2:	4651      	mov	r1, sl
 80034a4:	1a54      	subs	r4, r2, r1
 80034a6:	4659      	mov	r1, fp
 80034a8:	eb63 0501 	sbc.w	r5, r3, r1
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	00eb      	lsls	r3, r5, #3
 80034b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ba:	00e2      	lsls	r2, r4, #3
 80034bc:	4614      	mov	r4, r2
 80034be:	461d      	mov	r5, r3
 80034c0:	4643      	mov	r3, r8
 80034c2:	18e3      	adds	r3, r4, r3
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	464b      	mov	r3, r9
 80034c8:	eb45 0303 	adc.w	r3, r5, r3
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034da:	4629      	mov	r1, r5
 80034dc:	028b      	lsls	r3, r1, #10
 80034de:	4621      	mov	r1, r4
 80034e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e4:	4621      	mov	r1, r4
 80034e6:	028a      	lsls	r2, r1, #10
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034f0:	2200      	movs	r2, #0
 80034f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034fa:	f7fc fed9 	bl	80002b0 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4613      	mov	r3, r2
 8003504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003508:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x458>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0f1b      	lsrs	r3, r3, #28
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800351a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003526:	e003      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800352a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800352e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003534:	4618      	mov	r0, r3
 8003536:	37b8      	adds	r7, #184	@ 0xb8
 8003538:	46bd      	mov	sp, r7
 800353a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	00f42400 	.word	0x00f42400

08003548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e28d      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8083 	beq.w	800366e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003568:	4b94      	ldr	r3, [pc, #592]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b04      	cmp	r3, #4
 8003572:	d019      	beq.n	80035a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003574:	4b91      	ldr	r3, [pc, #580]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
        || \
 800357c:	2b08      	cmp	r3, #8
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003580:	4b8e      	ldr	r3, [pc, #568]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358c:	d00c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358e:	4b8b      	ldr	r3, [pc, #556]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d112      	bne.n	80035c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359a:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	4b84      	ldr	r3, [pc, #528]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d05b      	beq.n	800366c <HAL_RCC_OscConfig+0x124>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d157      	bne.n	800366c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e25a      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_OscConfig+0x90>
 80035ca:	4b7c      	ldr	r3, [pc, #496]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7b      	ldr	r2, [pc, #492]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e01d      	b.n	8003614 <HAL_RCC_OscConfig+0xcc>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0xb4>
 80035e2:	4b76      	ldr	r3, [pc, #472]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b73      	ldr	r3, [pc, #460]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a72      	ldr	r2, [pc, #456]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e00b      	b.n	8003614 <HAL_RCC_OscConfig+0xcc>
 80035fc:	4b6f      	ldr	r3, [pc, #444]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6e      	ldr	r2, [pc, #440]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b6c      	ldr	r3, [pc, #432]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6b      	ldr	r2, [pc, #428]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800360e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd febe 	bl	800139c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fd feba 	bl	800139c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	@ 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e21f      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0xdc>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd feaa 	bl	800139c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd fea6 	bl	800139c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	@ 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e20b      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365e:	4b57      	ldr	r3, [pc, #348]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x104>
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d06f      	beq.n	800375a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800367a:	4b50      	ldr	r3, [pc, #320]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003686:	4b4d      	ldr	r3, [pc, #308]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
        || \
 800368e:	2b08      	cmp	r3, #8
 8003690:	d105      	bne.n	800369e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003692:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b47      	ldr	r3, [pc, #284]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b44      	ldr	r3, [pc, #272]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b41      	ldr	r3, [pc, #260]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x186>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1d3      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4937      	ldr	r1, [pc, #220]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x278>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd fe53 	bl	800139c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fd fe4f 	bl	800139c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1b4      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4925      	ldr	r1, [pc, #148]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <HAL_RCC_OscConfig+0x278>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd fe32 	bl	800139c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fd fe2e 	bl	800139c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e193      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <HAL_RCC_OscConfig+0x27c>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fd fe12 	bl	800139c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd fe0e 	bl	800139c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e173      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_RCC_OscConfig+0x274>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x234>
 800379a:	e01b      	b.n	80037d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <HAL_RCC_OscConfig+0x27c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fdfb 	bl	800139c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	e00e      	b.n	80037c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fd fdf7 	bl	800139c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d907      	bls.n	80037c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e15c      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470000 	.word	0x42470000
 80037c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	4b8a      	ldr	r3, [pc, #552]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ea      	bne.n	80037aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8097 	beq.w	8003910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b83      	ldr	r3, [pc, #524]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	4b7f      	ldr	r3, [pc, #508]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	4a7e      	ldr	r2, [pc, #504]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	@ 0x40
 8003802:	4b7c      	ldr	r3, [pc, #496]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003812:	4b79      	ldr	r3, [pc, #484]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4b76      	ldr	r3, [pc, #472]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fd fdb7 	bl	800139c <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fd fdb3 	bl	800139c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e118      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b6c      	ldr	r3, [pc, #432]	@ (80039f8 <HAL_RCC_OscConfig+0x4b0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x31e>
 8003858:	4b66      	ldr	r3, [pc, #408]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a65      	ldr	r2, [pc, #404]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
 8003864:	e01c      	b.n	80038a0 <HAL_RCC_OscConfig+0x358>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x340>
 800386e:	4b61      	ldr	r3, [pc, #388]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a60      	ldr	r2, [pc, #384]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	4a5d      	ldr	r2, [pc, #372]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	@ 0x70
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0x358>
 8003888:	4b5a      	ldr	r3, [pc, #360]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a59      	ldr	r2, [pc, #356]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
 8003894:	4b57      	ldr	r3, [pc, #348]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	4a56      	ldr	r2, [pc, #344]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800389a:	f023 0304 	bic.w	r3, r3, #4
 800389e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd fd78 	bl	800139c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fd fd74 	bl	800139c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0d7      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	4b4b      	ldr	r3, [pc, #300]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ee      	beq.n	80038b0 <HAL_RCC_OscConfig+0x368>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd fd62 	bl	800139c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fd fd5e 	bl	800139c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0c1      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f2:	4b40      	ldr	r3, [pc, #256]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	4a3a      	ldr	r2, [pc, #232]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800390e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80ad 	beq.w	8003a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d060      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d145      	bne.n	80039ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <HAL_RCC_OscConfig+0x4b4>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fd fd32 	bl	800139c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fd2e 	bl	800139c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e093      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	071b      	lsls	r3, r3, #28
 8003986:	491b      	ldr	r1, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x4b4>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fd fd03 	bl	800139c <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fd fcff 	bl	800139c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e064      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ac:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x452>
 80039b8:	e05c      	b.n	8003a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_RCC_OscConfig+0x4b4>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fcec 	bl	800139c <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fce8 	bl	800139c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e04d      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x480>
 80039e6:	e045      	b.n	8003a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e040      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a00:	4b1f      	ldr	r3, [pc, #124]	@ (8003a80 <HAL_RCC_OscConfig+0x538>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d030      	beq.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d129      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d122      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d119      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d10f      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800

08003a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e042      	b.n	8003b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fb62 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	@ 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fd69 	bl	80045a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	@ 0x28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d175      	bne.n	8003c30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Transmit+0x2c>
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e06e      	b.n	8003c32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2221      	movs	r2, #33	@ 0x21
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b62:	f7fd fc1b 	bl	800139c <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7c:	d108      	bne.n	8003b90 <HAL_UART_Transmit+0x6c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d104      	bne.n	8003b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e003      	b.n	8003b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b98:	e02e      	b.n	8003bf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	@ 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fb05 	bl	80041b4 <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e03a      	b.n	8003c32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	e007      	b.n	8003bea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1cb      	bne.n	8003b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2140      	movs	r1, #64	@ 0x40
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fad1 	bl	80041b4 <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e006      	b.n	8003c32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b0ba      	sub	sp, #232	@ 0xe8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x66>
 8003c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fbc2 	bl	8004424 <UART_Receive_IT>
      return;
 8003ca0:	e25b      	b.n	800415a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80de 	beq.w	8003e68 <HAL_UART_IRQHandler+0x22c>
 8003cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80d1 	beq.w	8003e68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_UART_IRQHandler+0xae>
 8003cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_UART_IRQHandler+0xd2>
 8003cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	f043 0202 	orr.w	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_UART_IRQHandler+0xf6>
 8003d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d011      	beq.n	8003d62 <HAL_UART_IRQHandler+0x126>
 8003d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	f043 0208 	orr.w	r2, r3, #8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 81f2 	beq.w	8004150 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_UART_IRQHandler+0x14e>
 8003d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fb4d 	bl	8004424 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b40      	cmp	r3, #64	@ 0x40
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_UART_IRQHandler+0x17a>
 8003dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04f      	beq.n	8003e56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa55 	bl	8004266 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d141      	bne.n	8003e4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3314      	adds	r3, #20
 8003dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003df6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1d9      	bne.n	8003dca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	4a7e      	ldr	r2, [pc, #504]	@ (800401c <HAL_UART_IRQHandler+0x3e0>)
 8003e24:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd fe77 	bl	8001b1e <HAL_DMA_Abort_IT>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e40:	4610      	mov	r0, r2
 8003e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	e00e      	b.n	8003e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f99e 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	e00a      	b.n	8003e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f99a 	bl	8004188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	e006      	b.n	8003e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f996 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e62:	e175      	b.n	8004150 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	bf00      	nop
    return;
 8003e66:	e173      	b.n	8004150 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	f040 814f 	bne.w	8004110 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8148 	beq.w	8004110 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8141 	beq.w	8004110 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eae:	2b40      	cmp	r3, #64	@ 0x40
 8003eb0:	f040 80b6 	bne.w	8004020 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ec0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8145 	beq.w	8004154 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	f080 813e 	bcs.w	8004154 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ede:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eea:	f000 8088 	beq.w	8003ffe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1d9      	bne.n	8003eee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3314      	adds	r3, #20
 8003f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e1      	bne.n	8003f3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e3      	bne.n	8003f76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fce:	f023 0310 	bic.w	r3, r3, #16
 8003fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fe0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fe2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fe6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e3      	bne.n	8003fbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd fd20 	bl	8001a3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800400c:	b29b      	uxth	r3, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	b29b      	uxth	r3, r3
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8c1 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800401a:	e09b      	b.n	8004154 <HAL_UART_IRQHandler+0x518>
 800401c:	0800432d 	.word	0x0800432d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004028:	b29b      	uxth	r3, r3
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 808e 	beq.w	8004158 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800403c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8089 	beq.w	8004158 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800406a:	647a      	str	r2, [r7, #68]	@ 0x44
 800406c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004070:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e3      	bne.n	8004046 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	623b      	str	r3, [r7, #32]
   return(result);
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80040a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e3      	bne.n	800407e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0310 	bic.w	r3, r3, #16
 80040da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040e8:	61fa      	str	r2, [r7, #28]
 80040ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	69b9      	ldr	r1, [r7, #24]
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	617b      	str	r3, [r7, #20]
   return(result);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e3      	bne.n	80040c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004102:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f847 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800410e:	e023      	b.n	8004158 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <HAL_UART_IRQHandler+0x4f4>
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f913 	bl	8004354 <UART_Transmit_IT>
    return;
 800412e:	e014      	b.n	800415a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00e      	beq.n	800415a <HAL_UART_IRQHandler+0x51e>
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f953 	bl	80043f4 <UART_EndTransmit_IT>
    return;
 800414e:	e004      	b.n	800415a <HAL_UART_IRQHandler+0x51e>
    return;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <HAL_UART_IRQHandler+0x51e>
      return;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <HAL_UART_IRQHandler+0x51e>
      return;
 8004158:	bf00      	nop
  }
}
 800415a:	37e8      	adds	r7, #232	@ 0xe8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c4:	e03b      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041cc:	d037      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fd f8e5 	bl	800139c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	6a3a      	ldr	r2, [r7, #32]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e03a      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d023      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x8a>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b80      	cmp	r3, #128	@ 0x80
 80041fa:	d020      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x8a>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d01d      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d116      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f81d 	bl	8004266 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2208      	movs	r2, #8
 8004230:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e00f      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	429a      	cmp	r2, r3
 800425a:	d0b4      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004266:	b480      	push	{r7}
 8004268:	b095      	sub	sp, #84	@ 0x54
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800428e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004290:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004294:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3314      	adds	r3, #20
 80042c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e5      	bne.n	80042a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d119      	bne.n	8004312 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f023 0310 	bic.w	r3, r3, #16
 80042f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fe:	61ba      	str	r2, [r7, #24]
 8004300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6979      	ldr	r1, [r7, #20]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	613b      	str	r3, [r7, #16]
   return(result);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e5      	bne.n	80042de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004320:	bf00      	nop
 8004322:	3754      	adds	r7, #84	@ 0x54
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7ff ff1e 	bl	8004188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b21      	cmp	r3, #33	@ 0x21
 8004366:	d13e      	bne.n	80043e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004370:	d114      	bne.n	800439c <UART_Transmit_IT+0x48>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d110      	bne.n	800439c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]
 800439a:	e008      	b.n	80043ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	1c59      	adds	r1, r3, #1
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6211      	str	r1, [r2, #32]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4619      	mov	r1, r3
 80043bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e000      	b.n	80043e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
  }
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fea3 	bl	8004160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08c      	sub	sp, #48	@ 0x30
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b22      	cmp	r3, #34	@ 0x22
 8004436:	f040 80ae 	bne.w	8004596 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004442:	d117      	bne.n	8004474 <UART_Receive_IT+0x50>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	b29a      	uxth	r2, r3
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	629a      	str	r2, [r3, #40]	@ 0x28
 8004472:	e026      	b.n	80044c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004486:	d007      	beq.n	8004498 <UART_Receive_IT+0x74>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <UART_Receive_IT+0x82>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e008      	b.n	80044b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4619      	mov	r1, r3
 80044d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d15d      	bne.n	8004592 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0220 	bic.w	r2, r2, #32
 80044e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	2b01      	cmp	r3, #1
 800451a:	d135      	bne.n	8004588 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f023 0310 	bic.w	r3, r3, #16
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004542:	623a      	str	r2, [r7, #32]
 8004544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e5      	bne.n	8004522 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b10      	cmp	r3, #16
 8004562:	d10a      	bne.n	800457a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fe0b 	bl	800419c <HAL_UARTEx_RxEventCallback>
 8004586:	e002      	b.n	800458e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff fdf3 	bl	8004174 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e002      	b.n	8004598 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e000      	b.n	8004598 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3730      	adds	r7, #48	@ 0x30
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b0c0      	sub	sp, #256	@ 0x100
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	68d9      	ldr	r1, [r3, #12]
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	ea40 0301 	orr.w	r3, r0, r1
 80045c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	431a      	orrs	r2, r3
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045f8:	f021 010c 	bic.w	r1, r1, #12
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004606:	430b      	orrs	r3, r1
 8004608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	6999      	ldr	r1, [r3, #24]
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	ea40 0301 	orr.w	r3, r0, r1
 8004626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b8f      	ldr	r3, [pc, #572]	@ (800486c <UART_SetConfig+0x2cc>)
 8004630:	429a      	cmp	r2, r3
 8004632:	d005      	beq.n	8004640 <UART_SetConfig+0xa0>
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b8d      	ldr	r3, [pc, #564]	@ (8004870 <UART_SetConfig+0x2d0>)
 800463c:	429a      	cmp	r2, r3
 800463e:	d104      	bne.n	800464a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7fe fd3e 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8004644:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004648:	e003      	b.n	8004652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800464a:	f7fe fd25 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 800464e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800465c:	f040 810c 	bne.w	8004878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800466a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800466e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	1891      	adds	r1, r2, r2
 8004678:	65b9      	str	r1, [r7, #88]	@ 0x58
 800467a:	415b      	adcs	r3, r3
 800467c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800467e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004682:	4621      	mov	r1, r4
 8004684:	eb12 0801 	adds.w	r8, r2, r1
 8004688:	4629      	mov	r1, r5
 800468a:	eb43 0901 	adc.w	r9, r3, r1
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800469e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a2:	4690      	mov	r8, r2
 80046a4:	4699      	mov	r9, r3
 80046a6:	4623      	mov	r3, r4
 80046a8:	eb18 0303 	adds.w	r3, r8, r3
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046b0:	462b      	mov	r3, r5
 80046b2:	eb49 0303 	adc.w	r3, r9, r3
 80046b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ce:	460b      	mov	r3, r1
 80046d0:	18db      	adds	r3, r3, r3
 80046d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d4:	4613      	mov	r3, r2
 80046d6:	eb42 0303 	adc.w	r3, r2, r3
 80046da:	657b      	str	r3, [r7, #84]	@ 0x54
 80046dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046e4:	f7fb fde4 	bl	80002b0 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b61      	ldr	r3, [pc, #388]	@ (8004874 <UART_SetConfig+0x2d4>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011c      	lsls	r4, r3, #4
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004700:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004710:	415b      	adcs	r3, r3
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004718:	4641      	mov	r1, r8
 800471a:	eb12 0a01 	adds.w	sl, r2, r1
 800471e:	4649      	mov	r1, r9
 8004720:	eb43 0b01 	adc.w	fp, r3, r1
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004738:	4692      	mov	sl, r2
 800473a:	469b      	mov	fp, r3
 800473c:	4643      	mov	r3, r8
 800473e:	eb1a 0303 	adds.w	r3, sl, r3
 8004742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004746:	464b      	mov	r3, r9
 8004748:	eb4b 0303 	adc.w	r3, fp, r3
 800474c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800475c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004764:	460b      	mov	r3, r1
 8004766:	18db      	adds	r3, r3, r3
 8004768:	643b      	str	r3, [r7, #64]	@ 0x40
 800476a:	4613      	mov	r3, r2
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	647b      	str	r3, [r7, #68]	@ 0x44
 8004772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800477a:	f7fb fd99 	bl	80002b0 <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4611      	mov	r1, r2
 8004784:	4b3b      	ldr	r3, [pc, #236]	@ (8004874 <UART_SetConfig+0x2d4>)
 8004786:	fba3 2301 	umull	r2, r3, r3, r1
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2264      	movs	r2, #100	@ 0x64
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	1acb      	subs	r3, r1, r3
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800479a:	4b36      	ldr	r3, [pc, #216]	@ (8004874 <UART_SetConfig+0x2d4>)
 800479c:	fba3 2302 	umull	r2, r3, r3, r2
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047a8:	441c      	add	r4, r3
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047bc:	4642      	mov	r2, r8
 80047be:	464b      	mov	r3, r9
 80047c0:	1891      	adds	r1, r2, r2
 80047c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047c4:	415b      	adcs	r3, r3
 80047c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047cc:	4641      	mov	r1, r8
 80047ce:	1851      	adds	r1, r2, r1
 80047d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80047d2:	4649      	mov	r1, r9
 80047d4:	414b      	adcs	r3, r1
 80047d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047e4:	4659      	mov	r1, fp
 80047e6:	00cb      	lsls	r3, r1, #3
 80047e8:	4651      	mov	r1, sl
 80047ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ee:	4651      	mov	r1, sl
 80047f0:	00ca      	lsls	r2, r1, #3
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	4642      	mov	r2, r8
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004800:	464b      	mov	r3, r9
 8004802:	460a      	mov	r2, r1
 8004804:	eb42 0303 	adc.w	r3, r2, r3
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004818:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800481c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004820:	460b      	mov	r3, r1
 8004822:	18db      	adds	r3, r3, r3
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004826:	4613      	mov	r3, r2
 8004828:	eb42 0303 	adc.w	r3, r2, r3
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004836:	f7fb fd3b 	bl	80002b0 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4b0d      	ldr	r3, [pc, #52]	@ (8004874 <UART_SetConfig+0x2d4>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	@ 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	3332      	adds	r3, #50	@ 0x32
 8004852:	4a08      	ldr	r2, [pc, #32]	@ (8004874 <UART_SetConfig+0x2d4>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 0207 	and.w	r2, r3, #7
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4422      	add	r2, r4
 8004866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004868:	e106      	b.n	8004a78 <UART_SetConfig+0x4d8>
 800486a:	bf00      	nop
 800486c:	40011000 	.word	0x40011000
 8004870:	40011400 	.word	0x40011400
 8004874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004882:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800488a:	4642      	mov	r2, r8
 800488c:	464b      	mov	r3, r9
 800488e:	1891      	adds	r1, r2, r2
 8004890:	6239      	str	r1, [r7, #32]
 8004892:	415b      	adcs	r3, r3
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
 8004896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800489a:	4641      	mov	r1, r8
 800489c:	1854      	adds	r4, r2, r1
 800489e:	4649      	mov	r1, r9
 80048a0:	eb43 0501 	adc.w	r5, r3, r1
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	00eb      	lsls	r3, r5, #3
 80048ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b2:	00e2      	lsls	r2, r4, #3
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
 80048b8:	4643      	mov	r3, r8
 80048ba:	18e3      	adds	r3, r4, r3
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048c0:	464b      	mov	r3, r9
 80048c2:	eb45 0303 	adc.w	r3, r5, r3
 80048c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048e6:	4629      	mov	r1, r5
 80048e8:	008b      	lsls	r3, r1, #2
 80048ea:	4621      	mov	r1, r4
 80048ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f0:	4621      	mov	r1, r4
 80048f2:	008a      	lsls	r2, r1, #2
 80048f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048f8:	f7fb fcda 	bl	80002b0 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b60      	ldr	r3, [pc, #384]	@ (8004a84 <UART_SetConfig+0x4e4>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	011c      	lsls	r4, r3, #4
 800490a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004914:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	61b9      	str	r1, [r7, #24]
 8004924:	415b      	adcs	r3, r3
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492c:	4641      	mov	r1, r8
 800492e:	1851      	adds	r1, r2, r1
 8004930:	6139      	str	r1, [r7, #16]
 8004932:	4649      	mov	r1, r9
 8004934:	414b      	adcs	r3, r1
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004944:	4659      	mov	r1, fp
 8004946:	00cb      	lsls	r3, r1, #3
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494e:	4651      	mov	r1, sl
 8004950:	00ca      	lsls	r2, r1, #3
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	4603      	mov	r3, r0
 8004958:	4642      	mov	r2, r8
 800495a:	189b      	adds	r3, r3, r2
 800495c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004960:	464b      	mov	r3, r9
 8004962:	460a      	mov	r2, r1
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004976:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004984:	4649      	mov	r1, r9
 8004986:	008b      	lsls	r3, r1, #2
 8004988:	4641      	mov	r1, r8
 800498a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498e:	4641      	mov	r1, r8
 8004990:	008a      	lsls	r2, r1, #2
 8004992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004996:	f7fb fc8b 	bl	80002b0 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	4b38      	ldr	r3, [pc, #224]	@ (8004a84 <UART_SetConfig+0x4e4>)
 80049a2:	fba3 2301 	umull	r2, r3, r3, r1
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2264      	movs	r2, #100	@ 0x64
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	3332      	adds	r3, #50	@ 0x32
 80049b4:	4a33      	ldr	r2, [pc, #204]	@ (8004a84 <UART_SetConfig+0x4e4>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049c0:	441c      	add	r4, r3
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80049cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	415b      	adcs	r3, r3
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e0:	4641      	mov	r1, r8
 80049e2:	1851      	adds	r1, r2, r1
 80049e4:	6039      	str	r1, [r7, #0]
 80049e6:	4649      	mov	r1, r9
 80049e8:	414b      	adcs	r3, r1
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f8:	4659      	mov	r1, fp
 80049fa:	00cb      	lsls	r3, r1, #3
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a02:	4651      	mov	r1, sl
 8004a04:	00ca      	lsls	r2, r1, #3
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a12:	464b      	mov	r3, r9
 8004a14:	460a      	mov	r2, r1
 8004a16:	eb42 0303 	adc.w	r3, r2, r3
 8004a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a34:	4649      	mov	r1, r9
 8004a36:	008b      	lsls	r3, r1, #2
 8004a38:	4641      	mov	r1, r8
 8004a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3e:	4641      	mov	r1, r8
 8004a40:	008a      	lsls	r2, r1, #2
 8004a42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a46:	f7fb fc33 	bl	80002b0 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <UART_SetConfig+0x4e4>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	@ 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	3332      	adds	r3, #50	@ 0x32
 8004a62:	4a08      	ldr	r2, [pc, #32]	@ (8004a84 <UART_SetConfig+0x4e4>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4422      	add	r2, r4
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a84:	51eb851f 	.word	0x51eb851f

08004a88 <malloc>:
 8004a88:	4b02      	ldr	r3, [pc, #8]	@ (8004a94 <malloc+0xc>)
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	f000 b82d 	b.w	8004aec <_malloc_r>
 8004a92:	bf00      	nop
 8004a94:	20000018 	.word	0x20000018

08004a98 <free>:
 8004a98:	4b02      	ldr	r3, [pc, #8]	@ (8004aa4 <free+0xc>)
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	f000 ba29 	b.w	8004ef4 <_free_r>
 8004aa2:	bf00      	nop
 8004aa4:	20000018 	.word	0x20000018

08004aa8 <sbrk_aligned>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae8 <sbrk_aligned+0x40>)
 8004aac:	460c      	mov	r4, r1
 8004aae:	6831      	ldr	r1, [r6, #0]
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	b911      	cbnz	r1, 8004aba <sbrk_aligned+0x12>
 8004ab4:	f000 f9e0 	bl	8004e78 <_sbrk_r>
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 f9db 	bl	8004e78 <_sbrk_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d103      	bne.n	8004ace <sbrk_aligned+0x26>
 8004ac6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004aca:	4620      	mov	r0, r4
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	1cc4      	adds	r4, r0, #3
 8004ad0:	f024 0403 	bic.w	r4, r4, #3
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d0f8      	beq.n	8004aca <sbrk_aligned+0x22>
 8004ad8:	1a21      	subs	r1, r4, r0
 8004ada:	4628      	mov	r0, r5
 8004adc:	f000 f9cc 	bl	8004e78 <_sbrk_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d1f2      	bne.n	8004aca <sbrk_aligned+0x22>
 8004ae4:	e7ef      	b.n	8004ac6 <sbrk_aligned+0x1e>
 8004ae6:	bf00      	nop
 8004ae8:	200001b0 	.word	0x200001b0

08004aec <_malloc_r>:
 8004aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af0:	1ccd      	adds	r5, r1, #3
 8004af2:	f025 0503 	bic.w	r5, r5, #3
 8004af6:	3508      	adds	r5, #8
 8004af8:	2d0c      	cmp	r5, #12
 8004afa:	bf38      	it	cc
 8004afc:	250c      	movcc	r5, #12
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	4606      	mov	r6, r0
 8004b02:	db01      	blt.n	8004b08 <_malloc_r+0x1c>
 8004b04:	42a9      	cmp	r1, r5
 8004b06:	d904      	bls.n	8004b12 <_malloc_r+0x26>
 8004b08:	230c      	movs	r3, #12
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be8 <_malloc_r+0xfc>
 8004b16:	f000 f869 	bl	8004bec <__malloc_lock>
 8004b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1e:	461c      	mov	r4, r3
 8004b20:	bb44      	cbnz	r4, 8004b74 <_malloc_r+0x88>
 8004b22:	4629      	mov	r1, r5
 8004b24:	4630      	mov	r0, r6
 8004b26:	f7ff ffbf 	bl	8004aa8 <sbrk_aligned>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d158      	bne.n	8004be2 <_malloc_r+0xf6>
 8004b30:	f8d8 4000 	ldr.w	r4, [r8]
 8004b34:	4627      	mov	r7, r4
 8004b36:	2f00      	cmp	r7, #0
 8004b38:	d143      	bne.n	8004bc2 <_malloc_r+0xd6>
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	d04b      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	4639      	mov	r1, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	eb04 0903 	add.w	r9, r4, r3
 8004b48:	f000 f996 	bl	8004e78 <_sbrk_r>
 8004b4c:	4581      	cmp	r9, r0
 8004b4e:	d142      	bne.n	8004bd6 <_malloc_r+0xea>
 8004b50:	6821      	ldr	r1, [r4, #0]
 8004b52:	1a6d      	subs	r5, r5, r1
 8004b54:	4629      	mov	r1, r5
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7ff ffa6 	bl	8004aa8 <sbrk_aligned>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d03a      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	442b      	add	r3, r5
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	f8d8 3000 	ldr.w	r3, [r8]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	bb62      	cbnz	r2, 8004bc8 <_malloc_r+0xdc>
 8004b6e:	f8c8 7000 	str.w	r7, [r8]
 8004b72:	e00f      	b.n	8004b94 <_malloc_r+0xa8>
 8004b74:	6822      	ldr	r2, [r4, #0]
 8004b76:	1b52      	subs	r2, r2, r5
 8004b78:	d420      	bmi.n	8004bbc <_malloc_r+0xd0>
 8004b7a:	2a0b      	cmp	r2, #11
 8004b7c:	d917      	bls.n	8004bae <_malloc_r+0xc2>
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	6025      	str	r5, [r4, #0]
 8004b84:	bf18      	it	ne
 8004b86:	6059      	strne	r1, [r3, #4]
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	bf08      	it	eq
 8004b8c:	f8c8 1000 	streq.w	r1, [r8]
 8004b90:	5162      	str	r2, [r4, r5]
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 f82f 	bl	8004bf8 <__malloc_unlock>
 8004b9a:	f104 000b 	add.w	r0, r4, #11
 8004b9e:	1d23      	adds	r3, r4, #4
 8004ba0:	f020 0007 	bic.w	r0, r0, #7
 8004ba4:	1ac2      	subs	r2, r0, r3
 8004ba6:	bf1c      	itt	ne
 8004ba8:	1a1b      	subne	r3, r3, r0
 8004baa:	50a3      	strne	r3, [r4, r2]
 8004bac:	e7af      	b.n	8004b0e <_malloc_r+0x22>
 8004bae:	6862      	ldr	r2, [r4, #4]
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	bf0c      	ite	eq
 8004bb4:	f8c8 2000 	streq.w	r2, [r8]
 8004bb8:	605a      	strne	r2, [r3, #4]
 8004bba:	e7eb      	b.n	8004b94 <_malloc_r+0xa8>
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	6864      	ldr	r4, [r4, #4]
 8004bc0:	e7ae      	b.n	8004b20 <_malloc_r+0x34>
 8004bc2:	463c      	mov	r4, r7
 8004bc4:	687f      	ldr	r7, [r7, #4]
 8004bc6:	e7b6      	b.n	8004b36 <_malloc_r+0x4a>
 8004bc8:	461a      	mov	r2, r3
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d1fb      	bne.n	8004bc8 <_malloc_r+0xdc>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6053      	str	r3, [r2, #4]
 8004bd4:	e7de      	b.n	8004b94 <_malloc_r+0xa8>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	6033      	str	r3, [r6, #0]
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 f80c 	bl	8004bf8 <__malloc_unlock>
 8004be0:	e794      	b.n	8004b0c <_malloc_r+0x20>
 8004be2:	6005      	str	r5, [r0, #0]
 8004be4:	e7d6      	b.n	8004b94 <_malloc_r+0xa8>
 8004be6:	bf00      	nop
 8004be8:	200001b4 	.word	0x200001b4

08004bec <__malloc_lock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	@ (8004bf4 <__malloc_lock+0x8>)
 8004bee:	f000 b97e 	b.w	8004eee <__retarget_lock_acquire_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	200002f4 	.word	0x200002f4

08004bf8 <__malloc_unlock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	@ (8004c00 <__malloc_unlock+0x8>)
 8004bfa:	f000 b979 	b.w	8004ef0 <__retarget_lock_release_recursive>
 8004bfe:	bf00      	nop
 8004c00:	200002f4 	.word	0x200002f4

08004c04 <std>:
 8004c04:	2300      	movs	r3, #0
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c12:	6083      	str	r3, [r0, #8]
 8004c14:	8181      	strh	r1, [r0, #12]
 8004c16:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c18:	81c2      	strh	r2, [r0, #14]
 8004c1a:	6183      	str	r3, [r0, #24]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2208      	movs	r2, #8
 8004c20:	305c      	adds	r0, #92	@ 0x5c
 8004c22:	f000 f921 	bl	8004e68 <memset>
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <std+0x58>)
 8004c28:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <std+0x5c>)
 8004c2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <std+0x60>)
 8004c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c32:	4b0d      	ldr	r3, [pc, #52]	@ (8004c68 <std+0x64>)
 8004c34:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <std+0x68>)
 8004c38:	6224      	str	r4, [r4, #32]
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	d006      	beq.n	8004c4c <std+0x48>
 8004c3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c42:	4294      	cmp	r4, r2
 8004c44:	d002      	beq.n	8004c4c <std+0x48>
 8004c46:	33d0      	adds	r3, #208	@ 0xd0
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d105      	bne.n	8004c58 <std+0x54>
 8004c4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c54:	f000 b94a 	b.w	8004eec <__retarget_lock_init_recursive>
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08005681 	.word	0x08005681
 8004c60:	080056a3 	.word	0x080056a3
 8004c64:	080056db 	.word	0x080056db
 8004c68:	080056ff 	.word	0x080056ff
 8004c6c:	200001b8 	.word	0x200001b8

08004c70 <stdio_exit_handler>:
 8004c70:	4a02      	ldr	r2, [pc, #8]	@ (8004c7c <stdio_exit_handler+0xc>)
 8004c72:	4903      	ldr	r1, [pc, #12]	@ (8004c80 <stdio_exit_handler+0x10>)
 8004c74:	4803      	ldr	r0, [pc, #12]	@ (8004c84 <stdio_exit_handler+0x14>)
 8004c76:	f000 b869 	b.w	8004d4c <_fwalk_sglue>
 8004c7a:	bf00      	nop
 8004c7c:	2000000c 	.word	0x2000000c
 8004c80:	08005631 	.word	0x08005631
 8004c84:	2000001c 	.word	0x2000001c

08004c88 <cleanup_stdio>:
 8004c88:	6841      	ldr	r1, [r0, #4]
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <cleanup_stdio+0x34>)
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	d001      	beq.n	8004c98 <cleanup_stdio+0x10>
 8004c94:	f000 fccc 	bl	8005630 <_fflush_r>
 8004c98:	68a1      	ldr	r1, [r4, #8]
 8004c9a:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <cleanup_stdio+0x38>)
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d002      	beq.n	8004ca6 <cleanup_stdio+0x1e>
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 fcc5 	bl	8005630 <_fflush_r>
 8004ca6:	68e1      	ldr	r1, [r4, #12]
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <cleanup_stdio+0x3c>)
 8004caa:	4299      	cmp	r1, r3
 8004cac:	d004      	beq.n	8004cb8 <cleanup_stdio+0x30>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb4:	f000 bcbc 	b.w	8005630 <_fflush_r>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	bf00      	nop
 8004cbc:	200001b8 	.word	0x200001b8
 8004cc0:	20000220 	.word	0x20000220
 8004cc4:	20000288 	.word	0x20000288

08004cc8 <global_stdio_init.part.0>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <global_stdio_init.part.0+0x30>)
 8004ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8004cfc <global_stdio_init.part.0+0x34>)
 8004cce:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <global_stdio_init.part.0+0x38>)
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	f7ff ff94 	bl	8004c04 <std>
 8004cdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	2109      	movs	r1, #9
 8004ce4:	f7ff ff8e 	bl	8004c04 <std>
 8004ce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cec:	2202      	movs	r2, #2
 8004cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf2:	2112      	movs	r1, #18
 8004cf4:	f7ff bf86 	b.w	8004c04 <std>
 8004cf8:	200002f0 	.word	0x200002f0
 8004cfc:	200001b8 	.word	0x200001b8
 8004d00:	08004c71 	.word	0x08004c71

08004d04 <__sfp_lock_acquire>:
 8004d04:	4801      	ldr	r0, [pc, #4]	@ (8004d0c <__sfp_lock_acquire+0x8>)
 8004d06:	f000 b8f2 	b.w	8004eee <__retarget_lock_acquire_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	200002f5 	.word	0x200002f5

08004d10 <__sfp_lock_release>:
 8004d10:	4801      	ldr	r0, [pc, #4]	@ (8004d18 <__sfp_lock_release+0x8>)
 8004d12:	f000 b8ed 	b.w	8004ef0 <__retarget_lock_release_recursive>
 8004d16:	bf00      	nop
 8004d18:	200002f5 	.word	0x200002f5

08004d1c <__sinit>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4604      	mov	r4, r0
 8004d20:	f7ff fff0 	bl	8004d04 <__sfp_lock_acquire>
 8004d24:	6a23      	ldr	r3, [r4, #32]
 8004d26:	b11b      	cbz	r3, 8004d30 <__sinit+0x14>
 8004d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2c:	f7ff bff0 	b.w	8004d10 <__sfp_lock_release>
 8004d30:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <__sinit+0x28>)
 8004d32:	6223      	str	r3, [r4, #32]
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <__sinit+0x2c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f5      	bne.n	8004d28 <__sinit+0xc>
 8004d3c:	f7ff ffc4 	bl	8004cc8 <global_stdio_init.part.0>
 8004d40:	e7f2      	b.n	8004d28 <__sinit+0xc>
 8004d42:	bf00      	nop
 8004d44:	08004c89 	.word	0x08004c89
 8004d48:	200002f0 	.word	0x200002f0

08004d4c <_fwalk_sglue>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4607      	mov	r7, r0
 8004d52:	4688      	mov	r8, r1
 8004d54:	4614      	mov	r4, r2
 8004d56:	2600      	movs	r6, #0
 8004d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d60:	d505      	bpl.n	8004d6e <_fwalk_sglue+0x22>
 8004d62:	6824      	ldr	r4, [r4, #0]
 8004d64:	2c00      	cmp	r4, #0
 8004d66:	d1f7      	bne.n	8004d58 <_fwalk_sglue+0xc>
 8004d68:	4630      	mov	r0, r6
 8004d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d907      	bls.n	8004d84 <_fwalk_sglue+0x38>
 8004d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	d003      	beq.n	8004d84 <_fwalk_sglue+0x38>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4638      	mov	r0, r7
 8004d80:	47c0      	blx	r8
 8004d82:	4306      	orrs	r6, r0
 8004d84:	3568      	adds	r5, #104	@ 0x68
 8004d86:	e7e9      	b.n	8004d5c <_fwalk_sglue+0x10>

08004d88 <iprintf>:
 8004d88:	b40f      	push	{r0, r1, r2, r3}
 8004d8a:	b507      	push	{r0, r1, r2, lr}
 8004d8c:	4906      	ldr	r1, [pc, #24]	@ (8004da8 <iprintf+0x20>)
 8004d8e:	ab04      	add	r3, sp, #16
 8004d90:	6808      	ldr	r0, [r1, #0]
 8004d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d96:	6881      	ldr	r1, [r0, #8]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	f000 f91f 	bl	8004fdc <_vfiprintf_r>
 8004d9e:	b003      	add	sp, #12
 8004da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da4:	b004      	add	sp, #16
 8004da6:	4770      	bx	lr
 8004da8:	20000018 	.word	0x20000018

08004dac <_puts_r>:
 8004dac:	6a03      	ldr	r3, [r0, #32]
 8004dae:	b570      	push	{r4, r5, r6, lr}
 8004db0:	6884      	ldr	r4, [r0, #8]
 8004db2:	4605      	mov	r5, r0
 8004db4:	460e      	mov	r6, r1
 8004db6:	b90b      	cbnz	r3, 8004dbc <_puts_r+0x10>
 8004db8:	f7ff ffb0 	bl	8004d1c <__sinit>
 8004dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dbe:	07db      	lsls	r3, r3, #31
 8004dc0:	d405      	bmi.n	8004dce <_puts_r+0x22>
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	0598      	lsls	r0, r3, #22
 8004dc6:	d402      	bmi.n	8004dce <_puts_r+0x22>
 8004dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dca:	f000 f890 	bl	8004eee <__retarget_lock_acquire_recursive>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	0719      	lsls	r1, r3, #28
 8004dd2:	d502      	bpl.n	8004dda <_puts_r+0x2e>
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d135      	bne.n	8004e46 <_puts_r+0x9a>
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f000 fcd1 	bl	8005784 <__swsetup_r>
 8004de2:	b380      	cbz	r0, 8004e46 <_puts_r+0x9a>
 8004de4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dea:	07da      	lsls	r2, r3, #31
 8004dec:	d405      	bmi.n	8004dfa <_puts_r+0x4e>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	059b      	lsls	r3, r3, #22
 8004df2:	d402      	bmi.n	8004dfa <_puts_r+0x4e>
 8004df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004df6:	f000 f87b 	bl	8004ef0 <__retarget_lock_release_recursive>
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da04      	bge.n	8004e0c <_puts_r+0x60>
 8004e02:	69a2      	ldr	r2, [r4, #24]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	dc17      	bgt.n	8004e38 <_puts_r+0x8c>
 8004e08:	290a      	cmp	r1, #10
 8004e0a:	d015      	beq.n	8004e38 <_puts_r+0x8c>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	6022      	str	r2, [r4, #0]
 8004e12:	7019      	strb	r1, [r3, #0]
 8004e14:	68a3      	ldr	r3, [r4, #8]
 8004e16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	60a3      	str	r3, [r4, #8]
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	d1ed      	bne.n	8004dfe <_puts_r+0x52>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da11      	bge.n	8004e4a <_puts_r+0x9e>
 8004e26:	4622      	mov	r2, r4
 8004e28:	210a      	movs	r1, #10
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 fc6b 	bl	8005706 <__swbuf_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d0d7      	beq.n	8004de4 <_puts_r+0x38>
 8004e34:	250a      	movs	r5, #10
 8004e36:	e7d7      	b.n	8004de8 <_puts_r+0x3c>
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fc63 	bl	8005706 <__swbuf_r>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d1e7      	bne.n	8004e14 <_puts_r+0x68>
 8004e44:	e7ce      	b.n	8004de4 <_puts_r+0x38>
 8004e46:	3e01      	subs	r6, #1
 8004e48:	e7e4      	b.n	8004e14 <_puts_r+0x68>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	220a      	movs	r2, #10
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e7ee      	b.n	8004e34 <_puts_r+0x88>
	...

08004e58 <puts>:
 8004e58:	4b02      	ldr	r3, [pc, #8]	@ (8004e64 <puts+0xc>)
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	f7ff bfa5 	b.w	8004dac <_puts_r>
 8004e62:	bf00      	nop
 8004e64:	20000018 	.word	0x20000018

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <_sbrk_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	@ (8004e94 <_sbrk_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fc f8da 	bl	800103c <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_sbrk_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_sbrk_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200002f8 	.word	0x200002f8

08004e98 <__errno>:
 8004e98:	4b01      	ldr	r3, [pc, #4]	@ (8004ea0 <__errno+0x8>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000018 	.word	0x20000018

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8004edc <__libc_init_array+0x38>)
 8004ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ee0 <__libc_init_array+0x3c>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	42a6      	cmp	r6, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ee4 <__libc_init_array+0x40>)
 8004eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ee8 <__libc_init_array+0x44>)
 8004eb8:	f000 fd84 	bl	80059c4 <_init>
 8004ebc:	1b64      	subs	r4, r4, r5
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ecc:	4798      	blx	r3
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed6:	4798      	blx	r3
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	08005c0c 	.word	0x08005c0c
 8004ee0:	08005c0c 	.word	0x08005c0c
 8004ee4:	08005c0c 	.word	0x08005c0c
 8004ee8:	08005c10 	.word	0x08005c10

08004eec <__retarget_lock_init_recursive>:
 8004eec:	4770      	bx	lr

08004eee <__retarget_lock_acquire_recursive>:
 8004eee:	4770      	bx	lr

08004ef0 <__retarget_lock_release_recursive>:
 8004ef0:	4770      	bx	lr
	...

08004ef4 <_free_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	2900      	cmp	r1, #0
 8004efa:	d041      	beq.n	8004f80 <_free_r+0x8c>
 8004efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f00:	1f0c      	subs	r4, r1, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bfb8      	it	lt
 8004f06:	18e4      	addlt	r4, r4, r3
 8004f08:	f7ff fe70 	bl	8004bec <__malloc_lock>
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <_free_r+0x90>)
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	b933      	cbnz	r3, 8004f20 <_free_r+0x2c>
 8004f12:	6063      	str	r3, [r4, #4]
 8004f14:	6014      	str	r4, [r2, #0]
 8004f16:	4628      	mov	r0, r5
 8004f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f1c:	f7ff be6c 	b.w	8004bf8 <__malloc_unlock>
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	d908      	bls.n	8004f36 <_free_r+0x42>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	1821      	adds	r1, r4, r0
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf01      	itttt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	1809      	addeq	r1, r1, r0
 8004f32:	6021      	streq	r1, [r4, #0]
 8004f34:	e7ed      	b.n	8004f12 <_free_r+0x1e>
 8004f36:	461a      	mov	r2, r3
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b10b      	cbz	r3, 8004f40 <_free_r+0x4c>
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	d9fa      	bls.n	8004f36 <_free_r+0x42>
 8004f40:	6811      	ldr	r1, [r2, #0]
 8004f42:	1850      	adds	r0, r2, r1
 8004f44:	42a0      	cmp	r0, r4
 8004f46:	d10b      	bne.n	8004f60 <_free_r+0x6c>
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	4401      	add	r1, r0
 8004f4c:	1850      	adds	r0, r2, r1
 8004f4e:	4283      	cmp	r3, r0
 8004f50:	6011      	str	r1, [r2, #0]
 8004f52:	d1e0      	bne.n	8004f16 <_free_r+0x22>
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	6053      	str	r3, [r2, #4]
 8004f5a:	4408      	add	r0, r1
 8004f5c:	6010      	str	r0, [r2, #0]
 8004f5e:	e7da      	b.n	8004f16 <_free_r+0x22>
 8004f60:	d902      	bls.n	8004f68 <_free_r+0x74>
 8004f62:	230c      	movs	r3, #12
 8004f64:	602b      	str	r3, [r5, #0]
 8004f66:	e7d6      	b.n	8004f16 <_free_r+0x22>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	1821      	adds	r1, r4, r0
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf04      	itt	eq
 8004f70:	6819      	ldreq	r1, [r3, #0]
 8004f72:	685b      	ldreq	r3, [r3, #4]
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	bf04      	itt	eq
 8004f78:	1809      	addeq	r1, r1, r0
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	6054      	str	r4, [r2, #4]
 8004f7e:	e7ca      	b.n	8004f16 <_free_r+0x22>
 8004f80:	bd38      	pop	{r3, r4, r5, pc}
 8004f82:	bf00      	nop
 8004f84:	200001b4 	.word	0x200001b4

08004f88 <__sfputc_r>:
 8004f88:	6893      	ldr	r3, [r2, #8]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	b410      	push	{r4}
 8004f90:	6093      	str	r3, [r2, #8]
 8004f92:	da08      	bge.n	8004fa6 <__sfputc_r+0x1e>
 8004f94:	6994      	ldr	r4, [r2, #24]
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	db01      	blt.n	8004f9e <__sfputc_r+0x16>
 8004f9a:	290a      	cmp	r1, #10
 8004f9c:	d103      	bne.n	8004fa6 <__sfputc_r+0x1e>
 8004f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fa2:	f000 bbb0 	b.w	8005706 <__swbuf_r>
 8004fa6:	6813      	ldr	r3, [r2, #0]
 8004fa8:	1c58      	adds	r0, r3, #1
 8004faa:	6010      	str	r0, [r2, #0]
 8004fac:	7019      	strb	r1, [r3, #0]
 8004fae:	4608      	mov	r0, r1
 8004fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <__sfputs_r>:
 8004fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb8:	4606      	mov	r6, r0
 8004fba:	460f      	mov	r7, r1
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	18d5      	adds	r5, r2, r3
 8004fc0:	42ac      	cmp	r4, r5
 8004fc2:	d101      	bne.n	8004fc8 <__sfputs_r+0x12>
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e007      	b.n	8004fd8 <__sfputs_r+0x22>
 8004fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fcc:	463a      	mov	r2, r7
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f7ff ffda 	bl	8004f88 <__sfputc_r>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d1f3      	bne.n	8004fc0 <__sfputs_r+0xa>
 8004fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fdc <_vfiprintf_r>:
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	b09d      	sub	sp, #116	@ 0x74
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	4698      	mov	r8, r3
 8004fe8:	4606      	mov	r6, r0
 8004fea:	b118      	cbz	r0, 8004ff4 <_vfiprintf_r+0x18>
 8004fec:	6a03      	ldr	r3, [r0, #32]
 8004fee:	b90b      	cbnz	r3, 8004ff4 <_vfiprintf_r+0x18>
 8004ff0:	f7ff fe94 	bl	8004d1c <__sinit>
 8004ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ff6:	07d9      	lsls	r1, r3, #31
 8004ff8:	d405      	bmi.n	8005006 <_vfiprintf_r+0x2a>
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	059a      	lsls	r2, r3, #22
 8004ffe:	d402      	bmi.n	8005006 <_vfiprintf_r+0x2a>
 8005000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005002:	f7ff ff74 	bl	8004eee <__retarget_lock_acquire_recursive>
 8005006:	89ab      	ldrh	r3, [r5, #12]
 8005008:	071b      	lsls	r3, r3, #28
 800500a:	d501      	bpl.n	8005010 <_vfiprintf_r+0x34>
 800500c:	692b      	ldr	r3, [r5, #16]
 800500e:	b99b      	cbnz	r3, 8005038 <_vfiprintf_r+0x5c>
 8005010:	4629      	mov	r1, r5
 8005012:	4630      	mov	r0, r6
 8005014:	f000 fbb6 	bl	8005784 <__swsetup_r>
 8005018:	b170      	cbz	r0, 8005038 <_vfiprintf_r+0x5c>
 800501a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800501c:	07dc      	lsls	r4, r3, #31
 800501e:	d504      	bpl.n	800502a <_vfiprintf_r+0x4e>
 8005020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005024:	b01d      	add	sp, #116	@ 0x74
 8005026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	0598      	lsls	r0, r3, #22
 800502e:	d4f7      	bmi.n	8005020 <_vfiprintf_r+0x44>
 8005030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005032:	f7ff ff5d 	bl	8004ef0 <__retarget_lock_release_recursive>
 8005036:	e7f3      	b.n	8005020 <_vfiprintf_r+0x44>
 8005038:	2300      	movs	r3, #0
 800503a:	9309      	str	r3, [sp, #36]	@ 0x24
 800503c:	2320      	movs	r3, #32
 800503e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005042:	f8cd 800c 	str.w	r8, [sp, #12]
 8005046:	2330      	movs	r3, #48	@ 0x30
 8005048:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051f8 <_vfiprintf_r+0x21c>
 800504c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005050:	f04f 0901 	mov.w	r9, #1
 8005054:	4623      	mov	r3, r4
 8005056:	469a      	mov	sl, r3
 8005058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800505c:	b10a      	cbz	r2, 8005062 <_vfiprintf_r+0x86>
 800505e:	2a25      	cmp	r2, #37	@ 0x25
 8005060:	d1f9      	bne.n	8005056 <_vfiprintf_r+0x7a>
 8005062:	ebba 0b04 	subs.w	fp, sl, r4
 8005066:	d00b      	beq.n	8005080 <_vfiprintf_r+0xa4>
 8005068:	465b      	mov	r3, fp
 800506a:	4622      	mov	r2, r4
 800506c:	4629      	mov	r1, r5
 800506e:	4630      	mov	r0, r6
 8005070:	f7ff ffa1 	bl	8004fb6 <__sfputs_r>
 8005074:	3001      	adds	r0, #1
 8005076:	f000 80a7 	beq.w	80051c8 <_vfiprintf_r+0x1ec>
 800507a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800507c:	445a      	add	r2, fp
 800507e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005080:	f89a 3000 	ldrb.w	r3, [sl]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 809f 	beq.w	80051c8 <_vfiprintf_r+0x1ec>
 800508a:	2300      	movs	r3, #0
 800508c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005094:	f10a 0a01 	add.w	sl, sl, #1
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	9307      	str	r3, [sp, #28]
 800509c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80050a2:	4654      	mov	r4, sl
 80050a4:	2205      	movs	r2, #5
 80050a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050aa:	4853      	ldr	r0, [pc, #332]	@ (80051f8 <_vfiprintf_r+0x21c>)
 80050ac:	f7fb f8b0 	bl	8000210 <memchr>
 80050b0:	9a04      	ldr	r2, [sp, #16]
 80050b2:	b9d8      	cbnz	r0, 80050ec <_vfiprintf_r+0x110>
 80050b4:	06d1      	lsls	r1, r2, #27
 80050b6:	bf44      	itt	mi
 80050b8:	2320      	movmi	r3, #32
 80050ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050be:	0713      	lsls	r3, r2, #28
 80050c0:	bf44      	itt	mi
 80050c2:	232b      	movmi	r3, #43	@ 0x2b
 80050c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050c8:	f89a 3000 	ldrb.w	r3, [sl]
 80050cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ce:	d015      	beq.n	80050fc <_vfiprintf_r+0x120>
 80050d0:	9a07      	ldr	r2, [sp, #28]
 80050d2:	4654      	mov	r4, sl
 80050d4:	2000      	movs	r0, #0
 80050d6:	f04f 0c0a 	mov.w	ip, #10
 80050da:	4621      	mov	r1, r4
 80050dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e0:	3b30      	subs	r3, #48	@ 0x30
 80050e2:	2b09      	cmp	r3, #9
 80050e4:	d94b      	bls.n	800517e <_vfiprintf_r+0x1a2>
 80050e6:	b1b0      	cbz	r0, 8005116 <_vfiprintf_r+0x13a>
 80050e8:	9207      	str	r2, [sp, #28]
 80050ea:	e014      	b.n	8005116 <_vfiprintf_r+0x13a>
 80050ec:	eba0 0308 	sub.w	r3, r0, r8
 80050f0:	fa09 f303 	lsl.w	r3, r9, r3
 80050f4:	4313      	orrs	r3, r2
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	46a2      	mov	sl, r4
 80050fa:	e7d2      	b.n	80050a2 <_vfiprintf_r+0xc6>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	1d19      	adds	r1, r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	9103      	str	r1, [sp, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	bfbb      	ittet	lt
 8005108:	425b      	neglt	r3, r3
 800510a:	f042 0202 	orrlt.w	r2, r2, #2
 800510e:	9307      	strge	r3, [sp, #28]
 8005110:	9307      	strlt	r3, [sp, #28]
 8005112:	bfb8      	it	lt
 8005114:	9204      	strlt	r2, [sp, #16]
 8005116:	7823      	ldrb	r3, [r4, #0]
 8005118:	2b2e      	cmp	r3, #46	@ 0x2e
 800511a:	d10a      	bne.n	8005132 <_vfiprintf_r+0x156>
 800511c:	7863      	ldrb	r3, [r4, #1]
 800511e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005120:	d132      	bne.n	8005188 <_vfiprintf_r+0x1ac>
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	1d1a      	adds	r2, r3, #4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	9203      	str	r2, [sp, #12]
 800512a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800512e:	3402      	adds	r4, #2
 8005130:	9305      	str	r3, [sp, #20]
 8005132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005208 <_vfiprintf_r+0x22c>
 8005136:	7821      	ldrb	r1, [r4, #0]
 8005138:	2203      	movs	r2, #3
 800513a:	4650      	mov	r0, sl
 800513c:	f7fb f868 	bl	8000210 <memchr>
 8005140:	b138      	cbz	r0, 8005152 <_vfiprintf_r+0x176>
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	eba0 000a 	sub.w	r0, r0, sl
 8005148:	2240      	movs	r2, #64	@ 0x40
 800514a:	4082      	lsls	r2, r0
 800514c:	4313      	orrs	r3, r2
 800514e:	3401      	adds	r4, #1
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005156:	4829      	ldr	r0, [pc, #164]	@ (80051fc <_vfiprintf_r+0x220>)
 8005158:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800515c:	2206      	movs	r2, #6
 800515e:	f7fb f857 	bl	8000210 <memchr>
 8005162:	2800      	cmp	r0, #0
 8005164:	d03f      	beq.n	80051e6 <_vfiprintf_r+0x20a>
 8005166:	4b26      	ldr	r3, [pc, #152]	@ (8005200 <_vfiprintf_r+0x224>)
 8005168:	bb1b      	cbnz	r3, 80051b2 <_vfiprintf_r+0x1d6>
 800516a:	9b03      	ldr	r3, [sp, #12]
 800516c:	3307      	adds	r3, #7
 800516e:	f023 0307 	bic.w	r3, r3, #7
 8005172:	3308      	adds	r3, #8
 8005174:	9303      	str	r3, [sp, #12]
 8005176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005178:	443b      	add	r3, r7
 800517a:	9309      	str	r3, [sp, #36]	@ 0x24
 800517c:	e76a      	b.n	8005054 <_vfiprintf_r+0x78>
 800517e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005182:	460c      	mov	r4, r1
 8005184:	2001      	movs	r0, #1
 8005186:	e7a8      	b.n	80050da <_vfiprintf_r+0xfe>
 8005188:	2300      	movs	r3, #0
 800518a:	3401      	adds	r4, #1
 800518c:	9305      	str	r3, [sp, #20]
 800518e:	4619      	mov	r1, r3
 8005190:	f04f 0c0a 	mov.w	ip, #10
 8005194:	4620      	mov	r0, r4
 8005196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800519a:	3a30      	subs	r2, #48	@ 0x30
 800519c:	2a09      	cmp	r2, #9
 800519e:	d903      	bls.n	80051a8 <_vfiprintf_r+0x1cc>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0c6      	beq.n	8005132 <_vfiprintf_r+0x156>
 80051a4:	9105      	str	r1, [sp, #20]
 80051a6:	e7c4      	b.n	8005132 <_vfiprintf_r+0x156>
 80051a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ac:	4604      	mov	r4, r0
 80051ae:	2301      	movs	r3, #1
 80051b0:	e7f0      	b.n	8005194 <_vfiprintf_r+0x1b8>
 80051b2:	ab03      	add	r3, sp, #12
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	462a      	mov	r2, r5
 80051b8:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <_vfiprintf_r+0x228>)
 80051ba:	a904      	add	r1, sp, #16
 80051bc:	4630      	mov	r0, r6
 80051be:	f3af 8000 	nop.w
 80051c2:	4607      	mov	r7, r0
 80051c4:	1c78      	adds	r0, r7, #1
 80051c6:	d1d6      	bne.n	8005176 <_vfiprintf_r+0x19a>
 80051c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051ca:	07d9      	lsls	r1, r3, #31
 80051cc:	d405      	bmi.n	80051da <_vfiprintf_r+0x1fe>
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	059a      	lsls	r2, r3, #22
 80051d2:	d402      	bmi.n	80051da <_vfiprintf_r+0x1fe>
 80051d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051d6:	f7ff fe8b 	bl	8004ef0 <__retarget_lock_release_recursive>
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	065b      	lsls	r3, r3, #25
 80051de:	f53f af1f 	bmi.w	8005020 <_vfiprintf_r+0x44>
 80051e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051e4:	e71e      	b.n	8005024 <_vfiprintf_r+0x48>
 80051e6:	ab03      	add	r3, sp, #12
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	462a      	mov	r2, r5
 80051ec:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <_vfiprintf_r+0x228>)
 80051ee:	a904      	add	r1, sp, #16
 80051f0:	4630      	mov	r0, r6
 80051f2:	f000 f879 	bl	80052e8 <_printf_i>
 80051f6:	e7e4      	b.n	80051c2 <_vfiprintf_r+0x1e6>
 80051f8:	08005bd0 	.word	0x08005bd0
 80051fc:	08005bda 	.word	0x08005bda
 8005200:	00000000 	.word	0x00000000
 8005204:	08004fb7 	.word	0x08004fb7
 8005208:	08005bd6 	.word	0x08005bd6

0800520c <_printf_common>:
 800520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	4616      	mov	r6, r2
 8005212:	4698      	mov	r8, r3
 8005214:	688a      	ldr	r2, [r1, #8]
 8005216:	690b      	ldr	r3, [r1, #16]
 8005218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800521c:	4293      	cmp	r3, r2
 800521e:	bfb8      	it	lt
 8005220:	4613      	movlt	r3, r2
 8005222:	6033      	str	r3, [r6, #0]
 8005224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005228:	4607      	mov	r7, r0
 800522a:	460c      	mov	r4, r1
 800522c:	b10a      	cbz	r2, 8005232 <_printf_common+0x26>
 800522e:	3301      	adds	r3, #1
 8005230:	6033      	str	r3, [r6, #0]
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	0699      	lsls	r1, r3, #26
 8005236:	bf42      	ittt	mi
 8005238:	6833      	ldrmi	r3, [r6, #0]
 800523a:	3302      	addmi	r3, #2
 800523c:	6033      	strmi	r3, [r6, #0]
 800523e:	6825      	ldr	r5, [r4, #0]
 8005240:	f015 0506 	ands.w	r5, r5, #6
 8005244:	d106      	bne.n	8005254 <_printf_common+0x48>
 8005246:	f104 0a19 	add.w	sl, r4, #25
 800524a:	68e3      	ldr	r3, [r4, #12]
 800524c:	6832      	ldr	r2, [r6, #0]
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	42ab      	cmp	r3, r5
 8005252:	dc26      	bgt.n	80052a2 <_printf_common+0x96>
 8005254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	3b00      	subs	r3, #0
 800525c:	bf18      	it	ne
 800525e:	2301      	movne	r3, #1
 8005260:	0692      	lsls	r2, r2, #26
 8005262:	d42b      	bmi.n	80052bc <_printf_common+0xb0>
 8005264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005268:	4641      	mov	r1, r8
 800526a:	4638      	mov	r0, r7
 800526c:	47c8      	blx	r9
 800526e:	3001      	adds	r0, #1
 8005270:	d01e      	beq.n	80052b0 <_printf_common+0xa4>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	6922      	ldr	r2, [r4, #16]
 8005276:	f003 0306 	and.w	r3, r3, #6
 800527a:	2b04      	cmp	r3, #4
 800527c:	bf02      	ittt	eq
 800527e:	68e5      	ldreq	r5, [r4, #12]
 8005280:	6833      	ldreq	r3, [r6, #0]
 8005282:	1aed      	subeq	r5, r5, r3
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	bf0c      	ite	eq
 8005288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800528c:	2500      	movne	r5, #0
 800528e:	4293      	cmp	r3, r2
 8005290:	bfc4      	itt	gt
 8005292:	1a9b      	subgt	r3, r3, r2
 8005294:	18ed      	addgt	r5, r5, r3
 8005296:	2600      	movs	r6, #0
 8005298:	341a      	adds	r4, #26
 800529a:	42b5      	cmp	r5, r6
 800529c:	d11a      	bne.n	80052d4 <_printf_common+0xc8>
 800529e:	2000      	movs	r0, #0
 80052a0:	e008      	b.n	80052b4 <_printf_common+0xa8>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4652      	mov	r2, sl
 80052a6:	4641      	mov	r1, r8
 80052a8:	4638      	mov	r0, r7
 80052aa:	47c8      	blx	r9
 80052ac:	3001      	adds	r0, #1
 80052ae:	d103      	bne.n	80052b8 <_printf_common+0xac>
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b8:	3501      	adds	r5, #1
 80052ba:	e7c6      	b.n	800524a <_printf_common+0x3e>
 80052bc:	18e1      	adds	r1, r4, r3
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	2030      	movs	r0, #48	@ 0x30
 80052c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052c6:	4422      	add	r2, r4
 80052c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052d0:	3302      	adds	r3, #2
 80052d2:	e7c7      	b.n	8005264 <_printf_common+0x58>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4622      	mov	r2, r4
 80052d8:	4641      	mov	r1, r8
 80052da:	4638      	mov	r0, r7
 80052dc:	47c8      	blx	r9
 80052de:	3001      	adds	r0, #1
 80052e0:	d0e6      	beq.n	80052b0 <_printf_common+0xa4>
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7d9      	b.n	800529a <_printf_common+0x8e>
	...

080052e8 <_printf_i>:
 80052e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	7e0f      	ldrb	r7, [r1, #24]
 80052ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052f0:	2f78      	cmp	r7, #120	@ 0x78
 80052f2:	4691      	mov	r9, r2
 80052f4:	4680      	mov	r8, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	469a      	mov	sl, r3
 80052fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052fe:	d807      	bhi.n	8005310 <_printf_i+0x28>
 8005300:	2f62      	cmp	r7, #98	@ 0x62
 8005302:	d80a      	bhi.n	800531a <_printf_i+0x32>
 8005304:	2f00      	cmp	r7, #0
 8005306:	f000 80d2 	beq.w	80054ae <_printf_i+0x1c6>
 800530a:	2f58      	cmp	r7, #88	@ 0x58
 800530c:	f000 80b9 	beq.w	8005482 <_printf_i+0x19a>
 8005310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005318:	e03a      	b.n	8005390 <_printf_i+0xa8>
 800531a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800531e:	2b15      	cmp	r3, #21
 8005320:	d8f6      	bhi.n	8005310 <_printf_i+0x28>
 8005322:	a101      	add	r1, pc, #4	@ (adr r1, 8005328 <_printf_i+0x40>)
 8005324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005328:	08005381 	.word	0x08005381
 800532c:	08005395 	.word	0x08005395
 8005330:	08005311 	.word	0x08005311
 8005334:	08005311 	.word	0x08005311
 8005338:	08005311 	.word	0x08005311
 800533c:	08005311 	.word	0x08005311
 8005340:	08005395 	.word	0x08005395
 8005344:	08005311 	.word	0x08005311
 8005348:	08005311 	.word	0x08005311
 800534c:	08005311 	.word	0x08005311
 8005350:	08005311 	.word	0x08005311
 8005354:	08005495 	.word	0x08005495
 8005358:	080053bf 	.word	0x080053bf
 800535c:	0800544f 	.word	0x0800544f
 8005360:	08005311 	.word	0x08005311
 8005364:	08005311 	.word	0x08005311
 8005368:	080054b7 	.word	0x080054b7
 800536c:	08005311 	.word	0x08005311
 8005370:	080053bf 	.word	0x080053bf
 8005374:	08005311 	.word	0x08005311
 8005378:	08005311 	.word	0x08005311
 800537c:	08005457 	.word	0x08005457
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6032      	str	r2, [r6, #0]
 8005388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800538c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005390:	2301      	movs	r3, #1
 8005392:	e09d      	b.n	80054d0 <_printf_i+0x1e8>
 8005394:	6833      	ldr	r3, [r6, #0]
 8005396:	6820      	ldr	r0, [r4, #0]
 8005398:	1d19      	adds	r1, r3, #4
 800539a:	6031      	str	r1, [r6, #0]
 800539c:	0606      	lsls	r6, r0, #24
 800539e:	d501      	bpl.n	80053a4 <_printf_i+0xbc>
 80053a0:	681d      	ldr	r5, [r3, #0]
 80053a2:	e003      	b.n	80053ac <_printf_i+0xc4>
 80053a4:	0645      	lsls	r5, r0, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_printf_i+0xb8>
 80053a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	da03      	bge.n	80053b8 <_printf_i+0xd0>
 80053b0:	232d      	movs	r3, #45	@ 0x2d
 80053b2:	426d      	negs	r5, r5
 80053b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b8:	4859      	ldr	r0, [pc, #356]	@ (8005520 <_printf_i+0x238>)
 80053ba:	230a      	movs	r3, #10
 80053bc:	e011      	b.n	80053e2 <_printf_i+0xfa>
 80053be:	6821      	ldr	r1, [r4, #0]
 80053c0:	6833      	ldr	r3, [r6, #0]
 80053c2:	0608      	lsls	r0, r1, #24
 80053c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80053c8:	d402      	bmi.n	80053d0 <_printf_i+0xe8>
 80053ca:	0649      	lsls	r1, r1, #25
 80053cc:	bf48      	it	mi
 80053ce:	b2ad      	uxthmi	r5, r5
 80053d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80053d2:	4853      	ldr	r0, [pc, #332]	@ (8005520 <_printf_i+0x238>)
 80053d4:	6033      	str	r3, [r6, #0]
 80053d6:	bf14      	ite	ne
 80053d8:	230a      	movne	r3, #10
 80053da:	2308      	moveq	r3, #8
 80053dc:	2100      	movs	r1, #0
 80053de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053e2:	6866      	ldr	r6, [r4, #4]
 80053e4:	60a6      	str	r6, [r4, #8]
 80053e6:	2e00      	cmp	r6, #0
 80053e8:	bfa2      	ittt	ge
 80053ea:	6821      	ldrge	r1, [r4, #0]
 80053ec:	f021 0104 	bicge.w	r1, r1, #4
 80053f0:	6021      	strge	r1, [r4, #0]
 80053f2:	b90d      	cbnz	r5, 80053f8 <_printf_i+0x110>
 80053f4:	2e00      	cmp	r6, #0
 80053f6:	d04b      	beq.n	8005490 <_printf_i+0x1a8>
 80053f8:	4616      	mov	r6, r2
 80053fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80053fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005402:	5dc7      	ldrb	r7, [r0, r7]
 8005404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005408:	462f      	mov	r7, r5
 800540a:	42bb      	cmp	r3, r7
 800540c:	460d      	mov	r5, r1
 800540e:	d9f4      	bls.n	80053fa <_printf_i+0x112>
 8005410:	2b08      	cmp	r3, #8
 8005412:	d10b      	bne.n	800542c <_printf_i+0x144>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	07df      	lsls	r7, r3, #31
 8005418:	d508      	bpl.n	800542c <_printf_i+0x144>
 800541a:	6923      	ldr	r3, [r4, #16]
 800541c:	6861      	ldr	r1, [r4, #4]
 800541e:	4299      	cmp	r1, r3
 8005420:	bfde      	ittt	le
 8005422:	2330      	movle	r3, #48	@ 0x30
 8005424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005428:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800542c:	1b92      	subs	r2, r2, r6
 800542e:	6122      	str	r2, [r4, #16]
 8005430:	f8cd a000 	str.w	sl, [sp]
 8005434:	464b      	mov	r3, r9
 8005436:	aa03      	add	r2, sp, #12
 8005438:	4621      	mov	r1, r4
 800543a:	4640      	mov	r0, r8
 800543c:	f7ff fee6 	bl	800520c <_printf_common>
 8005440:	3001      	adds	r0, #1
 8005442:	d14a      	bne.n	80054da <_printf_i+0x1f2>
 8005444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005448:	b004      	add	sp, #16
 800544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	f043 0320 	orr.w	r3, r3, #32
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	4833      	ldr	r0, [pc, #204]	@ (8005524 <_printf_i+0x23c>)
 8005458:	2778      	movs	r7, #120	@ 0x78
 800545a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	6831      	ldr	r1, [r6, #0]
 8005462:	061f      	lsls	r7, r3, #24
 8005464:	f851 5b04 	ldr.w	r5, [r1], #4
 8005468:	d402      	bmi.n	8005470 <_printf_i+0x188>
 800546a:	065f      	lsls	r7, r3, #25
 800546c:	bf48      	it	mi
 800546e:	b2ad      	uxthmi	r5, r5
 8005470:	6031      	str	r1, [r6, #0]
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	bf44      	itt	mi
 8005476:	f043 0320 	orrmi.w	r3, r3, #32
 800547a:	6023      	strmi	r3, [r4, #0]
 800547c:	b11d      	cbz	r5, 8005486 <_printf_i+0x19e>
 800547e:	2310      	movs	r3, #16
 8005480:	e7ac      	b.n	80053dc <_printf_i+0xf4>
 8005482:	4827      	ldr	r0, [pc, #156]	@ (8005520 <_printf_i+0x238>)
 8005484:	e7e9      	b.n	800545a <_printf_i+0x172>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f023 0320 	bic.w	r3, r3, #32
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	e7f6      	b.n	800547e <_printf_i+0x196>
 8005490:	4616      	mov	r6, r2
 8005492:	e7bd      	b.n	8005410 <_printf_i+0x128>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	6825      	ldr	r5, [r4, #0]
 8005498:	6961      	ldr	r1, [r4, #20]
 800549a:	1d18      	adds	r0, r3, #4
 800549c:	6030      	str	r0, [r6, #0]
 800549e:	062e      	lsls	r6, r5, #24
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	d501      	bpl.n	80054a8 <_printf_i+0x1c0>
 80054a4:	6019      	str	r1, [r3, #0]
 80054a6:	e002      	b.n	80054ae <_printf_i+0x1c6>
 80054a8:	0668      	lsls	r0, r5, #25
 80054aa:	d5fb      	bpl.n	80054a4 <_printf_i+0x1bc>
 80054ac:	8019      	strh	r1, [r3, #0]
 80054ae:	2300      	movs	r3, #0
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	4616      	mov	r6, r2
 80054b4:	e7bc      	b.n	8005430 <_printf_i+0x148>
 80054b6:	6833      	ldr	r3, [r6, #0]
 80054b8:	1d1a      	adds	r2, r3, #4
 80054ba:	6032      	str	r2, [r6, #0]
 80054bc:	681e      	ldr	r6, [r3, #0]
 80054be:	6862      	ldr	r2, [r4, #4]
 80054c0:	2100      	movs	r1, #0
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7fa fea4 	bl	8000210 <memchr>
 80054c8:	b108      	cbz	r0, 80054ce <_printf_i+0x1e6>
 80054ca:	1b80      	subs	r0, r0, r6
 80054cc:	6060      	str	r0, [r4, #4]
 80054ce:	6863      	ldr	r3, [r4, #4]
 80054d0:	6123      	str	r3, [r4, #16]
 80054d2:	2300      	movs	r3, #0
 80054d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d8:	e7aa      	b.n	8005430 <_printf_i+0x148>
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	4632      	mov	r2, r6
 80054de:	4649      	mov	r1, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	47d0      	blx	sl
 80054e4:	3001      	adds	r0, #1
 80054e6:	d0ad      	beq.n	8005444 <_printf_i+0x15c>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	079b      	lsls	r3, r3, #30
 80054ec:	d413      	bmi.n	8005516 <_printf_i+0x22e>
 80054ee:	68e0      	ldr	r0, [r4, #12]
 80054f0:	9b03      	ldr	r3, [sp, #12]
 80054f2:	4298      	cmp	r0, r3
 80054f4:	bfb8      	it	lt
 80054f6:	4618      	movlt	r0, r3
 80054f8:	e7a6      	b.n	8005448 <_printf_i+0x160>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4632      	mov	r2, r6
 80054fe:	4649      	mov	r1, r9
 8005500:	4640      	mov	r0, r8
 8005502:	47d0      	blx	sl
 8005504:	3001      	adds	r0, #1
 8005506:	d09d      	beq.n	8005444 <_printf_i+0x15c>
 8005508:	3501      	adds	r5, #1
 800550a:	68e3      	ldr	r3, [r4, #12]
 800550c:	9903      	ldr	r1, [sp, #12]
 800550e:	1a5b      	subs	r3, r3, r1
 8005510:	42ab      	cmp	r3, r5
 8005512:	dcf2      	bgt.n	80054fa <_printf_i+0x212>
 8005514:	e7eb      	b.n	80054ee <_printf_i+0x206>
 8005516:	2500      	movs	r5, #0
 8005518:	f104 0619 	add.w	r6, r4, #25
 800551c:	e7f5      	b.n	800550a <_printf_i+0x222>
 800551e:	bf00      	nop
 8005520:	08005be1 	.word	0x08005be1
 8005524:	08005bf2 	.word	0x08005bf2

08005528 <__sflush_r>:
 8005528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	0716      	lsls	r6, r2, #28
 8005532:	4605      	mov	r5, r0
 8005534:	460c      	mov	r4, r1
 8005536:	d454      	bmi.n	80055e2 <__sflush_r+0xba>
 8005538:	684b      	ldr	r3, [r1, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	dc02      	bgt.n	8005544 <__sflush_r+0x1c>
 800553e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	dd48      	ble.n	80055d6 <__sflush_r+0xae>
 8005544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005546:	2e00      	cmp	r6, #0
 8005548:	d045      	beq.n	80055d6 <__sflush_r+0xae>
 800554a:	2300      	movs	r3, #0
 800554c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005550:	682f      	ldr	r7, [r5, #0]
 8005552:	6a21      	ldr	r1, [r4, #32]
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	d030      	beq.n	80055ba <__sflush_r+0x92>
 8005558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	0759      	lsls	r1, r3, #29
 800555e:	d505      	bpl.n	800556c <__sflush_r+0x44>
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005566:	b10b      	cbz	r3, 800556c <__sflush_r+0x44>
 8005568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	2300      	movs	r3, #0
 800556e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005570:	6a21      	ldr	r1, [r4, #32]
 8005572:	4628      	mov	r0, r5
 8005574:	47b0      	blx	r6
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	d106      	bne.n	800558a <__sflush_r+0x62>
 800557c:	6829      	ldr	r1, [r5, #0]
 800557e:	291d      	cmp	r1, #29
 8005580:	d82b      	bhi.n	80055da <__sflush_r+0xb2>
 8005582:	4a2a      	ldr	r2, [pc, #168]	@ (800562c <__sflush_r+0x104>)
 8005584:	410a      	asrs	r2, r1
 8005586:	07d6      	lsls	r6, r2, #31
 8005588:	d427      	bmi.n	80055da <__sflush_r+0xb2>
 800558a:	2200      	movs	r2, #0
 800558c:	6062      	str	r2, [r4, #4]
 800558e:	04d9      	lsls	r1, r3, #19
 8005590:	6922      	ldr	r2, [r4, #16]
 8005592:	6022      	str	r2, [r4, #0]
 8005594:	d504      	bpl.n	80055a0 <__sflush_r+0x78>
 8005596:	1c42      	adds	r2, r0, #1
 8005598:	d101      	bne.n	800559e <__sflush_r+0x76>
 800559a:	682b      	ldr	r3, [r5, #0]
 800559c:	b903      	cbnz	r3, 80055a0 <__sflush_r+0x78>
 800559e:	6560      	str	r0, [r4, #84]	@ 0x54
 80055a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055a2:	602f      	str	r7, [r5, #0]
 80055a4:	b1b9      	cbz	r1, 80055d6 <__sflush_r+0xae>
 80055a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055aa:	4299      	cmp	r1, r3
 80055ac:	d002      	beq.n	80055b4 <__sflush_r+0x8c>
 80055ae:	4628      	mov	r0, r5
 80055b0:	f7ff fca0 	bl	8004ef4 <_free_r>
 80055b4:	2300      	movs	r3, #0
 80055b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80055b8:	e00d      	b.n	80055d6 <__sflush_r+0xae>
 80055ba:	2301      	movs	r3, #1
 80055bc:	4628      	mov	r0, r5
 80055be:	47b0      	blx	r6
 80055c0:	4602      	mov	r2, r0
 80055c2:	1c50      	adds	r0, r2, #1
 80055c4:	d1c9      	bne.n	800555a <__sflush_r+0x32>
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0c6      	beq.n	800555a <__sflush_r+0x32>
 80055cc:	2b1d      	cmp	r3, #29
 80055ce:	d001      	beq.n	80055d4 <__sflush_r+0xac>
 80055d0:	2b16      	cmp	r3, #22
 80055d2:	d11e      	bne.n	8005612 <__sflush_r+0xea>
 80055d4:	602f      	str	r7, [r5, #0]
 80055d6:	2000      	movs	r0, #0
 80055d8:	e022      	b.n	8005620 <__sflush_r+0xf8>
 80055da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055de:	b21b      	sxth	r3, r3
 80055e0:	e01b      	b.n	800561a <__sflush_r+0xf2>
 80055e2:	690f      	ldr	r7, [r1, #16]
 80055e4:	2f00      	cmp	r7, #0
 80055e6:	d0f6      	beq.n	80055d6 <__sflush_r+0xae>
 80055e8:	0793      	lsls	r3, r2, #30
 80055ea:	680e      	ldr	r6, [r1, #0]
 80055ec:	bf08      	it	eq
 80055ee:	694b      	ldreq	r3, [r1, #20]
 80055f0:	600f      	str	r7, [r1, #0]
 80055f2:	bf18      	it	ne
 80055f4:	2300      	movne	r3, #0
 80055f6:	eba6 0807 	sub.w	r8, r6, r7
 80055fa:	608b      	str	r3, [r1, #8]
 80055fc:	f1b8 0f00 	cmp.w	r8, #0
 8005600:	dde9      	ble.n	80055d6 <__sflush_r+0xae>
 8005602:	6a21      	ldr	r1, [r4, #32]
 8005604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005606:	4643      	mov	r3, r8
 8005608:	463a      	mov	r2, r7
 800560a:	4628      	mov	r0, r5
 800560c:	47b0      	blx	r6
 800560e:	2800      	cmp	r0, #0
 8005610:	dc08      	bgt.n	8005624 <__sflush_r+0xfc>
 8005612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005624:	4407      	add	r7, r0
 8005626:	eba8 0800 	sub.w	r8, r8, r0
 800562a:	e7e7      	b.n	80055fc <__sflush_r+0xd4>
 800562c:	dfbffffe 	.word	0xdfbffffe

08005630 <_fflush_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	690b      	ldr	r3, [r1, #16]
 8005634:	4605      	mov	r5, r0
 8005636:	460c      	mov	r4, r1
 8005638:	b913      	cbnz	r3, 8005640 <_fflush_r+0x10>
 800563a:	2500      	movs	r5, #0
 800563c:	4628      	mov	r0, r5
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	b118      	cbz	r0, 800564a <_fflush_r+0x1a>
 8005642:	6a03      	ldr	r3, [r0, #32]
 8005644:	b90b      	cbnz	r3, 800564a <_fflush_r+0x1a>
 8005646:	f7ff fb69 	bl	8004d1c <__sinit>
 800564a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f3      	beq.n	800563a <_fflush_r+0xa>
 8005652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005654:	07d0      	lsls	r0, r2, #31
 8005656:	d404      	bmi.n	8005662 <_fflush_r+0x32>
 8005658:	0599      	lsls	r1, r3, #22
 800565a:	d402      	bmi.n	8005662 <_fflush_r+0x32>
 800565c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800565e:	f7ff fc46 	bl	8004eee <__retarget_lock_acquire_recursive>
 8005662:	4628      	mov	r0, r5
 8005664:	4621      	mov	r1, r4
 8005666:	f7ff ff5f 	bl	8005528 <__sflush_r>
 800566a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800566c:	07da      	lsls	r2, r3, #31
 800566e:	4605      	mov	r5, r0
 8005670:	d4e4      	bmi.n	800563c <_fflush_r+0xc>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	059b      	lsls	r3, r3, #22
 8005676:	d4e1      	bmi.n	800563c <_fflush_r+0xc>
 8005678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800567a:	f7ff fc39 	bl	8004ef0 <__retarget_lock_release_recursive>
 800567e:	e7dd      	b.n	800563c <_fflush_r+0xc>

08005680 <__sread>:
 8005680:	b510      	push	{r4, lr}
 8005682:	460c      	mov	r4, r1
 8005684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005688:	f000 f978 	bl	800597c <_read_r>
 800568c:	2800      	cmp	r0, #0
 800568e:	bfab      	itete	ge
 8005690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005692:	89a3      	ldrhlt	r3, [r4, #12]
 8005694:	181b      	addge	r3, r3, r0
 8005696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800569a:	bfac      	ite	ge
 800569c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800569e:	81a3      	strhlt	r3, [r4, #12]
 80056a0:	bd10      	pop	{r4, pc}

080056a2 <__swrite>:
 80056a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a6:	461f      	mov	r7, r3
 80056a8:	898b      	ldrh	r3, [r1, #12]
 80056aa:	05db      	lsls	r3, r3, #23
 80056ac:	4605      	mov	r5, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	4616      	mov	r6, r2
 80056b2:	d505      	bpl.n	80056c0 <__swrite+0x1e>
 80056b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b8:	2302      	movs	r3, #2
 80056ba:	2200      	movs	r2, #0
 80056bc:	f000 f94c 	bl	8005958 <_lseek_r>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	4632      	mov	r2, r6
 80056ce:	463b      	mov	r3, r7
 80056d0:	4628      	mov	r0, r5
 80056d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d6:	f000 b963 	b.w	80059a0 <_write_r>

080056da <__sseek>:
 80056da:	b510      	push	{r4, lr}
 80056dc:	460c      	mov	r4, r1
 80056de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e2:	f000 f939 	bl	8005958 <_lseek_r>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	bf15      	itete	ne
 80056ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056f6:	81a3      	strheq	r3, [r4, #12]
 80056f8:	bf18      	it	ne
 80056fa:	81a3      	strhne	r3, [r4, #12]
 80056fc:	bd10      	pop	{r4, pc}

080056fe <__sclose>:
 80056fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005702:	f000 b8f7 	b.w	80058f4 <_close_r>

08005706 <__swbuf_r>:
 8005706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005708:	460e      	mov	r6, r1
 800570a:	4614      	mov	r4, r2
 800570c:	4605      	mov	r5, r0
 800570e:	b118      	cbz	r0, 8005718 <__swbuf_r+0x12>
 8005710:	6a03      	ldr	r3, [r0, #32]
 8005712:	b90b      	cbnz	r3, 8005718 <__swbuf_r+0x12>
 8005714:	f7ff fb02 	bl	8004d1c <__sinit>
 8005718:	69a3      	ldr	r3, [r4, #24]
 800571a:	60a3      	str	r3, [r4, #8]
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	071a      	lsls	r2, r3, #28
 8005720:	d501      	bpl.n	8005726 <__swbuf_r+0x20>
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	b943      	cbnz	r3, 8005738 <__swbuf_r+0x32>
 8005726:	4621      	mov	r1, r4
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f82b 	bl	8005784 <__swsetup_r>
 800572e:	b118      	cbz	r0, 8005738 <__swbuf_r+0x32>
 8005730:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005734:	4638      	mov	r0, r7
 8005736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	6922      	ldr	r2, [r4, #16]
 800573c:	1a98      	subs	r0, r3, r2
 800573e:	6963      	ldr	r3, [r4, #20]
 8005740:	b2f6      	uxtb	r6, r6
 8005742:	4283      	cmp	r3, r0
 8005744:	4637      	mov	r7, r6
 8005746:	dc05      	bgt.n	8005754 <__swbuf_r+0x4e>
 8005748:	4621      	mov	r1, r4
 800574a:	4628      	mov	r0, r5
 800574c:	f7ff ff70 	bl	8005630 <_fflush_r>
 8005750:	2800      	cmp	r0, #0
 8005752:	d1ed      	bne.n	8005730 <__swbuf_r+0x2a>
 8005754:	68a3      	ldr	r3, [r4, #8]
 8005756:	3b01      	subs	r3, #1
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	6022      	str	r2, [r4, #0]
 8005760:	701e      	strb	r6, [r3, #0]
 8005762:	6962      	ldr	r2, [r4, #20]
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	429a      	cmp	r2, r3
 8005768:	d004      	beq.n	8005774 <__swbuf_r+0x6e>
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	07db      	lsls	r3, r3, #31
 800576e:	d5e1      	bpl.n	8005734 <__swbuf_r+0x2e>
 8005770:	2e0a      	cmp	r6, #10
 8005772:	d1df      	bne.n	8005734 <__swbuf_r+0x2e>
 8005774:	4621      	mov	r1, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f7ff ff5a 	bl	8005630 <_fflush_r>
 800577c:	2800      	cmp	r0, #0
 800577e:	d0d9      	beq.n	8005734 <__swbuf_r+0x2e>
 8005780:	e7d6      	b.n	8005730 <__swbuf_r+0x2a>
	...

08005784 <__swsetup_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4b29      	ldr	r3, [pc, #164]	@ (800582c <__swsetup_r+0xa8>)
 8005788:	4605      	mov	r5, r0
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	460c      	mov	r4, r1
 800578e:	b118      	cbz	r0, 8005798 <__swsetup_r+0x14>
 8005790:	6a03      	ldr	r3, [r0, #32]
 8005792:	b90b      	cbnz	r3, 8005798 <__swsetup_r+0x14>
 8005794:	f7ff fac2 	bl	8004d1c <__sinit>
 8005798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800579c:	0719      	lsls	r1, r3, #28
 800579e:	d422      	bmi.n	80057e6 <__swsetup_r+0x62>
 80057a0:	06da      	lsls	r2, r3, #27
 80057a2:	d407      	bmi.n	80057b4 <__swsetup_r+0x30>
 80057a4:	2209      	movs	r2, #9
 80057a6:	602a      	str	r2, [r5, #0]
 80057a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057b2:	e033      	b.n	800581c <__swsetup_r+0x98>
 80057b4:	0758      	lsls	r0, r3, #29
 80057b6:	d512      	bpl.n	80057de <__swsetup_r+0x5a>
 80057b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ba:	b141      	cbz	r1, 80057ce <__swsetup_r+0x4a>
 80057bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057c0:	4299      	cmp	r1, r3
 80057c2:	d002      	beq.n	80057ca <__swsetup_r+0x46>
 80057c4:	4628      	mov	r0, r5
 80057c6:	f7ff fb95 	bl	8004ef4 <_free_r>
 80057ca:	2300      	movs	r3, #0
 80057cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	2300      	movs	r3, #0
 80057d8:	6063      	str	r3, [r4, #4]
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f043 0308 	orr.w	r3, r3, #8
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	b94b      	cbnz	r3, 80057fe <__swsetup_r+0x7a>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f4:	d003      	beq.n	80057fe <__swsetup_r+0x7a>
 80057f6:	4621      	mov	r1, r4
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 f83f 	bl	800587c <__smakebuf_r>
 80057fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005802:	f013 0201 	ands.w	r2, r3, #1
 8005806:	d00a      	beq.n	800581e <__swsetup_r+0x9a>
 8005808:	2200      	movs	r2, #0
 800580a:	60a2      	str	r2, [r4, #8]
 800580c:	6962      	ldr	r2, [r4, #20]
 800580e:	4252      	negs	r2, r2
 8005810:	61a2      	str	r2, [r4, #24]
 8005812:	6922      	ldr	r2, [r4, #16]
 8005814:	b942      	cbnz	r2, 8005828 <__swsetup_r+0xa4>
 8005816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800581a:	d1c5      	bne.n	80057a8 <__swsetup_r+0x24>
 800581c:	bd38      	pop	{r3, r4, r5, pc}
 800581e:	0799      	lsls	r1, r3, #30
 8005820:	bf58      	it	pl
 8005822:	6962      	ldrpl	r2, [r4, #20]
 8005824:	60a2      	str	r2, [r4, #8]
 8005826:	e7f4      	b.n	8005812 <__swsetup_r+0x8e>
 8005828:	2000      	movs	r0, #0
 800582a:	e7f7      	b.n	800581c <__swsetup_r+0x98>
 800582c:	20000018 	.word	0x20000018

08005830 <__swhatbuf_r>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	460c      	mov	r4, r1
 8005834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005838:	2900      	cmp	r1, #0
 800583a:	b096      	sub	sp, #88	@ 0x58
 800583c:	4615      	mov	r5, r2
 800583e:	461e      	mov	r6, r3
 8005840:	da0d      	bge.n	800585e <__swhatbuf_r+0x2e>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	bf14      	ite	ne
 800584e:	2340      	movne	r3, #64	@ 0x40
 8005850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005854:	2000      	movs	r0, #0
 8005856:	6031      	str	r1, [r6, #0]
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	b016      	add	sp, #88	@ 0x58
 800585c:	bd70      	pop	{r4, r5, r6, pc}
 800585e:	466a      	mov	r2, sp
 8005860:	f000 f858 	bl	8005914 <_fstat_r>
 8005864:	2800      	cmp	r0, #0
 8005866:	dbec      	blt.n	8005842 <__swhatbuf_r+0x12>
 8005868:	9901      	ldr	r1, [sp, #4]
 800586a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800586e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005872:	4259      	negs	r1, r3
 8005874:	4159      	adcs	r1, r3
 8005876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800587a:	e7eb      	b.n	8005854 <__swhatbuf_r+0x24>

0800587c <__smakebuf_r>:
 800587c:	898b      	ldrh	r3, [r1, #12]
 800587e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005880:	079d      	lsls	r5, r3, #30
 8005882:	4606      	mov	r6, r0
 8005884:	460c      	mov	r4, r1
 8005886:	d507      	bpl.n	8005898 <__smakebuf_r+0x1c>
 8005888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	2301      	movs	r3, #1
 8005892:	6163      	str	r3, [r4, #20]
 8005894:	b003      	add	sp, #12
 8005896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005898:	ab01      	add	r3, sp, #4
 800589a:	466a      	mov	r2, sp
 800589c:	f7ff ffc8 	bl	8005830 <__swhatbuf_r>
 80058a0:	9f00      	ldr	r7, [sp, #0]
 80058a2:	4605      	mov	r5, r0
 80058a4:	4639      	mov	r1, r7
 80058a6:	4630      	mov	r0, r6
 80058a8:	f7ff f920 	bl	8004aec <_malloc_r>
 80058ac:	b948      	cbnz	r0, 80058c2 <__smakebuf_r+0x46>
 80058ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b2:	059a      	lsls	r2, r3, #22
 80058b4:	d4ee      	bmi.n	8005894 <__smakebuf_r+0x18>
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	f043 0302 	orr.w	r3, r3, #2
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	e7e2      	b.n	8005888 <__smakebuf_r+0xc>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	6020      	str	r0, [r4, #0]
 80058c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	9b01      	ldr	r3, [sp, #4]
 80058ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058d2:	b15b      	cbz	r3, 80058ec <__smakebuf_r+0x70>
 80058d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d8:	4630      	mov	r0, r6
 80058da:	f000 f82d 	bl	8005938 <_isatty_r>
 80058de:	b128      	cbz	r0, 80058ec <__smakebuf_r+0x70>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	431d      	orrs	r5, r3
 80058f0:	81a5      	strh	r5, [r4, #12]
 80058f2:	e7cf      	b.n	8005894 <__smakebuf_r+0x18>

080058f4 <_close_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d06      	ldr	r5, [pc, #24]	@ (8005910 <_close_r+0x1c>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fb fb67 	bl	8000fd2 <_close>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_close_r+0x1a>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_close_r+0x1a>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	200002f8 	.word	0x200002f8

08005914 <_fstat_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4d07      	ldr	r5, [pc, #28]	@ (8005934 <_fstat_r+0x20>)
 8005918:	2300      	movs	r3, #0
 800591a:	4604      	mov	r4, r0
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	602b      	str	r3, [r5, #0]
 8005922:	f7fb fb62 	bl	8000fea <_fstat>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	d102      	bne.n	8005930 <_fstat_r+0x1c>
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	b103      	cbz	r3, 8005930 <_fstat_r+0x1c>
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	bd38      	pop	{r3, r4, r5, pc}
 8005932:	bf00      	nop
 8005934:	200002f8 	.word	0x200002f8

08005938 <_isatty_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4d06      	ldr	r5, [pc, #24]	@ (8005954 <_isatty_r+0x1c>)
 800593c:	2300      	movs	r3, #0
 800593e:	4604      	mov	r4, r0
 8005940:	4608      	mov	r0, r1
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	f7fb fb61 	bl	800100a <_isatty>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_isatty_r+0x1a>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_isatty_r+0x1a>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	200002f8 	.word	0x200002f8

08005958 <_lseek_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d07      	ldr	r5, [pc, #28]	@ (8005978 <_lseek_r+0x20>)
 800595c:	4604      	mov	r4, r0
 800595e:	4608      	mov	r0, r1
 8005960:	4611      	mov	r1, r2
 8005962:	2200      	movs	r2, #0
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fb fb5a 	bl	8001020 <_lseek>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_lseek_r+0x1e>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_lseek_r+0x1e>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	200002f8 	.word	0x200002f8

0800597c <_read_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d07      	ldr	r5, [pc, #28]	@ (800599c <_read_r+0x20>)
 8005980:	4604      	mov	r4, r0
 8005982:	4608      	mov	r0, r1
 8005984:	4611      	mov	r1, r2
 8005986:	2200      	movs	r2, #0
 8005988:	602a      	str	r2, [r5, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	f7fb fae8 	bl	8000f60 <_read>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_read_r+0x1e>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_read_r+0x1e>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	200002f8 	.word	0x200002f8

080059a0 <_write_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d07      	ldr	r5, [pc, #28]	@ (80059c0 <_write_r+0x20>)
 80059a4:	4604      	mov	r4, r0
 80059a6:	4608      	mov	r0, r1
 80059a8:	4611      	mov	r1, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	602a      	str	r2, [r5, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f7fb faf3 	bl	8000f9a <_write>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_write_r+0x1e>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_write_r+0x1e>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	200002f8 	.word	0x200002f8

080059c4 <_init>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr

080059d0 <_fini>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr
