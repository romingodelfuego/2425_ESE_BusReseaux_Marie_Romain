
Tp_capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006218  08006218  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006218  08006218  00007218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006220  08006220  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006220  08006220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006224  08006224  00007224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08006228  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000088  080062b0  00008088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080062b0  00008380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff13  00000000  00000000  000080b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd2  00000000  00000000  00017fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a33  00000000  00000000  0001b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d79  00000000  00000000  0001c41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001317c  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa4a  00000000  00000000  00033310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102d5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  00102da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00106d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ed0 	.word	0x08005ed0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08005ed0 	.word	0x08005ed0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BMP280_check>:
uint8_t BMP280_TRIM_REG_MSB = 0x88;		// registre d'etalonnage
uint8_t BMP280_TRIM_LEN = 12 * 2;



int BMP280_check() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	 * c'est à dire qu'elle vaut bien BMP280_ID_VAL
	 * */

	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005a6:	4b21      	ldr	r3, [pc, #132]	@ (800062c <BMP280_check+0x8c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	713b      	strb	r3, [r7, #4]
	printf("\r\nChecking for BMP280...\r\n");
 80005ac:	4820      	ldr	r0, [pc, #128]	@ (8000630 <BMP280_check+0x90>)
 80005ae:	f004 fd4b 	bl	8005048 <puts>

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <BMP280_check+0x94>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4619      	mov	r1, r3
 80005b8:	1d3a      	adds	r2, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	481d      	ldr	r0, [pc, #116]	@ (8000638 <BMP280_check+0x98>)
 80005c4:	f001 fee0 	bl	8002388 <HAL_I2C_Master_Transmit>
 80005c8:	4603      	mov	r3, r0
 80005ca:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <BMP280_check+0x38>
		printf("Problem with check (I2C Transmit)\r\n");
 80005d2:	481a      	ldr	r0, [pc, #104]	@ (800063c <BMP280_check+0x9c>)
 80005d4:	f004 fd38 	bl	8005048 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1,
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <BMP280_check+0x94>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	1d3a      	adds	r2, r7, #4
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <BMP280_check+0x98>)
 80005ea:	f001 ffcb 	bl	8002584 <HAL_I2C_Master_Receive>
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <BMP280_check+0x5e>
		printf("Problem with check (I2C Receive) \r\n");
 80005f8:	4811      	ldr	r0, [pc, #68]	@ (8000640 <BMP280_check+0xa0>)
 80005fa:	f004 fd25 	bl	8005048 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80005fe:	793b      	ldrb	r3, [r7, #4]
 8000600:	4619      	mov	r1, r3
 8000602:	4810      	ldr	r0, [pc, #64]	@ (8000644 <BMP280_check+0xa4>)
 8000604:	f004 fcb8 	bl	8004f78 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000608:	793a      	ldrb	r2, [r7, #4]
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <BMP280_check+0xa8>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	d104      	bne.n	800061c <BMP280_check+0x7c>
		printf("Ok\r\n");
 8000612:	480e      	ldr	r0, [pc, #56]	@ (800064c <BMP280_check+0xac>)
 8000614:	f004 fd18 	bl	8005048 <puts>
		return 0;
 8000618:	2300      	movs	r3, #0
 800061a:	e003      	b.n	8000624 <BMP280_check+0x84>
	} else {
		printf("not Ok!\r\n");
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <BMP280_check+0xb0>)
 800061e:	f004 fd13 	bl	8005048 <puts>
		return 1;
 8000622:	2301      	movs	r3, #1
	}
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000001 	.word	0x20000001
 8000630:	08005ee8 	.word	0x08005ee8
 8000634:	20000000 	.word	0x20000000
 8000638:	200000e0 	.word	0x200000e0
 800063c:	08005f04 	.word	0x08005f04
 8000640:	08005f28 	.word	0x08005f28
 8000644:	08005f4c 	.word	0x08005f4c
 8000648:	20000002 	.word	0x20000002
 800064c:	08005f58 	.word	0x08005f58
 8000650:	08005f5c 	.word	0x08005f5c

08000654 <get_coef_temperature>:


TEMP_COEFF get_coef_temperature(){
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af02      	add	r7, sp, #8
 800065a:	6078      	str	r0, [r7, #4]
	 * La température est stocké sur 3 adresses de 16 bits
	 * Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
	 * */

	uint8_t coeff_TEMP[6];
	uint8_t reg_trimming_TEMP=0x88;
 800065c:	2388      	movs	r3, #136	@ 0x88
 800065e:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_TEMP, 1,1000);
 8000660:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <get_coef_temperature+0x64>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f107 0217 	add.w	r2, r7, #23
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	4812      	ldr	r0, [pc, #72]	@ (80006bc <get_coef_temperature+0x68>)
 8000674:	f001 fe88 	bl	8002388 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(BMP280_ADDR), coeff_TEMP, 6, 1000);
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <get_coef_temperature+0x64>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	f107 0218 	add.w	r2, r7, #24
 8000682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2306      	movs	r3, #6
 800068a:	480c      	ldr	r0, [pc, #48]	@ (80006bc <get_coef_temperature+0x68>)
 800068c:	f001 ff7a 	bl	8002584 <HAL_I2C_Master_Receive>

	TEMP_COEFF temp_coeff=(TEMP_COEFF){
	.dig_T1 = coeff_TEMP[0],
 8000690:	7e3b      	ldrb	r3, [r7, #24]
	TEMP_COEFF temp_coeff=(TEMP_COEFF){
 8000692:	823b      	strh	r3, [r7, #16]
	.dig_T2 = coeff_TEMP[1],
 8000694:	7e7b      	ldrb	r3, [r7, #25]
 8000696:	b21b      	sxth	r3, r3
	TEMP_COEFF temp_coeff=(TEMP_COEFF){
 8000698:	827b      	strh	r3, [r7, #18]
	.dig_T3 = coeff_TEMP[3]
 800069a:	7efb      	ldrb	r3, [r7, #27]
 800069c:	b21b      	sxth	r3, r3
	TEMP_COEFF temp_coeff=(TEMP_COEFF){
 800069e:	82bb      	strh	r3, [r7, #20]
	};
	return temp_coeff;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	461a      	mov	r2, r3
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	6010      	str	r0, [r2, #0]
 80006ac:	889b      	ldrh	r3, [r3, #4]
 80006ae:	8093      	strh	r3, [r2, #4]
}
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	200000e0 	.word	0x200000e0

080006c0 <get_coef_pressure>:

PRES_COEFF get_coef_pressure(){
 80006c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006c4:	b08e      	sub	sp, #56	@ 0x38
 80006c6:	af02      	add	r7, sp, #8
 80006c8:	6078      	str	r0, [r7, #4]
	 * La température est stocké sur 9 adresses de 16 bits
	 * Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
	 * */

	uint8_t coeff_PRESS[18];
	uint8_t reg_trimming_PRESS=0x8E;
 80006ca:	238e      	movs	r3, #142	@ 0x8e
 80006cc:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit( &hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_PRESS, 1,1000);
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <get_coef_pressure+0xbc>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4619      	mov	r1, r3
 80006d4:	f107 021b 	add.w	r2, r7, #27
 80006d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	4827      	ldr	r0, [pc, #156]	@ (8000780 <get_coef_pressure+0xc0>)
 80006e2:	f001 fe51 	bl	8002388 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1,(uint16_t)(BMP280_ADDR), coeff_PRESS, 18, 1000);
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <get_coef_pressure+0xbc>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	f107 021c 	add.w	r2, r7, #28
 80006f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2312      	movs	r3, #18
 80006f8:	4821      	ldr	r0, [pc, #132]	@ (8000780 <get_coef_pressure+0xc0>)
 80006fa:	f001 ff43 	bl	8002584 <HAL_I2C_Master_Receive>

	pres_coeff=(PRES_COEFF){
	.dig_P1 =coeff_PRESS[0],
 80006fe:	7f3b      	ldrb	r3, [r7, #28]
 8000700:	4698      	mov	r8, r3
	.dig_P2 =coeff_PRESS[1],
 8000702:	7f7b      	ldrb	r3, [r7, #29]
 8000704:	fa0f fe83 	sxth.w	lr, r3
	.dig_P3 =coeff_PRESS[2],
 8000708:	7fbb      	ldrb	r3, [r7, #30]
 800070a:	fa0f fc83 	sxth.w	ip, r3
	.dig_P4 =coeff_PRESS[3],
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	b21e      	sxth	r6, r3
	.dig_P5 =coeff_PRESS[4],
 8000712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000716:	b21d      	sxth	r5, r3
	.dig_P6 =coeff_PRESS[5],
 8000718:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800071c:	b21c      	sxth	r4, r3
	.dig_P7 =coeff_PRESS[6],
 800071e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000722:	b218      	sxth	r0, r3
	.dig_P8 =coeff_PRESS[7],
 8000724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000728:	b219      	sxth	r1, r3
	.dig_P9 =coeff_PRESS[8],
 800072a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800072e:	b21a      	sxth	r2, r3
	pres_coeff=(PRES_COEFF){
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <get_coef_pressure+0xc4>)
 8000732:	f8a3 8000 	strh.w	r8, [r3]
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <get_coef_pressure+0xc4>)
 8000738:	f8a3 e002 	strh.w	lr, [r3, #2]
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <get_coef_pressure+0xc4>)
 800073e:	f8a3 c004 	strh.w	ip, [r3, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <get_coef_pressure+0xc4>)
 8000744:	80de      	strh	r6, [r3, #6]
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <get_coef_pressure+0xc4>)
 8000748:	811d      	strh	r5, [r3, #8]
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_coef_pressure+0xc4>)
 800074c:	815c      	strh	r4, [r3, #10]
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <get_coef_pressure+0xc4>)
 8000750:	8198      	strh	r0, [r3, #12]
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <get_coef_pressure+0xc4>)
 8000754:	81d9      	strh	r1, [r3, #14]
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <get_coef_pressure+0xc4>)
 8000758:	821a      	strh	r2, [r3, #16]
	};
	return pres_coeff;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <get_coef_pressure+0xc4>)
 800075e:	461d      	mov	r5, r3
 8000760:	4614      	mov	r4, r2
 8000762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000764:	6028      	str	r0, [r5, #0]
 8000766:	6069      	str	r1, [r5, #4]
 8000768:	60aa      	str	r2, [r5, #8]
 800076a:	60eb      	str	r3, [r5, #12]
 800076c:	8823      	ldrh	r3, [r4, #0]
 800076e:	822b      	strh	r3, [r5, #16]
}
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	3730      	adds	r7, #48	@ 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000
 8000780:	200000e0 	.word	0x200000e0
 8000784:	200000a4 	.word	0x200000a4

08000788 <BMP280_init>:


int BMP280_init() {
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
	 * mode normal --> 11
	 * on écrit 10101011 = 0x54 en héxadécimal dans le registre de controle (BMP280_CTRL_MEAS_REG)
	 * */

	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 800078e:	2357      	movs	r3, #87	@ 0x57
 8000790:	77fb      	strb	r3, [r7, #31]

	printf("\r\nConfigure BMP280...\r\n");
 8000792:	4812      	ldr	r0, [pc, #72]	@ (80007dc <BMP280_init+0x54>)
 8000794:	f004 fc58 	bl	8005048 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <BMP280_init+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	7ffa      	ldrb	r2, [r7, #31]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f823 	bl	80007ec <BMP280_Write_Reg>
 80007a6:	4603      	mov	r3, r0
 80007a8:	77bb      	strb	r3, [r7, #30]
	if (ret == 0) {
 80007aa:	7fbb      	ldrb	r3, [r7, #30]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10c      	bne.n	80007ca <BMP280_init+0x42>
		printf("Config Ok\r\n");
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <BMP280_init+0x5c>)
 80007b2:	f004 fc49 	bl	8005048 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	get_coef_pressure();
 80007b6:	463b      	mov	r3, r7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff81 	bl	80006c0 <get_coef_pressure>
	get_coef_temperature();
 80007be:	463b      	mov	r3, r7
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff47 	bl	8000654 <get_coef_temperature>
	return 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e003      	b.n	80007d2 <BMP280_init+0x4a>
		printf("Config not Ok!\r\n");
 80007ca:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <BMP280_init+0x60>)
 80007cc:	f004 fc3c 	bl	8005048 <puts>
		return 1;
 80007d0:	2301      	movs	r3, #1
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	08005f68 	.word	0x08005f68
 80007e0:	20000003 	.word	0x20000003
 80007e4:	08005f80 	.word	0x08005f80
 80007e8:	08005f8c 	.word	0x08005f8c

080007ec <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
	 * */

	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000804:	4b19      	ldr	r3, [pc, #100]	@ (800086c <BMP280_Write_Reg+0x80>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f107 020c 	add.w	r2, r7, #12
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	4816      	ldr	r0, [pc, #88]	@ (8000870 <BMP280_Write_Reg+0x84>)
 8000818:	f001 fdb6 	bl	8002388 <HAL_I2C_Master_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <BMP280_Write_Reg+0x40>
		printf("xErreur with I2C Transmit\r\n");
 8000826:	4813      	ldr	r0, [pc, #76]	@ (8000874 <BMP280_Write_Reg+0x88>)
 8000828:	f004 fc0e 	bl	8005048 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <BMP280_Write_Reg+0x80>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f107 020c 	add.w	r2, r7, #12
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	480c      	ldr	r0, [pc, #48]	@ (8000870 <BMP280_Write_Reg+0x84>)
 8000840:	f001 fea0 	bl	8002584 <HAL_I2C_Master_Receive>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <BMP280_Write_Reg+0x68>
		printf("xErreur with I2C Receive\r\n");
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <BMP280_Write_Reg+0x8c>)
 8000850:	f004 fbfa 	bl	8005048 <puts>
	}

	if (buf[0] == value) {
 8000854:	7b3b      	ldrb	r3, [r7, #12]
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	429a      	cmp	r2, r3
 800085a:	d101      	bne.n	8000860 <BMP280_Write_Reg+0x74>
		return 0;
 800085c:	2300      	movs	r3, #0
 800085e:	e000      	b.n	8000862 <BMP280_Write_Reg+0x76>
	} else {
		return 1;
 8000860:	2301      	movs	r3, #1
	}
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	200000e0 	.word	0x200000e0
 8000874:	08005f9c 	.word	0x08005f9c
 8000878:	08005fb8 	.word	0x08005fb8

0800087c <BMP280_Read_Reg>:

void BMP280_Read_Reg(uint8_t *buf, uint8_t reg, uint8_t length) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af02      	add	r7, sp, #8
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
 8000888:	4613      	mov	r3, r2
 800088a:	70bb      	strb	r3, [r7, #2]
	 * Fonction pour lire dans un registre en I2C
	 * */

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <BMP280_Read_Reg+0x68>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	1cfa      	adds	r2, r7, #3
 8000894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <BMP280_Read_Reg+0x6c>)
 800089e:	f001 fd73 	bl	8002388 <HAL_I2C_Master_Transmit>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <BMP280_Read_Reg+0x36>
		printf("xErreur with I2C Transmit\r\n");
 80008ac:	480f      	ldr	r0, [pc, #60]	@ (80008ec <BMP280_Read_Reg+0x70>)
 80008ae:	f004 fbcb 	bl	8005048 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <BMP280_Read_Reg+0x68>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4619      	mov	r1, r3
 80008b8:	78bb      	ldrb	r3, [r7, #2]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <BMP280_Read_Reg+0x6c>)
 80008c6:	f001 fe5d 	bl	8002584 <HAL_I2C_Master_Receive>
 80008ca:	4603      	mov	r3, r0
 80008cc:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <BMP280_Read_Reg+0x5e>
		printf("xErreur with I2C Receive\r\n");
 80008d4:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <BMP280_Read_Reg+0x74>)
 80008d6:	f004 fbb7 	bl	8005048 <puts>
	}
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000000 	.word	0x20000000
 80008e8:	200000e0 	.word	0x200000e0
 80008ec:	08005f9c 	.word	0x08005f9c
 80008f0:	08005fb8 	.word	0x08005fb8

080008f4 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 80008f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	466b      	mov	r3, sp
 80008fe:	4698      	mov	r8, r3

	/*
	 * Fonction pour obtenir la température en fonction des registres d'étalonnages BMP280_PRES_REG_MSB
	 * */

	uint8_t buf[BMP280_TEMP_LEN];
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <BMP280_get_temperature+0x98>)
 8000902:	781e      	ldrb	r6, [r3, #0]
 8000904:	4633      	mov	r3, r6
 8000906:	3b01      	subs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	b2f3      	uxtb	r3, r6
 800090c:	2200      	movs	r2, #0
 800090e:	461c      	mov	r4, r3
 8000910:	4615      	mov	r5, r2
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	00eb      	lsls	r3, r5, #3
 800091c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000920:	00e2      	lsls	r2, r4, #3
 8000922:	b2f3      	uxtb	r3, r6
 8000924:	2200      	movs	r2, #0
 8000926:	4618      	mov	r0, r3
 8000928:	4611      	mov	r1, r2
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	f04f 0300 	mov.w	r3, #0
 8000932:	00cb      	lsls	r3, r1, #3
 8000934:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000938:	00c2      	lsls	r2, r0, #3
 800093a:	4633      	mov	r3, r6
 800093c:	3307      	adds	r3, #7
 800093e:	08db      	lsrs	r3, r3, #3
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	ebad 0d03 	sub.w	sp, sp, r3
 8000946:	466b      	mov	r3, sp
 8000948:	3300      	adds	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
;
	BMP280_S32_t adc_T;

	BMP280_Read_Reg(buf,BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 800094c:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <BMP280_get_temperature+0x9c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <BMP280_get_temperature+0x98>)
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	68b8      	ldr	r0, [r7, #8]
 8000958:	f7ff ff90 	bl	800087c <BMP280_Read_Reg>

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	031a      	lsls	r2, r3, #12
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	7892      	ldrb	r2, [r2, #2]
 800096e:	0912      	lsrs	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000972:	4313      	orrs	r3, r2
 8000974:	607b      	str	r3, [r7, #4]

	printf("Temperature: %lu\r\n", adc_T);
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <BMP280_get_temperature+0xa0>)
 800097a:	f004 fafd 	bl	8004f78 <iprintf>
	return adc_T;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	46c5      	mov	sp, r8
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800098c:	20000007 	.word	0x20000007
 8000990:	20000006 	.word	0x20000006
 8000994:	08005fd4 	.word	0x08005fd4

08000998 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8000998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	466b      	mov	r3, sp
 80009a2:	4698      	mov	r8, r3

	/*
	 * Fonction pour obtenir la pression en fonction des registres d'étalonnages BMP280_PRES_REG_MSB
	 * */

	uint8_t buf[BMP280_PRES_LEN];
 80009a4:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <BMP280_get_pressure+0x98>)
 80009a6:	781e      	ldrb	r6, [r3, #0]
 80009a8:	4633      	mov	r3, r6
 80009aa:	3b01      	subs	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	b2f3      	uxtb	r3, r6
 80009b0:	2200      	movs	r2, #0
 80009b2:	461c      	mov	r4, r3
 80009b4:	4615      	mov	r5, r2
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	f04f 0300 	mov.w	r3, #0
 80009be:	00eb      	lsls	r3, r5, #3
 80009c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009c4:	00e2      	lsls	r2, r4, #3
 80009c6:	b2f3      	uxtb	r3, r6
 80009c8:	2200      	movs	r2, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	4611      	mov	r1, r2
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	00cb      	lsls	r3, r1, #3
 80009d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009dc:	00c2      	lsls	r2, r0, #3
 80009de:	4633      	mov	r3, r6
 80009e0:	3307      	adds	r3, #7
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	ebad 0d03 	sub.w	sp, sp, r3
 80009ea:	466b      	mov	r3, sp
 80009ec:	3300      	adds	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]

	BMP280_S32_t adc_P;

	BMP280_Read_Reg(buf, BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 80009f0:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <BMP280_get_pressure+0x9c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <BMP280_get_pressure+0x98>)
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	68b8      	ldr	r0, [r7, #8]
 80009fc:	f7ff ff3e 	bl	800087c <BMP280_Read_Reg>

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	031a      	lsls	r2, r3, #12
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	7892      	ldrb	r2, [r2, #2]
 8000a12:	0912      	lsrs	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000a16:	4313      	orrs	r3, r2
 8000a18:	607b      	str	r3, [r7, #4]
	printf("Pressure: %lu\r\n", adc_P);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <BMP280_get_pressure+0xa0>)
 8000a1e:	f004 faab 	bl	8004f78 <iprintf>
	return adc_P;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	46c5      	mov	sp, r8
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a30:	20000005 	.word	0x20000005
 8000a34:	20000004 	.word	0x20000004
 8000a38:	08005fe8 	.word	0x08005fe8

08000a3c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a42:	4a19      	ldr	r2, [pc, #100]	@ (8000aa8 <MX_CAN1_Init+0x6c>)
 8000a44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a48:	2206      	movs	r2, #6
 8000a4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a54:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8000a58:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a5c:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000a60:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a68:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_CAN1_Init+0x68>)
 8000a90:	f000 fdd4 	bl	800163c <HAL_CAN_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a9a:	f000 fa0d 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000b8 	.word	0x200000b8
 8000aa8:	40006400 	.word	0x40006400

08000aac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a22      	ldr	r2, [pc, #136]	@ (8000b54 <HAL_CAN_MspInit+0xa8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d13d      	bne.n	8000b4a <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <HAL_CAN_MspInit+0xac>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <HAL_CAN_MspInit+0xac>)
 8000ad8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <HAL_CAN_MspInit+0xac>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <HAL_CAN_MspInit+0xac>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_CAN_MspInit+0xac>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_CAN_MspInit+0xac>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b18:	2309      	movs	r3, #9
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <HAL_CAN_MspInit+0xb0>)
 8000b24:	f001 f93e 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b3a:	2309      	movs	r3, #9
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <HAL_CAN_MspInit+0xb0>)
 8000b46:	f001 f92d 	bl	8001da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40006400 	.word	0x40006400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a25      	ldr	r2, [pc, #148]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <MX_GPIO_Init+0xd4>)
 8000bec:	f001 fa6e 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <MX_GPIO_Init+0xd8>)
 8000c08:	f001 f8cc 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_GPIO_Init+0xd4>)
 8000c24:	f001 f8be 	bl	8001da4 <HAL_GPIO_Init>

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	@ 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020800 	.word	0x40020800

08000c3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c42:	4a13      	ldr	r2, [pc, #76]	@ (8000c90 <MX_I2C1_Init+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c48:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_I2C1_Init+0x58>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c7a:	f001 fa41 	bl	8002100 <HAL_I2C_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 f918 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000e0 	.word	0x200000e0
 8000c90:	40005400 	.word	0x40005400
 8000c94:	000186a0 	.word	0x000186a0

08000c98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	@ (8000d1c <HAL_I2C_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd6:	23c0      	movs	r3, #192	@ 0xc0
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cda:	2312      	movs	r3, #18
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <HAL_I2C_MspInit+0x8c>)
 8000cf2:	f001 f857 	bl	8001da4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a08      	ldr	r2, [pc, #32]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000d00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_I2C_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	@ 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020400 	.word	0x40020400

08000d28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d2e:	f000 fbef 	bl	8001510 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d32:	f000 f853 	bl	8000ddc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d36:	f7ff ff13 	bl	8000b60 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d3a:	f000 fb11 	bl	8001360 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000d3e:	f000 fae5 	bl	800130c <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8000d42:	f7ff fe7b 	bl	8000a3c <MX_CAN1_Init>
	MX_I2C1_Init();
 8000d46:	f7ff ff79 	bl	8000c3c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
#ifdef CAN
	printf("START\r\n");
 8000d4a:	481e      	ldr	r0, [pc, #120]	@ (8000dc4 <main+0x9c>)
 8000d4c:	f004 f97c 	bl	8005048 <puts>
	if(HAL_CAN_Start(&hcan1)==HAL_ERROR){printf("Erreur initialisation\r\n");}
 8000d50:	481d      	ldr	r0, [pc, #116]	@ (8000dc8 <main+0xa0>)
 8000d52:	f000 fd6e 	bl	8001832 <HAL_CAN_Start>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d102      	bne.n	8000d62 <main+0x3a>
 8000d5c:	481b      	ldr	r0, [pc, #108]	@ (8000dcc <main+0xa4>)
 8000d5e:	f004 f973 	bl	8005048 <puts>


#endif
#ifdef BMP280
	printf("------BMP280------\r\n");
 8000d62:	481b      	ldr	r0, [pc, #108]	@ (8000dd0 <main+0xa8>)
 8000d64:	f004 f970 	bl	8005048 <puts>
	BMP280_check();
 8000d68:	f7ff fc1a 	bl	80005a0 <BMP280_check>
	BMP280_init();
 8000d6c:	f7ff fd0c 	bl	8000788 <BMP280_init>
	uint32_t temp_ref =  BMP280_get_temperature();
 8000d70:	f7ff fdc0 	bl	80008f4 <BMP280_get_temperature>
 8000d74:	4603      	mov	r3, r0
 8000d76:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
#ifdef MOTOR
		uint32_t temp =  BMP280_get_temperature();
 8000d78:	f7ff fdbc 	bl	80008f4 <BMP280_get_temperature>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60bb      	str	r3, [r7, #8]
		uint8_t angle = (uint8_t)((temp_ref-temp)/2);
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]

		if (angle >180){
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d8e:	d904      	bls.n	8000d9a <main+0x72>
			motor_Angle(CLOCKWISE,90);
 8000d90:	215a      	movs	r1, #90	@ 0x5a
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f896 	bl	8000ec4 <motor_Angle>
 8000d98:	e003      	b.n	8000da2 <main+0x7a>
		}
		else{
			motor_Angle(ANTI_CLOCKWISE,90);
 8000d9a:	215a      	movs	r1, #90	@ 0x5a
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 f891 	bl	8000ec4 <motor_Angle>

		}
		printf("angle  : %u°\r\n", angle);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <main+0xac>)
 8000da8:	f004 f8e6 	bl	8004f78 <iprintf>
		printf("moteur actualisé\r\n");
 8000dac:	480a      	ldr	r0, [pc, #40]	@ (8000dd8 <main+0xb0>)
 8000dae:	f004 f94b 	bl	8005048 <puts>
		HAL_Delay(1000);
 8000db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db6:	f000 fc1d 	bl	80015f4 <HAL_Delay>
		temp_ref = temp;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	60fb      	str	r3, [r7, #12]
#endif
#ifdef SHELLV1
		shellv1();
#endif
#ifdef SHELLV2
		shellv2();
 8000dbe:	f000 f8a9 	bl	8000f14 <shellv2>
	{
 8000dc2:	e7d9      	b.n	8000d78 <main+0x50>
 8000dc4:	08005ff8 	.word	0x08005ff8
 8000dc8:	200000b8 	.word	0x200000b8
 8000dcc:	08006000 	.word	0x08006000
 8000dd0:	08006018 	.word	0x08006018
 8000dd4:	0800602c 	.word	0x0800602c
 8000dd8:	0800603c 	.word	0x0800603c

08000ddc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	@ 0x50
 8000de0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2234      	movs	r2, #52	@ 0x34
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f004 f990 	bl	8005110 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <SystemClock_Config+0xd4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	4a29      	ldr	r2, [pc, #164]	@ (8000eb0 <SystemClock_Config+0xd4>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <SystemClock_Config+0xd4>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <SystemClock_Config+0xd8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e28:	4a22      	ldr	r2, [pc, #136]	@ (8000eb4 <SystemClock_Config+0xd8>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <SystemClock_Config+0xd8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e44:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e50:	2308      	movs	r3, #8
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000e54:	23b4      	movs	r3, #180	@ 0xb4
 8000e56:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fc8d 	bl	8003788 <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000e74:	f000 f820 	bl	8000eb8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e88:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2102      	movs	r1, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 f92c 	bl	80030f4 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000ea2:	f000 f809 	bl	8000eb8 <Error_Handler>
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	3750      	adds	r7, #80	@ 0x50
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <Error_Handler+0x8>

08000ec4 <motor_Angle>:
#include "motor.h"


extern CAN_HandleTypeDef hcan1;

void motor_Angle(ANGLE_SENS sens,uint8_t angle){
 8000ec4:	b5b0      	push	{r4, r5, r7, lr}
 8000ec6:	b090      	sub	sp, #64	@ 0x40
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef pHeader =(CAN_TxHeaderTypeDef){
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <motor_Angle+0x48>)
 8000ed6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000eda:	461d      	mov	r5, r3
 8000edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ee4:	e884 0003 	stmia.w	r4, {r0, r1}
				.RTR = CAN_RTR_DATA,
				.DLC = 0x02,
				.TransmitGlobalTime = DISABLE
	};
	uint32_t pTxMailbox;
	uint8_t aData[2]={sens,angle};
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	723b      	strb	r3, [r7, #8]
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	727b      	strb	r3, [r7, #9]
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	f107 0208 	add.w	r2, r7, #8
 8000ef8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <motor_Angle+0x4c>)
 8000efe:	f000 fcdc 	bl	80018ba <HAL_CAN_AddTxMessage>
}
 8000f02:	bf00      	nop
 8000f04:	3740      	adds	r7, #64	@ 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08006050 	.word	0x08006050
 8000f10:	200000b8 	.word	0x200000b8

08000f14 <shellv2>:
		Rx_index = 0;
		memset(Rx_Buffer, 0, SIZE_BUFFER);
	}
}

void shellv2(){ //!\\ Pose probleme pour le set_k=1234
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
	//Recuperons le caractère
	uint8_t Rx_data;
	int isFind;
	HAL_UART_Receive(&huart1,  (uint8_t*)&Rx_data, 1, 1000);
 8000f1a:	1df9      	adds	r1, r7, #7
 8000f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f20:	2201      	movs	r2, #1
 8000f22:	4827      	ldr	r0, [pc, #156]	@ (8000fc0 <shellv2+0xac>)
 8000f24:	f002 ffa9 	bl	8003e7a <HAL_UART_Receive>
	Rx_Buffer[Rx_index++] = Rx_data;
 8000f28:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <shellv2+0xb0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	b2d1      	uxtb	r1, r2
 8000f30:	4a24      	ldr	r2, [pc, #144]	@ (8000fc4 <shellv2+0xb0>)
 8000f32:	7011      	strb	r1, [r2, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	79f9      	ldrb	r1, [r7, #7]
 8000f38:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <shellv2+0xb4>)
 8000f3a:	5499      	strb	r1, [r3, r2]

	// Interaction lors de la touche entrée
	if (Rx_data == '\r'){
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b0d      	cmp	r3, #13
 8000f40:	d129      	bne.n	8000f96 <shellv2+0x82>
		char * command = strtok(Rx_Buffer,"=");// Divise la chaîne à chaque égal, et altere la cahien d'origine
 8000f42:	4922      	ldr	r1, [pc, #136]	@ (8000fcc <shellv2+0xb8>)
 8000f44:	4820      	ldr	r0, [pc, #128]	@ (8000fc8 <shellv2+0xb4>)
 8000f46:	f004 f887 	bl	8005058 <strtok>
 8000f4a:	60f8      	str	r0, [r7, #12]
		char* value = strtok(NULL, " ");  // strtok(NULL) reprend là où la première division a été faite
 8000f4c:	4920      	ldr	r1, [pc, #128]	@ (8000fd0 <shellv2+0xbc>)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f004 f882 	bl	8005058 <strtok>
 8000f54:	60b8      	str	r0, [r7, #8]
		for (int i=0; i< sizeof(mapping);i++){
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	e019      	b.n	8000f90 <shellv2+0x7c>
			if (mapping[i].requete==command){
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <shellv2+0xc0>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d108      	bne.n	8000f7c <shellv2+0x68>
				mapping[i].funct(value);
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd4 <shellv2+0xc0>)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4413      	add	r3, r2
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	4798      	blx	r3
				isFind = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
			}
			if (!isFind) {printf("Unknown command : %s\r\n",Rx_Buffer);}
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <shellv2+0x76>
 8000f82:	4911      	ldr	r1, [pc, #68]	@ (8000fc8 <shellv2+0xb4>)
 8000f84:	4814      	ldr	r0, [pc, #80]	@ (8000fd8 <shellv2+0xc4>)
 8000f86:	f003 fff7 	bl	8004f78 <iprintf>
		for (int i=0; i< sizeof(mapping);i++){
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b17      	cmp	r3, #23
 8000f94:	d9e2      	bls.n	8000f5c <shellv2+0x48>
		}
	}
	//Interaction shell normal
	if (Rx_data == '\b'){Rx_Buffer[Rx_index--]='\0';}
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d109      	bne.n	8000fb0 <shellv2+0x9c>
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <shellv2+0xb0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	b2d1      	uxtb	r1, r2
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <shellv2+0xb0>)
 8000fa6:	7011      	strb	r1, [r2, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <shellv2+0xb4>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	5499      	strb	r1, [r3, r2]
	printf("%s",Rx_Buffer);
 8000fb0:	4905      	ldr	r1, [pc, #20]	@ (8000fc8 <shellv2+0xb4>)
 8000fb2:	480a      	ldr	r0, [pc, #40]	@ (8000fdc <shellv2+0xc8>)
 8000fb4:	f003 ffe0 	bl	8004f78 <iprintf>

}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200001a0 	.word	0x200001a0
 8000fc4:	20000134 	.word	0x20000134
 8000fc8:	20000138 	.word	0x20000138
 8000fcc:	080060c8 	.word	0x080060c8
 8000fd0:	080060cc 	.word	0x080060cc
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	080060d0 	.word	0x080060d0
 8000fdc:	080060e8 	.word	0x080060e8

08000fe0 <subfunct_GET_T>:
void subfunct_GET_T(char *value){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	int32_t temp;
	temp = BMP280_get_temperature();
 8000fe8:	f7ff fc84 	bl	80008f4 <BMP280_get_temperature>
 8000fec:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)temp, sizeof(temp), HAL_MAX_DELAY);
 8000fee:	68f9      	ldr	r1, [r7, #12]
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <subfunct_GET_T+0x2c>)
 8000ff8:	f002 feb4 	bl	8003d64 <HAL_UART_Transmit>
	printf("Temperature:%lu°C\r\n",temp);
 8000ffc:	68f9      	ldr	r1, [r7, #12]
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <subfunct_GET_T+0x30>)
 8001000:	f003 ffba 	bl	8004f78 <iprintf>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001a0 	.word	0x200001a0
 8001010:	080060ec 	.word	0x080060ec

08001014 <subfunct_GET_P>:
void subfunct_GET_P(char *value){
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	int32_t press;
	press = BMP280_get_pressure();
 800101c:	f7ff fcbc 	bl	8000998 <BMP280_get_pressure>
 8001020:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)press, sizeof(press), HAL_MAX_DELAY);
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001028:	2204      	movs	r2, #4
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <subfunct_GET_P+0x2c>)
 800102c:	f002 fe9a 	bl	8003d64 <HAL_UART_Transmit>
	printf("Pression:%lu\r\n",press);
 8001030:	68f9      	ldr	r1, [r7, #12]
 8001032:	4804      	ldr	r0, [pc, #16]	@ (8001044 <subfunct_GET_P+0x30>)
 8001034:	f003 ffa0 	bl	8004f78 <iprintf>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200001a0 	.word	0x200001a0
 8001044:	08006104 	.word	0x08006104

08001048 <subfunct_SET_K>:
void subfunct_SET_K(char *value){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	/*Fonction pour modifier le K :
	 * ici
	 */
	HAL_UART_Transmit(&huart1, (uint8_t*)&"SET_K=OK", 10, HAL_MAX_DELAY);
 8001050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001054:	220a      	movs	r2, #10
 8001056:	4905      	ldr	r1, [pc, #20]	@ (800106c <subfunct_SET_K+0x24>)
 8001058:	4805      	ldr	r0, [pc, #20]	@ (8001070 <subfunct_SET_K+0x28>)
 800105a:	f002 fe83 	bl	8003d64 <HAL_UART_Transmit>
	printf("SET_K=OK");
 800105e:	4803      	ldr	r0, [pc, #12]	@ (800106c <subfunct_SET_K+0x24>)
 8001060:	f003 ff8a 	bl	8004f78 <iprintf>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	08006114 	.word	0x08006114
 8001070:	200001a0 	.word	0x200001a0

08001074 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	@ (8001094 <__io_putchar+0x20>)
 8001086:	f002 fe6d 	bl	8003d64 <HAL_UART_Transmit>

  return ch;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001e8 	.word	0x200001e8

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a0f      	ldr	r2, [pc, #60]	@ (80010e4 <HAL_MspInit+0x4c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_MspInit+0x4c>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_MspInit+0x4c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d6:	2007      	movs	r0, #7
 80010d8:	f000 fd90 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 fa39 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <USART1_IRQHandler+0x10>)
 800114e:	f002 ff2b 	bl	8003fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001a0 	.word	0x200001a0

0800115c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_kill>:

int _kill(int pid, int sig)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001176:	f003 ffd3 	bl	8005120 <__errno>
 800117a:	4603      	mov	r3, r0
 800117c:	2216      	movs	r2, #22
 800117e:	601a      	str	r2, [r3, #0]
  return -1;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_exit>:

void _exit (int status)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffe7 	bl	800116c <_kill>
  while (1) {}    /* Make sure we hang here */
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <_exit+0x12>

080011a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	e00a      	b.n	80011ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b4:	f3af 8000 	nop.w
 80011b8:	4601      	mov	r1, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	60ba      	str	r2, [r7, #8]
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dbf0      	blt.n	80011b4 <_read+0x12>
  }

  return len;
 80011d2:	687b      	ldr	r3, [r7, #4]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e009      	b.n	8001202 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	60ba      	str	r2, [r7, #8]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff3c 	bl	8001074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbf1      	blt.n	80011ee <_write+0x12>
  }
  return len;
 800120a:	687b      	ldr	r3, [r7, #4]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_close>:

int _close(int file)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800123c:	605a      	str	r2, [r3, #4]
  return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_isatty>:

int _isatty(int file)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f003 ff38 	bl	8005120 <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20020000 	.word	0x20020000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	2000019c 	.word	0x2000019c
 80012e4:	20000380 	.word	0x20000380

080012e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <MX_USART1_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART1_UART_Init+0x4c>)
 8001344:	f002 fcbe 	bl	8003cc4 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f7ff fdb3 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001a0 	.word	0x200001a0
 800135c:	40011000 	.word	0x40011000

08001360 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <MX_USART2_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_USART2_UART_Init+0x4c>)
 8001398:	f002 fc94 	bl	8003cc4 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f7ff fd89 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001e8 	.word	0x200001e8
 80013b0:	40004400 	.word	0x40004400

080013b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a36      	ldr	r2, [pc, #216]	@ (80014ac <HAL_UART_MspInit+0xf8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d135      	bne.n	8001442 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a34      	ldr	r2, [pc, #208]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a2d      	ldr	r2, [pc, #180]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800140e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001420:	2307      	movs	r3, #7
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4822      	ldr	r0, [pc, #136]	@ (80014b4 <HAL_UART_MspInit+0x100>)
 800142c:	f000 fcba 	bl	8001da4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2025      	movs	r0, #37	@ 0x25
 8001436:	f000 fbec 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800143a:	2025      	movs	r0, #37	@ 0x25
 800143c:	f000 fc05 	bl	8001c4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001440:	e030      	b.n	80014a4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <HAL_UART_MspInit+0x104>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d12b      	bne.n	80014a4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	6413      	str	r3, [r2, #64]	@ 0x40
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6313      	str	r3, [r2, #48]	@ 0x30
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_UART_MspInit+0xfc>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001484:	230c      	movs	r3, #12
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001494:	2307      	movs	r3, #7
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <HAL_UART_MspInit+0x100>)
 80014a0:	f000 fc80 	bl	8001da4 <HAL_GPIO_Init>
}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	@ 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40004400 	.word	0x40004400

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014c0:	f7ff ff12 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c6:	490d      	ldr	r1, [pc, #52]	@ (80014fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f003 fe1f 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff fc1b 	bl	8000d28 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001500:	08006228 	.word	0x08006228
  ldr r2, =_sbss
 8001504:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001508:	20000380 	.word	0x20000380

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 fb5f 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fda8 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fb77 	bl	8001c66 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001590:	f000 fb3f 	bl	8001c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	@ (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000020 	.word	0x20000020
 80015ac:	20000028 	.word	0x20000028
 80015b0:	20000024 	.word	0x20000024

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000028 	.word	0x20000028
 80015d8:	20000230 	.word	0x20000230

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000230 	.word	0x20000230

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000028 	.word	0x20000028

0800163c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0ed      	b.n	800182a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fa26 	bl	8000aac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001670:	f7ff ffb4 	bl	80015dc <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001676:	e012      	b.n	800169e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001678:	f7ff ffb0 	bl	80015dc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d90b      	bls.n	800169e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2205      	movs	r2, #5
 8001696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0c5      	b.n	800182a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0e5      	beq.n	8001678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0202 	bic.w	r2, r2, #2
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016bc:	f7ff ff8e 	bl	80015dc <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016c2:	e012      	b.n	80016ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c4:	f7ff ff8a 	bl	80015dc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b0a      	cmp	r3, #10
 80016d0:	d90b      	bls.n	80016ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2205      	movs	r2, #5
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e09f      	b.n	800182a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e5      	bne.n	80016c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7e5b      	ldrb	r3, [r3, #25]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e9b      	ldrb	r3, [r3, #26]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0220 	bic.w	r2, r2, #32
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7edb      	ldrb	r3, [r3, #27]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0210 	bic.w	r2, r2, #16
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0210 	orr.w	r2, r2, #16
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7f1b      	ldrb	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e007      	b.n	80017ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7f5b      	ldrb	r3, [r3, #29]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0204 	orr.w	r2, r2, #4
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	ea42 0103 	orr.w	r1, r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d12e      	bne.n	80018a4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0201 	bic.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800185e:	f7ff febd 	bl	80015dc <HAL_GetTick>
 8001862:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001864:	e012      	b.n	800188c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001866:	f7ff feb9 	bl	80015dc <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b0a      	cmp	r3, #10
 8001872:	d90b      	bls.n	800188c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2205      	movs	r2, #5
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e012      	b.n	80018b2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1e5      	bne.n	8001866 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e006      	b.n	80018b2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b089      	sub	sp, #36	@ 0x24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d8:	7ffb      	ldrb	r3, [r7, #31]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d003      	beq.n	80018e6 <HAL_CAN_AddTxMessage+0x2c>
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	f040 80ad 	bne.w	8001a40 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8095 	beq.w	8001a30 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	0e1b      	lsrs	r3, r3, #24
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001910:	2201      	movs	r2, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	409a      	lsls	r2, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	6809      	ldr	r1, [r1, #0]
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3318      	adds	r3, #24
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	440b      	add	r3, r1
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e00f      	b.n	800195e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001948:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001952:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3318      	adds	r3, #24
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	440b      	add	r3, r1
 800195c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3318      	adds	r3, #24
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	440b      	add	r3, r1
 800196e:	3304      	adds	r3, #4
 8001970:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	7d1b      	ldrb	r3, [r3, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d111      	bne.n	800199e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3318      	adds	r3, #24
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	6811      	ldr	r1, [r2, #0]
 800198e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3318      	adds	r3, #24
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	440b      	add	r3, r1
 800199a:	3304      	adds	r3, #4
 800199c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3307      	adds	r3, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	061a      	lsls	r2, r3, #24
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3306      	adds	r3, #6
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3305      	adds	r3, #5
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	4313      	orrs	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	3204      	adds	r2, #4
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	4610      	mov	r0, r2
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	6811      	ldr	r1, [r2, #0]
 80019c6:	ea43 0200 	orr.w	r2, r3, r0
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3303      	adds	r3, #3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	061a      	lsls	r2, r3, #24
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3302      	adds	r3, #2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4313      	orrs	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	4610      	mov	r0, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	6811      	ldr	r1, [r2, #0]
 80019fc:	ea43 0200 	orr.w	r2, r3, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	440b      	add	r3, r1
 8001a06:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001a0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3318      	adds	r3, #24
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3318      	adds	r3, #24
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	440b      	add	r3, r1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e00e      	b.n	8001a4e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e006      	b.n	8001a4e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
  }
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	@ (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	@ (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff29 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff3e 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff31 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa2 	bl	8001bb8 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff fca6 	bl	80015dc <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d008      	beq.n	8001cb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e052      	b.n	8001d56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0216 	bic.w	r2, r2, #22
 8001cbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d103      	bne.n	8001ce0 <HAL_DMA_Abort+0x62>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0208 	bic.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d00:	e013      	b.n	8001d2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d02:	f7ff fc6b 	bl	80015dc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d90c      	bls.n	8001d2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e015      	b.n	8001d56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e4      	bne.n	8001d02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3c:	223f      	movs	r2, #63	@ 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d004      	beq.n	8001d7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2280      	movs	r2, #128	@ 0x80
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e00c      	b.n	8001d96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e165      	b.n	800208c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8154 	bne.w	8002086 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d130      	bne.n	8001e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0201 	and.w	r2, r3, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80ae 	beq.w	8002086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a5c      	ldr	r2, [pc, #368]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f46:	4a58      	ldr	r2, [pc, #352]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4f      	ldr	r2, [pc, #316]	@ (80020ac <HAL_GPIO_Init+0x308>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d025      	beq.n	8001fbe <HAL_GPIO_Init+0x21a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4e      	ldr	r2, [pc, #312]	@ (80020b0 <HAL_GPIO_Init+0x30c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01f      	beq.n	8001fba <HAL_GPIO_Init+0x216>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80020b4 <HAL_GPIO_Init+0x310>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d019      	beq.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4c      	ldr	r2, [pc, #304]	@ (80020b8 <HAL_GPIO_Init+0x314>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0x20e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80020bc <HAL_GPIO_Init+0x318>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x20a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4a      	ldr	r2, [pc, #296]	@ (80020c0 <HAL_GPIO_Init+0x31c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x206>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a49      	ldr	r2, [pc, #292]	@ (80020c4 <HAL_GPIO_Init+0x320>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x202>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e00c      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	e00a      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4935      	ldr	r1, [pc, #212]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fde:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002002:	4a31      	ldr	r2, [pc, #196]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002008:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800202c:	4a26      	ldr	r2, [pc, #152]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002032:	4b25      	ldr	r3, [pc, #148]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002056:	4a1c      	ldr	r2, [pc, #112]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800205c:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002080:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <HAL_GPIO_Init+0x324>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	f67f ae96 	bls.w	8001dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40021400 	.word	0x40021400
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40013c00 	.word	0x40013c00

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	619a      	str	r2, [r3, #24]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e12b      	b.n	800236a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fdb6 	bl	8000c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2224      	movs	r2, #36	@ 0x24
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002164:	f001 f8b8 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8002168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4a81      	ldr	r2, [pc, #516]	@ (8002374 <HAL_I2C_Init+0x274>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d807      	bhi.n	8002184 <HAL_I2C_Init+0x84>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a80      	ldr	r2, [pc, #512]	@ (8002378 <HAL_I2C_Init+0x278>)
 8002178:	4293      	cmp	r3, r2
 800217a:	bf94      	ite	ls
 800217c:	2301      	movls	r3, #1
 800217e:	2300      	movhi	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e006      	b.n	8002192 <HAL_I2C_Init+0x92>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a7d      	ldr	r2, [pc, #500]	@ (800237c <HAL_I2C_Init+0x27c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	bf94      	ite	ls
 800218c:	2301      	movls	r3, #1
 800218e:	2300      	movhi	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0e7      	b.n	800236a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a78      	ldr	r2, [pc, #480]	@ (8002380 <HAL_I2C_Init+0x280>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0c9b      	lsrs	r3, r3, #18
 80021a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002374 <HAL_I2C_Init+0x274>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d802      	bhi.n	80021d4 <HAL_I2C_Init+0xd4>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3301      	adds	r3, #1
 80021d2:	e009      	b.n	80021e8 <HAL_I2C_Init+0xe8>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	4a69      	ldr	r2, [pc, #420]	@ (8002384 <HAL_I2C_Init+0x284>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	3301      	adds	r3, #1
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	495c      	ldr	r1, [pc, #368]	@ (8002374 <HAL_I2C_Init+0x274>)
 8002204:	428b      	cmp	r3, r1
 8002206:	d819      	bhi.n	800223c <HAL_I2C_Init+0x13c>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e59      	subs	r1, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fbb1 f3f3 	udiv	r3, r1, r3
 8002216:	1c59      	adds	r1, r3, #1
 8002218:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800221c:	400b      	ands	r3, r1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_I2C_Init+0x138>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e59      	subs	r1, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002236:	e051      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 8002238:	2304      	movs	r3, #4
 800223a:	e04f      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d111      	bne.n	8002268 <HAL_I2C_Init+0x168>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e58      	subs	r0, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e012      	b.n	800228e <HAL_I2C_Init+0x18e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e58      	subs	r0, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	0099      	lsls	r1, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x196>
 8002292:	2301      	movs	r3, #1
 8002294:	e022      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10e      	bne.n	80022bc <HAL_I2C_Init+0x1bc>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1e58      	subs	r0, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ba:	e00f      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e58      	subs	r0, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	0099      	lsls	r1, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	6809      	ldr	r1, [r1, #0]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800230a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6911      	ldr	r1, [r2, #16]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68d2      	ldr	r2, [r2, #12]
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	000186a0 	.word	0x000186a0
 8002378:	001e847f 	.word	0x001e847f
 800237c:	003d08ff 	.word	0x003d08ff
 8002380:	431bde83 	.word	0x431bde83
 8002384:	10624dd3 	.word	0x10624dd3

08002388 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	461a      	mov	r2, r3
 8002394:	460b      	mov	r3, r1
 8002396:	817b      	strh	r3, [r7, #10]
 8002398:	4613      	mov	r3, r2
 800239a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff f91e 	bl	80015dc <HAL_GetTick>
 80023a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	f040 80e0 	bne.w	8002570 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2319      	movs	r3, #25
 80023b6:	2201      	movs	r2, #1
 80023b8:	4970      	ldr	r1, [pc, #448]	@ (800257c <HAL_I2C_Master_Transmit+0x1f4>)
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fc64 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
 80023c8:	e0d3      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_I2C_Master_Transmit+0x50>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e0cc      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d007      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	@ 0x21
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2210      	movs	r2, #16
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	893a      	ldrh	r2, [r7, #8]
 800242e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4a50      	ldr	r2, [pc, #320]	@ (8002580 <HAL_I2C_Master_Transmit+0x1f8>)
 800243e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 face 	bl	80029e8 <I2C_MasterRequestWrite>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e08d      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800246c:	e066      	b.n	800253c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	6a39      	ldr	r1, [r7, #32]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fd22 	bl	8002ebc <I2C_WaitOnTXEFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	2b04      	cmp	r3, #4
 8002484:	d107      	bne.n	8002496 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d11b      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x188>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d017      	beq.n	8002510 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6a39      	ldr	r1, [r7, #32]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fd19 	bl	8002f4c <I2C_WaitOnBTFFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	2b04      	cmp	r3, #4
 8002526:	d107      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002536:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e01a      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d194      	bne.n	800246e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	00100002 	.word	0x00100002
 8002580:	ffff0000 	.word	0xffff0000

08002584 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	@ 0x30
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	461a      	mov	r2, r3
 8002590:	460b      	mov	r3, r1
 8002592:	817b      	strh	r3, [r7, #10]
 8002594:	4613      	mov	r3, r2
 8002596:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff f820 	bl	80015dc <HAL_GetTick>
 800259c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	f040 8217 	bne.w	80029da <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2319      	movs	r3, #25
 80025b2:	2201      	movs	r2, #1
 80025b4:	497c      	ldr	r1, [pc, #496]	@ (80027a8 <HAL_I2C_Master_Receive+0x224>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fb66 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
 80025c4:	e20a      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_I2C_Master_Receive+0x50>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e203      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d007      	beq.n	80025fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002608:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2222      	movs	r2, #34	@ 0x22
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2210      	movs	r2, #16
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	893a      	ldrh	r2, [r7, #8]
 800262a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a5c      	ldr	r2, [pc, #368]	@ (80027ac <HAL_I2C_Master_Receive+0x228>)
 800263a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800263c:	8979      	ldrh	r1, [r7, #10]
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fa52 	bl	8002aec <I2C_MasterRequestRead>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c4      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d113      	bne.n	8002682 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e198      	b.n	80029b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002686:	2b01      	cmp	r3, #1
 8002688:	d11b      	bne.n	80026c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002698:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e178      	b.n	80029b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d11b      	bne.n	8002702 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	e158      	b.n	80029b4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002710:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002728:	e144      	b.n	80029b4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	2b03      	cmp	r3, #3
 8002730:	f200 80f1 	bhi.w	8002916 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002738:	2b01      	cmp	r3, #1
 800273a:	d123      	bne.n	8002784 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fc4b 	bl	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e145      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002782:	e117      	b.n	80029b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002788:	2b02      	cmp	r3, #2
 800278a:	d14e      	bne.n	800282a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002792:	2200      	movs	r2, #0
 8002794:	4906      	ldr	r1, [pc, #24]	@ (80027b0 <HAL_I2C_Master_Receive+0x22c>)
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fa76 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e11a      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
 80027a6:	bf00      	nop
 80027a8:	00100002 	.word	0x00100002
 80027ac:	ffff0000 	.word	0xffff0000
 80027b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002828:	e0c4      	b.n	80029b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	2200      	movs	r2, #0
 8002832:	496c      	ldr	r1, [pc, #432]	@ (80029e4 <HAL_I2C_Master_Receive+0x460>)
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fa27 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0cb      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	2200      	movs	r2, #0
 800288e:	4955      	ldr	r1, [pc, #340]	@ (80029e4 <HAL_I2C_Master_Receive+0x460>)
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f9f9 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e09d      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002914:	e04e      	b.n	80029b4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002918:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fb5e 	bl	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e058      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b04      	cmp	r3, #4
 8002968:	d124      	bne.n	80029b4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002980:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f aeb6 	bne.w	800272a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3728      	adds	r7, #40	@ 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	00010004 	.word	0x00010004

080029e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	460b      	mov	r3, r1
 80029f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d006      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d003      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a10:	d108      	bne.n	8002a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e00b      	b.n	8002a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d107      	bne.n	8002a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f91d 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a62:	d103      	bne.n	8002a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e035      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	e01b      	b.n	8002ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a8c:	897b      	ldrh	r3, [r7, #10]
 8002a8e:	11db      	asrs	r3, r3, #7
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0306 	and.w	r3, r3, #6
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f063 030f 	orn	r3, r3, #15
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	490e      	ldr	r1, [pc, #56]	@ (8002ae4 <I2C_MasterRequestWrite+0xfc>)
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f966 	bl	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e010      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4907      	ldr	r1, [pc, #28]	@ (8002ae8 <I2C_MasterRequestWrite+0x100>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f956 	bl	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	00010008 	.word	0x00010008
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	460b      	mov	r3, r1
 8002afa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d006      	beq.n	8002b26 <I2C_MasterRequestRead+0x3a>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d003      	beq.n	8002b26 <I2C_MasterRequestRead+0x3a>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b24:	d108      	bne.n	8002b38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e00b      	b.n	8002b50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	2b11      	cmp	r3, #17
 8002b3e:	d107      	bne.n	8002b50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f893 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b76:	d103      	bne.n	8002b80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e079      	b.n	8002c78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b8c:	d108      	bne.n	8002ba0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	e05f      	b.n	8002c60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ba0:	897b      	ldrh	r3, [r7, #10]
 8002ba2:	11db      	asrs	r3, r3, #7
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0306 	and.w	r3, r3, #6
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f063 030f 	orn	r3, r3, #15
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4930      	ldr	r1, [pc, #192]	@ (8002c80 <I2C_MasterRequestRead+0x194>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f8dc 	bl	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e054      	b.n	8002c78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4929      	ldr	r1, [pc, #164]	@ (8002c84 <I2C_MasterRequestRead+0x198>)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f8cc 	bl	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e044      	b.n	8002c78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f831 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3a:	d103      	bne.n	8002c44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e017      	b.n	8002c78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	11db      	asrs	r3, r3, #7
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0306 	and.w	r3, r3, #6
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f063 030e 	orn	r3, r3, #14
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <I2C_MasterRequestRead+0x198>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f888 	bl	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	00010008 	.word	0x00010008
 8002c84:	00010002 	.word	0x00010002

08002c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c98:	e048      	b.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ca0:	d044      	beq.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7fe fc9b 	bl	80015dc <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d139      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10d      	bne.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	e00c      	b.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d116      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e023      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	0c1b      	lsrs	r3, r3, #16
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10d      	bne.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	e00c      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d093      	beq.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d8a:	e071      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d9a:	d123      	bne.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002daa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e067      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dea:	d041      	beq.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7fe fbf6 	bl	80015dc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d136      	bne.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10c      	bne.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e00b      	b.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e021      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10c      	bne.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	43da      	mvns	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e00b      	b.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f af6d 	bne.w	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec8:	e034      	b.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8e3 	bl	8003096 <I2C_IsAcknowledgeFailed>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e034      	b.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ee0:	d028      	beq.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7fe fb7b 	bl	80015dc <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d11d      	bne.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b80      	cmp	r3, #128	@ 0x80
 8002f04:	d016      	beq.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e007      	b.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b80      	cmp	r3, #128	@ 0x80
 8002f40:	d1c3      	bne.n	8002eca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f58:	e034      	b.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f89b 	bl	8003096 <I2C_IsAcknowledgeFailed>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e034      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f70:	d028      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe fb33 	bl	80015dc <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11d      	bne.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d016      	beq.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e007      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d1c3      	bne.n	8002f5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe8:	e049      	b.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d119      	bne.n	800302c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0210 	mvn.w	r2, #16
 8003000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e030      	b.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7fe fad6 	bl	80015dc <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11d      	bne.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304c:	2b40      	cmp	r3, #64	@ 0x40
 800304e:	d016      	beq.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003088:	2b40      	cmp	r3, #64	@ 0x40
 800308a:	d1ae      	bne.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ac:	d11b      	bne.n	80030e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f043 0204 	orr.w	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0cc      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003108:	4b68      	ldr	r3, [pc, #416]	@ (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d90c      	bls.n	8003130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b65      	ldr	r3, [pc, #404]	@ (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b63      	ldr	r3, [pc, #396]	@ (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b8      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003148:	4b59      	ldr	r3, [pc, #356]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a58      	ldr	r2, [pc, #352]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003160:	4b53      	ldr	r3, [pc, #332]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a52      	ldr	r2, [pc, #328]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800316a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b50      	ldr	r3, [pc, #320]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	494d      	ldr	r1, [pc, #308]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d044      	beq.n	8003214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d119      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d003      	beq.n	80031b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b3f      	ldr	r3, [pc, #252]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e067      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b37      	ldr	r3, [pc, #220]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4934      	ldr	r1, [pc, #208]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e4:	f7fe f9fa 	bl	80015dc <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fe f9f6 	bl	80015dc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e04f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b2b      	ldr	r3, [pc, #172]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d20c      	bcs.n	800323c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b20      	ldr	r3, [pc, #128]	@ (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e032      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4916      	ldr	r1, [pc, #88]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003266:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	490e      	ldr	r1, [pc, #56]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800327a:	f000 f855 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 800327e:	4602      	mov	r2, r0
 8003280:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	490a      	ldr	r1, [pc, #40]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	4a09      	ldr	r2, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe f95a 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023c00 	.word	0x40023c00
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08006120 	.word	0x08006120
 80032b8:	20000020 	.word	0x20000020
 80032bc:	20000024 	.word	0x20000024

080032c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c4:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000020 	.word	0x20000020

080032d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032dc:	f7ff fff0 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0a9b      	lsrs	r3, r3, #10
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08006130 	.word	0x08006130

08003300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003304:	f7ff ffdc 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	0b5b      	lsrs	r3, r3, #13
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4903      	ldr	r1, [pc, #12]	@ (8003324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	08006130 	.word	0x08006130

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b0ae      	sub	sp, #184	@ 0xb8
 800332e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800334e:	4bcb      	ldr	r3, [pc, #812]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b0c      	cmp	r3, #12
 8003358:	f200 8206 	bhi.w	8003768 <HAL_RCC_GetSysClockFreq+0x440>
 800335c:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <HAL_RCC_GetSysClockFreq+0x3c>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003399 	.word	0x08003399
 8003368:	08003769 	.word	0x08003769
 800336c:	08003769 	.word	0x08003769
 8003370:	08003769 	.word	0x08003769
 8003374:	080033a1 	.word	0x080033a1
 8003378:	08003769 	.word	0x08003769
 800337c:	08003769 	.word	0x08003769
 8003380:	08003769 	.word	0x08003769
 8003384:	080033a9 	.word	0x080033a9
 8003388:	08003769 	.word	0x08003769
 800338c:	08003769 	.word	0x08003769
 8003390:	08003769 	.word	0x08003769
 8003394:	08003599 	.word	0x08003599
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4bb9      	ldr	r3, [pc, #740]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x358>)
 800339a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800339e:	e1e7      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033a0:	4bb8      	ldr	r3, [pc, #736]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033a6:	e1e3      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a8:	4bb4      	ldr	r3, [pc, #720]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b4:	4bb1      	ldr	r3, [pc, #708]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d071      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c0:	4bae      	ldr	r3, [pc, #696]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	0159      	lsls	r1, r3, #5
 80033f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f8:	0150      	lsls	r0, r2, #5
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4621      	mov	r1, r4
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	6439      	str	r1, [r7, #64]	@ 0x40
 8003404:	4629      	mov	r1, r5
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	647b      	str	r3, [r7, #68]	@ 0x44
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003418:	4649      	mov	r1, r9
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	4641      	mov	r1, r8
 800341e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003422:	4641      	mov	r1, r8
 8003424:	018a      	lsls	r2, r1, #6
 8003426:	4641      	mov	r1, r8
 8003428:	1a51      	subs	r1, r2, r1
 800342a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800342c:	4649      	mov	r1, r9
 800342e:	eb63 0301 	sbc.w	r3, r3, r1
 8003432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003440:	4649      	mov	r1, r9
 8003442:	00cb      	lsls	r3, r1, #3
 8003444:	4641      	mov	r1, r8
 8003446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800344a:	4641      	mov	r1, r8
 800344c:	00ca      	lsls	r2, r1, #3
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	4603      	mov	r3, r0
 8003454:	4622      	mov	r2, r4
 8003456:	189b      	adds	r3, r3, r2
 8003458:	633b      	str	r3, [r7, #48]	@ 0x30
 800345a:	462b      	mov	r3, r5
 800345c:	460a      	mov	r2, r1
 800345e:	eb42 0303 	adc.w	r3, r2, r3
 8003462:	637b      	str	r3, [r7, #52]	@ 0x34
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003470:	4629      	mov	r1, r5
 8003472:	024b      	lsls	r3, r1, #9
 8003474:	4621      	mov	r1, r4
 8003476:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800347a:	4621      	mov	r1, r4
 800347c:	024a      	lsls	r2, r1, #9
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800348c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003490:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003494:	f7fc ff0c 	bl	80002b0 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034a2:	e067      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a4:	4b75      	ldr	r3, [pc, #468]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034b0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034be:	2300      	movs	r3, #0
 80034c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034c6:	4622      	mov	r2, r4
 80034c8:	462b      	mov	r3, r5
 80034ca:	f04f 0000 	mov.w	r0, #0
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	0159      	lsls	r1, r3, #5
 80034d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d8:	0150      	lsls	r0, r2, #5
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4621      	mov	r1, r4
 80034e0:	1a51      	subs	r1, r2, r1
 80034e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034e4:	4629      	mov	r1, r5
 80034e6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80034f8:	4649      	mov	r1, r9
 80034fa:	018b      	lsls	r3, r1, #6
 80034fc:	4641      	mov	r1, r8
 80034fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003502:	4641      	mov	r1, r8
 8003504:	018a      	lsls	r2, r1, #6
 8003506:	4641      	mov	r1, r8
 8003508:	ebb2 0a01 	subs.w	sl, r2, r1
 800350c:	4649      	mov	r1, r9
 800350e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800351e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003522:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003526:	4692      	mov	sl, r2
 8003528:	469b      	mov	fp, r3
 800352a:	4623      	mov	r3, r4
 800352c:	eb1a 0303 	adds.w	r3, sl, r3
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	462b      	mov	r3, r5
 8003534:	eb4b 0303 	adc.w	r3, fp, r3
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003546:	4629      	mov	r1, r5
 8003548:	028b      	lsls	r3, r1, #10
 800354a:	4621      	mov	r1, r4
 800354c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003550:	4621      	mov	r1, r4
 8003552:	028a      	lsls	r2, r1, #10
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800355c:	2200      	movs	r2, #0
 800355e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003560:	677a      	str	r2, [r7, #116]	@ 0x74
 8003562:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003566:	f7fc fea3 	bl	80002b0 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4613      	mov	r3, r2
 8003570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003574:	4b41      	ldr	r3, [pc, #260]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	3301      	adds	r3, #1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800358a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003596:	e0eb      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003598:	4b38      	ldr	r3, [pc, #224]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a4:	4b35      	ldr	r3, [pc, #212]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d06b      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b0:	4b32      	ldr	r3, [pc, #200]	@ (800367c <HAL_RCC_GetSysClockFreq+0x354>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	2200      	movs	r2, #0
 80035b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80035c4:	2300      	movs	r3, #0
 80035c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80035c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035cc:	4622      	mov	r2, r4
 80035ce:	462b      	mov	r3, r5
 80035d0:	f04f 0000 	mov.w	r0, #0
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	0159      	lsls	r1, r3, #5
 80035da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035de:	0150      	lsls	r0, r2, #5
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4621      	mov	r1, r4
 80035e6:	1a51      	subs	r1, r2, r1
 80035e8:	61b9      	str	r1, [r7, #24]
 80035ea:	4629      	mov	r1, r5
 80035ec:	eb63 0301 	sbc.w	r3, r3, r1
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035fe:	4659      	mov	r1, fp
 8003600:	018b      	lsls	r3, r1, #6
 8003602:	4651      	mov	r1, sl
 8003604:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003608:	4651      	mov	r1, sl
 800360a:	018a      	lsls	r2, r1, #6
 800360c:	4651      	mov	r1, sl
 800360e:	ebb2 0801 	subs.w	r8, r2, r1
 8003612:	4659      	mov	r1, fp
 8003614:	eb63 0901 	sbc.w	r9, r3, r1
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003624:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003628:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362c:	4690      	mov	r8, r2
 800362e:	4699      	mov	r9, r3
 8003630:	4623      	mov	r3, r4
 8003632:	eb18 0303 	adds.w	r3, r8, r3
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	462b      	mov	r3, r5
 800363a:	eb49 0303 	adc.w	r3, r9, r3
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800364c:	4629      	mov	r1, r5
 800364e:	024b      	lsls	r3, r1, #9
 8003650:	4621      	mov	r1, r4
 8003652:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003656:	4621      	mov	r1, r4
 8003658:	024a      	lsls	r2, r1, #9
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003662:	2200      	movs	r2, #0
 8003664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003666:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003668:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800366c:	f7fc fe20 	bl	80002b0 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800367a:	e065      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x420>
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400
 8003684:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003688:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x458>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	2200      	movs	r2, #0
 8003690:	4618      	mov	r0, r3
 8003692:	4611      	mov	r1, r2
 8003694:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003698:	653b      	str	r3, [r7, #80]	@ 0x50
 800369a:	2300      	movs	r3, #0
 800369c:	657b      	str	r3, [r7, #84]	@ 0x54
 800369e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036a2:	4642      	mov	r2, r8
 80036a4:	464b      	mov	r3, r9
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b4:	0150      	lsls	r0, r2, #5
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4641      	mov	r1, r8
 80036bc:	1a51      	subs	r1, r2, r1
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	4649      	mov	r1, r9
 80036c2:	eb63 0301 	sbc.w	r3, r3, r1
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036d4:	4659      	mov	r1, fp
 80036d6:	018b      	lsls	r3, r1, #6
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036de:	4651      	mov	r1, sl
 80036e0:	018a      	lsls	r2, r1, #6
 80036e2:	4651      	mov	r1, sl
 80036e4:	1a54      	subs	r4, r2, r1
 80036e6:	4659      	mov	r1, fp
 80036e8:	eb63 0501 	sbc.w	r5, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	464b      	mov	r3, r9
 8003708:	eb45 0303 	adc.w	r3, r5, r3
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003730:	2200      	movs	r2, #0
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003734:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003736:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800373a:	f7fc fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4613      	mov	r3, r2
 8003744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003748:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x458>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	0f1b      	lsrs	r3, r3, #28
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800375a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003766:	e003      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x45c>)
 800376a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800376e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003774:	4618      	mov	r0, r3
 8003776:	37b8      	adds	r7, #184	@ 0xb8
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	00f42400 	.word	0x00f42400

08003788 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e28d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8083 	beq.w	80038ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037a8:	4b94      	ldr	r3, [pc, #592]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d019      	beq.n	80037e8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037b4:	4b91      	ldr	r3, [pc, #580]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
        || \
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037c0:	4b8e      	ldr	r3, [pc, #568]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037cc:	d00c      	beq.n	80037e8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ce:	4b8b      	ldr	r3, [pc, #556]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d112      	bne.n	8003800 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037da:	4b88      	ldr	r3, [pc, #544]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037e6:	d10b      	bne.n	8003800 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	4b84      	ldr	r3, [pc, #528]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d05b      	beq.n	80038ac <HAL_RCC_OscConfig+0x124>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d157      	bne.n	80038ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e25a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003808:	d106      	bne.n	8003818 <HAL_RCC_OscConfig+0x90>
 800380a:	4b7c      	ldr	r3, [pc, #496]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7b      	ldr	r2, [pc, #492]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e01d      	b.n	8003854 <HAL_RCC_OscConfig+0xcc>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0xb4>
 8003822:	4b76      	ldr	r3, [pc, #472]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a75      	ldr	r2, [pc, #468]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b73      	ldr	r3, [pc, #460]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a72      	ldr	r2, [pc, #456]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0xcc>
 800383c:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	4b6c      	ldr	r3, [pc, #432]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6b      	ldr	r2, [pc, #428]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 800384e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd febe 	bl	80015dc <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fd feba 	bl	80015dc <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	@ 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e21f      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	4b61      	ldr	r3, [pc, #388]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0xdc>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd feaa 	bl	80015dc <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7fd fea6 	bl	80015dc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	@ 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e20b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	4b57      	ldr	r3, [pc, #348]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x104>
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06f      	beq.n	800399a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038ba:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d017      	beq.n	80038f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038c6:	4b4d      	ldr	r3, [pc, #308]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d105      	bne.n	80038de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038d2:	4b4a      	ldr	r3, [pc, #296]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038de:	4b47      	ldr	r3, [pc, #284]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d11c      	bne.n	8003924 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b44      	ldr	r3, [pc, #272]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d116      	bne.n	8003924 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_RCC_OscConfig+0x186>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e1d3      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b3b      	ldr	r3, [pc, #236]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4937      	ldr	r1, [pc, #220]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	e03a      	b.n	800399a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392c:	4b34      	ldr	r3, [pc, #208]	@ (8003a00 <HAL_RCC_OscConfig+0x278>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fe53 	bl	80015dc <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fd fe4f 	bl	80015dc <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e1b4      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b28      	ldr	r3, [pc, #160]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4925      	ldr	r1, [pc, #148]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
 800396c:	e015      	b.n	800399a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396e:	4b24      	ldr	r3, [pc, #144]	@ (8003a00 <HAL_RCC_OscConfig+0x278>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fe32 	bl	80015dc <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397c:	f7fd fe2e 	bl	80015dc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e193      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d036      	beq.n	8003a14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d016      	beq.n	80039dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ae:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fe12 	bl	80015dc <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fd fe0e 	bl	80015dc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e173      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ce:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_OscConfig+0x274>)
 80039d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x234>
 80039da:	e01b      	b.n	8003a14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <HAL_RCC_OscConfig+0x27c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd fdfb 	bl	80015dc <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	e00e      	b.n	8003a08 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fd fdf7 	bl	80015dc <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d907      	bls.n	8003a08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e15c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
 80039fc:	40023800 	.word	0x40023800
 8003a00:	42470000 	.word	0x42470000
 8003a04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	4b8a      	ldr	r3, [pc, #552]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1ea      	bne.n	80039ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8097 	beq.w	8003b50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a26:	4b83      	ldr	r3, [pc, #524]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	4b7f      	ldr	r3, [pc, #508]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a42:	4b7c      	ldr	r3, [pc, #496]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	4b79      	ldr	r3, [pc, #484]	@ (8003c38 <HAL_RCC_OscConfig+0x4b0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d118      	bne.n	8003a90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5e:	4b76      	ldr	r3, [pc, #472]	@ (8003c38 <HAL_RCC_OscConfig+0x4b0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a75      	ldr	r2, [pc, #468]	@ (8003c38 <HAL_RCC_OscConfig+0x4b0>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7fd fdb7 	bl	80015dc <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fd fdb3 	bl	80015dc <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e118      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b6c      	ldr	r3, [pc, #432]	@ (8003c38 <HAL_RCC_OscConfig+0x4b0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x31e>
 8003a98:	4b66      	ldr	r3, [pc, #408]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a65      	ldr	r2, [pc, #404]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa4:	e01c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x358>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x340>
 8003aae:	4b61      	ldr	r3, [pc, #388]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	4a60      	ldr	r2, [pc, #384]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aba:	4b5e      	ldr	r3, [pc, #376]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	4a5d      	ldr	r2, [pc, #372]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x358>
 8003ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	4a59      	ldr	r2, [pc, #356]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad4:	4b57      	ldr	r3, [pc, #348]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	4a56      	ldr	r2, [pc, #344]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	f023 0304 	bic.w	r3, r3, #4
 8003ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fd78 	bl	80015dc <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd fd74 	bl	80015dc <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0d7      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ee      	beq.n	8003af0 <HAL_RCC_OscConfig+0x368>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fd62 	bl	80015dc <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fd5e 	bl	80015dc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e0c1      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b32:	4b40      	ldr	r3, [pc, #256]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ee      	bne.n	8003b1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b44:	4b3b      	ldr	r3, [pc, #236]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	4a3a      	ldr	r2, [pc, #232]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80ad 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b5a:	4b36      	ldr	r3, [pc, #216]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d060      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d145      	bne.n	8003bfa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b33      	ldr	r3, [pc, #204]	@ (8003c3c <HAL_RCC_OscConfig+0x4b4>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd fd32 	bl	80015dc <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fd fd2e 	bl	80015dc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e093      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b29      	ldr	r3, [pc, #164]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	019b      	lsls	r3, r3, #6
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	071b      	lsls	r3, r3, #28
 8003bc6:	491b      	ldr	r1, [pc, #108]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_RCC_OscConfig+0x4b4>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd2:	f7fd fd03 	bl	80015dc <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fd fcff 	bl	80015dc <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e064      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bec:	4b11      	ldr	r3, [pc, #68]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x452>
 8003bf8:	e05c      	b.n	8003cb4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <HAL_RCC_OscConfig+0x4b4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fcec 	bl	80015dc <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd fce8 	bl	80015dc <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x480>
 8003c26:	e045      	b.n	8003cb4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e040      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c40:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc0 <HAL_RCC_OscConfig+0x538>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d030      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d129      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d122      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d119      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e042      	b.n	8003d5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fb62 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	@ 0x24
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fdff 	bl	800490c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d175      	bne.n	8003e70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_UART_Transmit+0x2c>
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e06e      	b.n	8003e72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2221      	movs	r2, #33	@ 0x21
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003da2:	f7fd fc1b 	bl	80015dc <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	88fa      	ldrh	r2, [r7, #6]
 8003db2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dbc:	d108      	bne.n	8003dd0 <HAL_UART_Transmit+0x6c>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d104      	bne.n	8003dd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	e003      	b.n	8003dd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dd8:	e02e      	b.n	8003e38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fb9b 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e03a      	b.n	8003e72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	3302      	adds	r3, #2
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	e007      	b.n	8003e2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3301      	adds	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1cb      	bne.n	8003dda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2140      	movs	r1, #64	@ 0x40
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fb67 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e006      	b.n	8003e72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b08a      	sub	sp, #40	@ 0x28
 8003e7e:	af02      	add	r7, sp, #8
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	f040 8081 	bne.w	8003f9e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_UART_Receive+0x2e>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e079      	b.n	8003fa0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2222      	movs	r2, #34	@ 0x22
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fb8c 	bl	80015dc <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d108      	bne.n	8003eee <HAL_UART_Receive+0x74>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e003      	b.n	8003ef6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ef6:	e047      	b.n	8003f88 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2120      	movs	r1, #32
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb0c 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e042      	b.n	8003fa0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10c      	bne.n	8003f3a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3302      	adds	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	e01f      	b.n	8003f7a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f42:	d007      	beq.n	8003f54 <HAL_UART_Receive+0xda>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_UART_Receive+0xe8>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e008      	b.n	8003f74 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3301      	adds	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1b2      	bne.n	8003ef8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b0ba      	sub	sp, #232	@ 0xe8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_UART_IRQHandler+0x66>
 8003ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fbc2 	bl	8004790 <UART_Receive_IT>
      return;
 800400c:	e25b      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800400e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80de 	beq.w	80041d4 <HAL_UART_IRQHandler+0x22c>
 8004018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004028:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80d1 	beq.w	80041d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_UART_IRQHandler+0xae>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_UART_IRQHandler+0xd2>
 8004062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f043 0202 	orr.w	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_UART_IRQHandler+0xf6>
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f043 0204 	orr.w	r2, r3, #4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d011      	beq.n	80040ce <HAL_UART_IRQHandler+0x126>
 80040aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d105      	bne.n	80040c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0208 	orr.w	r2, r3, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 81f2 	beq.w	80044bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_UART_IRQHandler+0x14e>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb4d 	bl	8004790 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b40      	cmp	r3, #64	@ 0x40
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_UART_IRQHandler+0x17a>
 800411a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04f      	beq.n	80041c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa55 	bl	80045d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d141      	bne.n	80041ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800414c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004162:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800416e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800417a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1d9      	bne.n	8004136 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d013      	beq.n	80041b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	4a7e      	ldr	r2, [pc, #504]	@ (8004388 <HAL_UART_IRQHandler+0x3e0>)
 8004190:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fde1 	bl	8001d5e <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041ac:	4610      	mov	r0, r2
 80041ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e00e      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f99e 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e00a      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f99a 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	e006      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f996 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041ce:	e175      	b.n	80044bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	bf00      	nop
    return;
 80041d2:	e173      	b.n	80044bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	f040 814f 	bne.w	800447c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8148 	beq.w	800447c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8141 	beq.w	800447c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b40      	cmp	r3, #64	@ 0x40
 800421c:	f040 80b6 	bne.w	800438c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800422c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8145 	beq.w	80044c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800423e:	429a      	cmp	r2, r3
 8004240:	f080 813e 	bcs.w	80044c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800424a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004256:	f000 8088 	beq.w	800436a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004270:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800428a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004292:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800429e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1d9      	bne.n	800425a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3314      	adds	r3, #20
 80042c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e1      	bne.n	80042a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3314      	adds	r3, #20
 80042e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004306:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004308:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800430c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e3      	bne.n	80042e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800433a:	f023 0310 	bic.w	r3, r3, #16
 800433e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800434c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800434e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004352:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800435a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e3      	bne.n	8004328 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	4618      	mov	r0, r3
 8004366:	f7fd fc8a 	bl	8001c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8c1 	bl	8004508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004386:	e09b      	b.n	80044c0 <HAL_UART_IRQHandler+0x518>
 8004388:	08004699 	.word	0x08004699
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004394:	b29b      	uxth	r3, r3
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 808e 	beq.w	80044c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8089 	beq.w	80044c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e3      	bne.n	80043b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	623b      	str	r3, [r7, #32]
   return(result);
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800440e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e3      	bne.n	80043ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004454:	61fa      	str	r2, [r7, #28]
 8004456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	617b      	str	r3, [r7, #20]
   return(result);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e3      	bne.n	8004430 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800446e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f847 	bl	8004508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800447a:	e023      	b.n	80044c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_UART_IRQHandler+0x4f4>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f913 	bl	80046c0 <UART_Transmit_IT>
    return;
 800449a:	e014      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <HAL_UART_IRQHandler+0x51e>
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f953 	bl	8004760 <UART_EndTransmit_IT>
    return;
 80044ba:	e004      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80044bc:	bf00      	nop
 80044be:	e002      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044c4:	bf00      	nop
  }
}
 80044c6:	37e8      	adds	r7, #232	@ 0xe8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	e03b      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004538:	d037      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fd f84f 	bl	80015dc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <UART_WaitOnFlagUntilTimeout+0x30>
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e03a      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d023      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b80      	cmp	r3, #128	@ 0x80
 8004566:	d020      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b40      	cmp	r3, #64	@ 0x40
 800456c:	d01d      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d116      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f81d 	bl	80045d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2208      	movs	r2, #8
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d0b4      	beq.n	8004532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b095      	sub	sp, #84	@ 0x54
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	61fb      	str	r3, [r7, #28]
   return(result);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800462e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	2b01      	cmp	r3, #1
 8004648:	d119      	bne.n	800467e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	60bb      	str	r3, [r7, #8]
   return(result);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	647b      	str	r3, [r7, #68]	@ 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800466a:	61ba      	str	r2, [r7, #24]
 800466c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	613b      	str	r3, [r7, #16]
   return(result);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e5      	bne.n	800464a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800468c:	bf00      	nop
 800468e:	3754      	adds	r7, #84	@ 0x54
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff1e 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b21      	cmp	r3, #33	@ 0x21
 80046d2:	d13e      	bne.n	8004752 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046dc:	d114      	bne.n	8004708 <UART_Transmit_IT+0x48>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d110      	bne.n	8004708 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]
 8004706:	e008      	b.n	800471a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	1c59      	adds	r1, r3, #1
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6211      	str	r1, [r2, #32]
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4619      	mov	r1, r3
 8004728:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800473c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800474c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004776:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fea3 	bl	80044cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	@ 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b22      	cmp	r3, #34	@ 0x22
 80047a2:	f040 80ae 	bne.w	8004902 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ae:	d117      	bne.n	80047e0 <UART_Receive_IT+0x50>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d113      	bne.n	80047e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80047de:	e026      	b.n	800482e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f2:	d007      	beq.n	8004804 <UART_Receive_IT+0x74>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <UART_Receive_IT+0x82>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e008      	b.n	8004824 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4619      	mov	r1, r3
 800483c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800483e:	2b00      	cmp	r3, #0
 8004840:	d15d      	bne.n	80048fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0220 	bic.w	r2, r2, #32
 8004850:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d135      	bne.n	80048f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f023 0310 	bic.w	r3, r3, #16
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ae:	623a      	str	r2, [r7, #32]
 80048b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d10a      	bne.n	80048e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fe0b 	bl	8004508 <HAL_UARTEx_RxEventCallback>
 80048f2:	e002      	b.n	80048fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff fdf3 	bl	80044e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e002      	b.n	8004904 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3730      	adds	r7, #48	@ 0x30
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b0c0      	sub	sp, #256	@ 0x100
 8004912:	af00      	add	r7, sp, #0
 8004914:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	68d9      	ldr	r1, [r3, #12]
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	ea40 0301 	orr.w	r3, r0, r1
 8004934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	431a      	orrs	r2, r3
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	431a      	orrs	r2, r3
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004964:	f021 010c 	bic.w	r1, r1, #12
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004972:	430b      	orrs	r3, r1
 8004974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004986:	6999      	ldr	r1, [r3, #24]
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	ea40 0301 	orr.w	r3, r0, r1
 8004992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd8 <UART_SetConfig+0x2cc>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d005      	beq.n	80049ac <UART_SetConfig+0xa0>
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b8d      	ldr	r3, [pc, #564]	@ (8004bdc <UART_SetConfig+0x2d0>)
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d104      	bne.n	80049b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7fe fca8 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 80049b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049b4:	e003      	b.n	80049be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049b6:	f7fe fc8f 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 80049ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c8:	f040 810c 	bne.w	8004be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	1891      	adds	r1, r2, r2
 80049e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049e6:	415b      	adcs	r3, r3
 80049e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049ee:	4621      	mov	r1, r4
 80049f0:	eb12 0801 	adds.w	r8, r2, r1
 80049f4:	4629      	mov	r1, r5
 80049f6:	eb43 0901 	adc.w	r9, r3, r1
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0e:	4690      	mov	r8, r2
 8004a10:	4699      	mov	r9, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	eb18 0303 	adds.w	r3, r8, r3
 8004a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	eb49 0303 	adc.w	r3, r9, r3
 8004a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	18db      	adds	r3, r3, r3
 8004a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a40:	4613      	mov	r3, r2
 8004a42:	eb42 0303 	adc.w	r3, r2, r3
 8004a46:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a50:	f7fb fc2e 	bl	80002b0 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4b61      	ldr	r3, [pc, #388]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	011c      	lsls	r4, r3, #4
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a84:	4641      	mov	r1, r8
 8004a86:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa4:	4692      	mov	sl, r2
 8004aa6:	469b      	mov	fp, r3
 8004aa8:	4643      	mov	r3, r8
 8004aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8004aae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	18db      	adds	r3, r3, r3
 8004ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ae6:	f7fb fbe3 	bl	80002b0 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	4b3b      	ldr	r3, [pc, #236]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004af2:	fba3 2301 	umull	r2, r3, r3, r1
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2264      	movs	r2, #100	@ 0x64
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	1acb      	subs	r3, r1, r3
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b06:	4b36      	ldr	r3, [pc, #216]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004b08:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b14:	441c      	add	r4, r3
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b30:	415b      	adcs	r3, r3
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b38:	4641      	mov	r1, r8
 8004b3a:	1851      	adds	r1, r2, r1
 8004b3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b3e:	4649      	mov	r1, r9
 8004b40:	414b      	adcs	r3, r1
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b50:	4659      	mov	r1, fp
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4642      	mov	r2, r8
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	460a      	mov	r2, r1
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	18db      	adds	r3, r3, r3
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b92:	4613      	mov	r3, r2
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ba2:	f7fb fb85 	bl	80002b0 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004bac:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	2164      	movs	r1, #100	@ 0x64
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	3332      	adds	r3, #50	@ 0x32
 8004bbe:	4a08      	ldr	r2, [pc, #32]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	f003 0207 	and.w	r2, r3, #7
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4422      	add	r2, r4
 8004bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd4:	e106      	b.n	8004de4 <UART_SetConfig+0x4d8>
 8004bd6:	bf00      	nop
 8004bd8:	40011000 	.word	0x40011000
 8004bdc:	40011400 	.word	0x40011400
 8004be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bf6:	4642      	mov	r2, r8
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	1891      	adds	r1, r2, r2
 8004bfc:	6239      	str	r1, [r7, #32]
 8004bfe:	415b      	adcs	r3, r3
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c06:	4641      	mov	r1, r8
 8004c08:	1854      	adds	r4, r2, r1
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	eb43 0501 	adc.w	r5, r3, r1
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	00eb      	lsls	r3, r5, #3
 8004c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c1e:	00e2      	lsls	r2, r4, #3
 8004c20:	4614      	mov	r4, r2
 8004c22:	461d      	mov	r5, r3
 8004c24:	4643      	mov	r3, r8
 8004c26:	18e3      	adds	r3, r4, r3
 8004c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	eb45 0303 	adc.w	r3, r5, r3
 8004c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c52:	4629      	mov	r1, r5
 8004c54:	008b      	lsls	r3, r1, #2
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	008a      	lsls	r2, r1, #2
 8004c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c64:	f7fb fb24 	bl	80002b0 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b60      	ldr	r3, [pc, #384]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	011c      	lsls	r4, r3, #4
 8004c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	61b9      	str	r1, [r7, #24]
 8004c90:	415b      	adcs	r3, r3
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c98:	4641      	mov	r1, r8
 8004c9a:	1851      	adds	r1, r2, r1
 8004c9c:	6139      	str	r1, [r7, #16]
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	414b      	adcs	r3, r1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	00cb      	lsls	r3, r1, #3
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cba:	4651      	mov	r1, sl
 8004cbc:	00ca      	lsls	r2, r1, #3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ccc:	464b      	mov	r3, r9
 8004cce:	460a      	mov	r2, r1
 8004cd0:	eb42 0303 	adc.w	r3, r2, r3
 8004cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ce2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	008b      	lsls	r3, r1, #2
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	008a      	lsls	r2, r1, #2
 8004cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d02:	f7fb fad5 	bl	80002b0 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4b38      	ldr	r3, [pc, #224]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	2264      	movs	r2, #100	@ 0x64
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	1acb      	subs	r3, r1, r3
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	3332      	adds	r3, #50	@ 0x32
 8004d20:	4a33      	ldr	r2, [pc, #204]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d2c:	441c      	add	r4, r3
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d36:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	415b      	adcs	r3, r3
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6039      	str	r1, [r7, #0]
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d7e:	464b      	mov	r3, r9
 8004d80:	460a      	mov	r2, r1
 8004d82:	eb42 0303 	adc.w	r3, r2, r3
 8004d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d92:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004da0:	4649      	mov	r1, r9
 8004da2:	008b      	lsls	r3, r1, #2
 8004da4:	4641      	mov	r1, r8
 8004da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004daa:	4641      	mov	r1, r8
 8004dac:	008a      	lsls	r2, r1, #2
 8004dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004db2:	f7fb fa7d 	bl	80002b0 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	@ 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	3332      	adds	r3, #50	@ 0x32
 8004dce:	4a08      	ldr	r2, [pc, #32]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 020f 	and.w	r2, r3, #15
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4422      	add	r2, r4
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004dea:	46bd      	mov	sp, r7
 8004dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df0:	51eb851f 	.word	0x51eb851f

08004df4 <std>:
 8004df4:	2300      	movs	r3, #0
 8004df6:	b510      	push	{r4, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	8181      	strh	r1, [r0, #12]
 8004e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e08:	81c2      	strh	r2, [r0, #14]
 8004e0a:	6183      	str	r3, [r0, #24]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2208      	movs	r2, #8
 8004e10:	305c      	adds	r0, #92	@ 0x5c
 8004e12:	f000 f97d 	bl	8005110 <memset>
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <std+0x58>)
 8004e18:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <std+0x5c>)
 8004e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <std+0x60>)
 8004e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e22:	4b0d      	ldr	r3, [pc, #52]	@ (8004e58 <std+0x64>)
 8004e24:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <std+0x68>)
 8004e28:	6224      	str	r4, [r4, #32]
 8004e2a:	429c      	cmp	r4, r3
 8004e2c:	d006      	beq.n	8004e3c <std+0x48>
 8004e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e32:	4294      	cmp	r4, r2
 8004e34:	d002      	beq.n	8004e3c <std+0x48>
 8004e36:	33d0      	adds	r3, #208	@ 0xd0
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	d105      	bne.n	8004e48 <std+0x54>
 8004e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f000 b996 	b.w	8005174 <__retarget_lock_init_recursive>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08005a1d 	.word	0x08005a1d
 8004e50:	08005a3f 	.word	0x08005a3f
 8004e54:	08005a77 	.word	0x08005a77
 8004e58:	08005a9b 	.word	0x08005a9b
 8004e5c:	20000234 	.word	0x20000234

08004e60 <stdio_exit_handler>:
 8004e60:	4a02      	ldr	r2, [pc, #8]	@ (8004e6c <stdio_exit_handler+0xc>)
 8004e62:	4903      	ldr	r1, [pc, #12]	@ (8004e70 <stdio_exit_handler+0x10>)
 8004e64:	4803      	ldr	r0, [pc, #12]	@ (8004e74 <stdio_exit_handler+0x14>)
 8004e66:	f000 b869 	b.w	8004f3c <_fwalk_sglue>
 8004e6a:	bf00      	nop
 8004e6c:	2000002c 	.word	0x2000002c
 8004e70:	080059b5 	.word	0x080059b5
 8004e74:	2000003c 	.word	0x2000003c

08004e78 <cleanup_stdio>:
 8004e78:	6841      	ldr	r1, [r0, #4]
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <cleanup_stdio+0x34>)
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	d001      	beq.n	8004e88 <cleanup_stdio+0x10>
 8004e84:	f000 fd96 	bl	80059b4 <_fflush_r>
 8004e88:	68a1      	ldr	r1, [r4, #8]
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <cleanup_stdio+0x38>)
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <cleanup_stdio+0x1e>
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fd8f 	bl	80059b4 <_fflush_r>
 8004e96:	68e1      	ldr	r1, [r4, #12]
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <cleanup_stdio+0x3c>)
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d004      	beq.n	8004ea8 <cleanup_stdio+0x30>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea4:	f000 bd86 	b.w	80059b4 <_fflush_r>
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000234 	.word	0x20000234
 8004eb0:	2000029c 	.word	0x2000029c
 8004eb4:	20000304 	.word	0x20000304

08004eb8 <global_stdio_init.part.0>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <global_stdio_init.part.0+0x30>)
 8004ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8004eec <global_stdio_init.part.0+0x34>)
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef0 <global_stdio_init.part.0+0x38>)
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	f7ff ff94 	bl	8004df4 <std>
 8004ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2109      	movs	r1, #9
 8004ed4:	f7ff ff8e 	bl	8004df4 <std>
 8004ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004edc:	2202      	movs	r2, #2
 8004ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee2:	2112      	movs	r1, #18
 8004ee4:	f7ff bf86 	b.w	8004df4 <std>
 8004ee8:	2000036c 	.word	0x2000036c
 8004eec:	20000234 	.word	0x20000234
 8004ef0:	08004e61 	.word	0x08004e61

08004ef4 <__sfp_lock_acquire>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	@ (8004efc <__sfp_lock_acquire+0x8>)
 8004ef6:	f000 b93e 	b.w	8005176 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	20000371 	.word	0x20000371

08004f00 <__sfp_lock_release>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__sfp_lock_release+0x8>)
 8004f02:	f000 b939 	b.w	8005178 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	20000371 	.word	0x20000371

08004f0c <__sinit>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4604      	mov	r4, r0
 8004f10:	f7ff fff0 	bl	8004ef4 <__sfp_lock_acquire>
 8004f14:	6a23      	ldr	r3, [r4, #32]
 8004f16:	b11b      	cbz	r3, 8004f20 <__sinit+0x14>
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	f7ff bff0 	b.w	8004f00 <__sfp_lock_release>
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <__sinit+0x28>)
 8004f22:	6223      	str	r3, [r4, #32]
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <__sinit+0x2c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f5      	bne.n	8004f18 <__sinit+0xc>
 8004f2c:	f7ff ffc4 	bl	8004eb8 <global_stdio_init.part.0>
 8004f30:	e7f2      	b.n	8004f18 <__sinit+0xc>
 8004f32:	bf00      	nop
 8004f34:	08004e79 	.word	0x08004e79
 8004f38:	2000036c 	.word	0x2000036c

08004f3c <_fwalk_sglue>:
 8004f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f40:	4607      	mov	r7, r0
 8004f42:	4688      	mov	r8, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	2600      	movs	r6, #0
 8004f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f50:	d505      	bpl.n	8004f5e <_fwalk_sglue+0x22>
 8004f52:	6824      	ldr	r4, [r4, #0]
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	d1f7      	bne.n	8004f48 <_fwalk_sglue+0xc>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d907      	bls.n	8004f74 <_fwalk_sglue+0x38>
 8004f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	d003      	beq.n	8004f74 <_fwalk_sglue+0x38>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	4306      	orrs	r6, r0
 8004f74:	3568      	adds	r5, #104	@ 0x68
 8004f76:	e7e9      	b.n	8004f4c <_fwalk_sglue+0x10>

08004f78 <iprintf>:
 8004f78:	b40f      	push	{r0, r1, r2, r3}
 8004f7a:	b507      	push	{r0, r1, r2, lr}
 8004f7c:	4906      	ldr	r1, [pc, #24]	@ (8004f98 <iprintf+0x20>)
 8004f7e:	ab04      	add	r3, sp, #16
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f86:	6881      	ldr	r1, [r0, #8]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	f000 f93f 	bl	800520c <_vfiprintf_r>
 8004f8e:	b003      	add	sp, #12
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	b004      	add	sp, #16
 8004f96:	4770      	bx	lr
 8004f98:	20000038 	.word	0x20000038

08004f9c <_puts_r>:
 8004f9c:	6a03      	ldr	r3, [r0, #32]
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	6884      	ldr	r4, [r0, #8]
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	460e      	mov	r6, r1
 8004fa6:	b90b      	cbnz	r3, 8004fac <_puts_r+0x10>
 8004fa8:	f7ff ffb0 	bl	8004f0c <__sinit>
 8004fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fae:	07db      	lsls	r3, r3, #31
 8004fb0:	d405      	bmi.n	8004fbe <_puts_r+0x22>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	0598      	lsls	r0, r3, #22
 8004fb6:	d402      	bmi.n	8004fbe <_puts_r+0x22>
 8004fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fba:	f000 f8dc 	bl	8005176 <__retarget_lock_acquire_recursive>
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	0719      	lsls	r1, r3, #28
 8004fc2:	d502      	bpl.n	8004fca <_puts_r+0x2e>
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d135      	bne.n	8005036 <_puts_r+0x9a>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 fdb9 	bl	8005b44 <__swsetup_r>
 8004fd2:	b380      	cbz	r0, 8005036 <_puts_r+0x9a>
 8004fd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004fd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fda:	07da      	lsls	r2, r3, #31
 8004fdc:	d405      	bmi.n	8004fea <_puts_r+0x4e>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	059b      	lsls	r3, r3, #22
 8004fe2:	d402      	bmi.n	8004fea <_puts_r+0x4e>
 8004fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fe6:	f000 f8c7 	bl	8005178 <__retarget_lock_release_recursive>
 8004fea:	4628      	mov	r0, r5
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	da04      	bge.n	8004ffc <_puts_r+0x60>
 8004ff2:	69a2      	ldr	r2, [r4, #24]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	dc17      	bgt.n	8005028 <_puts_r+0x8c>
 8004ff8:	290a      	cmp	r1, #10
 8004ffa:	d015      	beq.n	8005028 <_puts_r+0x8c>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	6022      	str	r2, [r4, #0]
 8005002:	7019      	strb	r1, [r3, #0]
 8005004:	68a3      	ldr	r3, [r4, #8]
 8005006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800500a:	3b01      	subs	r3, #1
 800500c:	60a3      	str	r3, [r4, #8]
 800500e:	2900      	cmp	r1, #0
 8005010:	d1ed      	bne.n	8004fee <_puts_r+0x52>
 8005012:	2b00      	cmp	r3, #0
 8005014:	da11      	bge.n	800503a <_puts_r+0x9e>
 8005016:	4622      	mov	r2, r4
 8005018:	210a      	movs	r1, #10
 800501a:	4628      	mov	r0, r5
 800501c:	f000 fd54 	bl	8005ac8 <__swbuf_r>
 8005020:	3001      	adds	r0, #1
 8005022:	d0d7      	beq.n	8004fd4 <_puts_r+0x38>
 8005024:	250a      	movs	r5, #10
 8005026:	e7d7      	b.n	8004fd8 <_puts_r+0x3c>
 8005028:	4622      	mov	r2, r4
 800502a:	4628      	mov	r0, r5
 800502c:	f000 fd4c 	bl	8005ac8 <__swbuf_r>
 8005030:	3001      	adds	r0, #1
 8005032:	d1e7      	bne.n	8005004 <_puts_r+0x68>
 8005034:	e7ce      	b.n	8004fd4 <_puts_r+0x38>
 8005036:	3e01      	subs	r6, #1
 8005038:	e7e4      	b.n	8005004 <_puts_r+0x68>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	6022      	str	r2, [r4, #0]
 8005040:	220a      	movs	r2, #10
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e7ee      	b.n	8005024 <_puts_r+0x88>
	...

08005048 <puts>:
 8005048:	4b02      	ldr	r3, [pc, #8]	@ (8005054 <puts+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f7ff bfa5 	b.w	8004f9c <_puts_r>
 8005052:	bf00      	nop
 8005054:	20000038 	.word	0x20000038

08005058 <strtok>:
 8005058:	4b16      	ldr	r3, [pc, #88]	@ (80050b4 <strtok+0x5c>)
 800505a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505e:	681f      	ldr	r7, [r3, #0]
 8005060:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005062:	4605      	mov	r5, r0
 8005064:	460e      	mov	r6, r1
 8005066:	b9ec      	cbnz	r4, 80050a4 <strtok+0x4c>
 8005068:	2050      	movs	r0, #80	@ 0x50
 800506a:	f000 f9e7 	bl	800543c <malloc>
 800506e:	4602      	mov	r2, r0
 8005070:	6478      	str	r0, [r7, #68]	@ 0x44
 8005072:	b920      	cbnz	r0, 800507e <strtok+0x26>
 8005074:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <strtok+0x60>)
 8005076:	4811      	ldr	r0, [pc, #68]	@ (80050bc <strtok+0x64>)
 8005078:	215b      	movs	r1, #91	@ 0x5b
 800507a:	f000 f87f 	bl	800517c <__assert_func>
 800507e:	e9c0 4400 	strd	r4, r4, [r0]
 8005082:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005086:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800508a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800508e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005092:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005096:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800509a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800509e:	6184      	str	r4, [r0, #24]
 80050a0:	7704      	strb	r4, [r0, #28]
 80050a2:	6244      	str	r4, [r0, #36]	@ 0x24
 80050a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	2301      	movs	r3, #1
 80050ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	f000 b806 	b.w	80050c0 <__strtok_r>
 80050b4:	20000038 	.word	0x20000038
 80050b8:	08006138 	.word	0x08006138
 80050bc:	0800614f 	.word	0x0800614f

080050c0 <__strtok_r>:
 80050c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c2:	4604      	mov	r4, r0
 80050c4:	b908      	cbnz	r0, 80050ca <__strtok_r+0xa>
 80050c6:	6814      	ldr	r4, [r2, #0]
 80050c8:	b144      	cbz	r4, 80050dc <__strtok_r+0x1c>
 80050ca:	4620      	mov	r0, r4
 80050cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80050d0:	460f      	mov	r7, r1
 80050d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80050d6:	b91e      	cbnz	r6, 80050e0 <__strtok_r+0x20>
 80050d8:	b965      	cbnz	r5, 80050f4 <__strtok_r+0x34>
 80050da:	6015      	str	r5, [r2, #0]
 80050dc:	2000      	movs	r0, #0
 80050de:	e005      	b.n	80050ec <__strtok_r+0x2c>
 80050e0:	42b5      	cmp	r5, r6
 80050e2:	d1f6      	bne.n	80050d2 <__strtok_r+0x12>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <__strtok_r+0xa>
 80050e8:	6014      	str	r4, [r2, #0]
 80050ea:	7003      	strb	r3, [r0, #0]
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ee:	461c      	mov	r4, r3
 80050f0:	e00c      	b.n	800510c <__strtok_r+0x4c>
 80050f2:	b915      	cbnz	r5, 80050fa <__strtok_r+0x3a>
 80050f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050f8:	460e      	mov	r6, r1
 80050fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80050fe:	42ab      	cmp	r3, r5
 8005100:	d1f7      	bne.n	80050f2 <__strtok_r+0x32>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f3      	beq.n	80050ee <__strtok_r+0x2e>
 8005106:	2300      	movs	r3, #0
 8005108:	f804 3c01 	strb.w	r3, [r4, #-1]
 800510c:	6014      	str	r4, [r2, #0]
 800510e:	e7ed      	b.n	80050ec <__strtok_r+0x2c>

08005110 <memset>:
 8005110:	4402      	add	r2, r0
 8005112:	4603      	mov	r3, r0
 8005114:	4293      	cmp	r3, r2
 8005116:	d100      	bne.n	800511a <memset+0xa>
 8005118:	4770      	bx	lr
 800511a:	f803 1b01 	strb.w	r1, [r3], #1
 800511e:	e7f9      	b.n	8005114 <memset+0x4>

08005120 <__errno>:
 8005120:	4b01      	ldr	r3, [pc, #4]	@ (8005128 <__errno+0x8>)
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000038 	.word	0x20000038

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4d0d      	ldr	r5, [pc, #52]	@ (8005164 <__libc_init_array+0x38>)
 8005130:	4c0d      	ldr	r4, [pc, #52]	@ (8005168 <__libc_init_array+0x3c>)
 8005132:	1b64      	subs	r4, r4, r5
 8005134:	10a4      	asrs	r4, r4, #2
 8005136:	2600      	movs	r6, #0
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	4d0b      	ldr	r5, [pc, #44]	@ (800516c <__libc_init_array+0x40>)
 800513e:	4c0c      	ldr	r4, [pc, #48]	@ (8005170 <__libc_init_array+0x44>)
 8005140:	f000 fec6 	bl	8005ed0 <_init>
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	2600      	movs	r6, #0
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	f855 3b04 	ldr.w	r3, [r5], #4
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	f855 3b04 	ldr.w	r3, [r5], #4
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	08006220 	.word	0x08006220
 8005168:	08006220 	.word	0x08006220
 800516c:	08006220 	.word	0x08006220
 8005170:	08006224 	.word	0x08006224

08005174 <__retarget_lock_init_recursive>:
 8005174:	4770      	bx	lr

08005176 <__retarget_lock_acquire_recursive>:
 8005176:	4770      	bx	lr

08005178 <__retarget_lock_release_recursive>:
 8005178:	4770      	bx	lr
	...

0800517c <__assert_func>:
 800517c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800517e:	4614      	mov	r4, r2
 8005180:	461a      	mov	r2, r3
 8005182:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <__assert_func+0x2c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4605      	mov	r5, r0
 8005188:	68d8      	ldr	r0, [r3, #12]
 800518a:	b954      	cbnz	r4, 80051a2 <__assert_func+0x26>
 800518c:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <__assert_func+0x30>)
 800518e:	461c      	mov	r4, r3
 8005190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005194:	9100      	str	r1, [sp, #0]
 8005196:	462b      	mov	r3, r5
 8005198:	4905      	ldr	r1, [pc, #20]	@ (80051b0 <__assert_func+0x34>)
 800519a:	f000 fc83 	bl	8005aa4 <fiprintf>
 800519e:	f000 fe01 	bl	8005da4 <abort>
 80051a2:	4b04      	ldr	r3, [pc, #16]	@ (80051b4 <__assert_func+0x38>)
 80051a4:	e7f4      	b.n	8005190 <__assert_func+0x14>
 80051a6:	bf00      	nop
 80051a8:	20000038 	.word	0x20000038
 80051ac:	080061e4 	.word	0x080061e4
 80051b0:	080061b6 	.word	0x080061b6
 80051b4:	080061a9 	.word	0x080061a9

080051b8 <__sfputc_r>:
 80051b8:	6893      	ldr	r3, [r2, #8]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	b410      	push	{r4}
 80051c0:	6093      	str	r3, [r2, #8]
 80051c2:	da08      	bge.n	80051d6 <__sfputc_r+0x1e>
 80051c4:	6994      	ldr	r4, [r2, #24]
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	db01      	blt.n	80051ce <__sfputc_r+0x16>
 80051ca:	290a      	cmp	r1, #10
 80051cc:	d103      	bne.n	80051d6 <__sfputc_r+0x1e>
 80051ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051d2:	f000 bc79 	b.w	8005ac8 <__swbuf_r>
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	1c58      	adds	r0, r3, #1
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	7019      	strb	r1, [r3, #0]
 80051de:	4608      	mov	r0, r1
 80051e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <__sfputs_r>:
 80051e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e8:	4606      	mov	r6, r0
 80051ea:	460f      	mov	r7, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	18d5      	adds	r5, r2, r3
 80051f0:	42ac      	cmp	r4, r5
 80051f2:	d101      	bne.n	80051f8 <__sfputs_r+0x12>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e007      	b.n	8005208 <__sfputs_r+0x22>
 80051f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051fc:	463a      	mov	r2, r7
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff ffda 	bl	80051b8 <__sfputc_r>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d1f3      	bne.n	80051f0 <__sfputs_r+0xa>
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800520c <_vfiprintf_r>:
 800520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	460d      	mov	r5, r1
 8005212:	b09d      	sub	sp, #116	@ 0x74
 8005214:	4614      	mov	r4, r2
 8005216:	4698      	mov	r8, r3
 8005218:	4606      	mov	r6, r0
 800521a:	b118      	cbz	r0, 8005224 <_vfiprintf_r+0x18>
 800521c:	6a03      	ldr	r3, [r0, #32]
 800521e:	b90b      	cbnz	r3, 8005224 <_vfiprintf_r+0x18>
 8005220:	f7ff fe74 	bl	8004f0c <__sinit>
 8005224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	d405      	bmi.n	8005236 <_vfiprintf_r+0x2a>
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	059a      	lsls	r2, r3, #22
 800522e:	d402      	bmi.n	8005236 <_vfiprintf_r+0x2a>
 8005230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005232:	f7ff ffa0 	bl	8005176 <__retarget_lock_acquire_recursive>
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	071b      	lsls	r3, r3, #28
 800523a:	d501      	bpl.n	8005240 <_vfiprintf_r+0x34>
 800523c:	692b      	ldr	r3, [r5, #16]
 800523e:	b99b      	cbnz	r3, 8005268 <_vfiprintf_r+0x5c>
 8005240:	4629      	mov	r1, r5
 8005242:	4630      	mov	r0, r6
 8005244:	f000 fc7e 	bl	8005b44 <__swsetup_r>
 8005248:	b170      	cbz	r0, 8005268 <_vfiprintf_r+0x5c>
 800524a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800524c:	07dc      	lsls	r4, r3, #31
 800524e:	d504      	bpl.n	800525a <_vfiprintf_r+0x4e>
 8005250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005254:	b01d      	add	sp, #116	@ 0x74
 8005256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	89ab      	ldrh	r3, [r5, #12]
 800525c:	0598      	lsls	r0, r3, #22
 800525e:	d4f7      	bmi.n	8005250 <_vfiprintf_r+0x44>
 8005260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005262:	f7ff ff89 	bl	8005178 <__retarget_lock_release_recursive>
 8005266:	e7f3      	b.n	8005250 <_vfiprintf_r+0x44>
 8005268:	2300      	movs	r3, #0
 800526a:	9309      	str	r3, [sp, #36]	@ 0x24
 800526c:	2320      	movs	r3, #32
 800526e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005272:	f8cd 800c 	str.w	r8, [sp, #12]
 8005276:	2330      	movs	r3, #48	@ 0x30
 8005278:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005428 <_vfiprintf_r+0x21c>
 800527c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005280:	f04f 0901 	mov.w	r9, #1
 8005284:	4623      	mov	r3, r4
 8005286:	469a      	mov	sl, r3
 8005288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800528c:	b10a      	cbz	r2, 8005292 <_vfiprintf_r+0x86>
 800528e:	2a25      	cmp	r2, #37	@ 0x25
 8005290:	d1f9      	bne.n	8005286 <_vfiprintf_r+0x7a>
 8005292:	ebba 0b04 	subs.w	fp, sl, r4
 8005296:	d00b      	beq.n	80052b0 <_vfiprintf_r+0xa4>
 8005298:	465b      	mov	r3, fp
 800529a:	4622      	mov	r2, r4
 800529c:	4629      	mov	r1, r5
 800529e:	4630      	mov	r0, r6
 80052a0:	f7ff ffa1 	bl	80051e6 <__sfputs_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	f000 80a7 	beq.w	80053f8 <_vfiprintf_r+0x1ec>
 80052aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052ac:	445a      	add	r2, fp
 80052ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80052b0:	f89a 3000 	ldrb.w	r3, [sl]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 809f 	beq.w	80053f8 <_vfiprintf_r+0x1ec>
 80052ba:	2300      	movs	r3, #0
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052c4:	f10a 0a01 	add.w	sl, sl, #1
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	9307      	str	r3, [sp, #28]
 80052cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80052d2:	4654      	mov	r4, sl
 80052d4:	2205      	movs	r2, #5
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	4853      	ldr	r0, [pc, #332]	@ (8005428 <_vfiprintf_r+0x21c>)
 80052dc:	f7fa ff98 	bl	8000210 <memchr>
 80052e0:	9a04      	ldr	r2, [sp, #16]
 80052e2:	b9d8      	cbnz	r0, 800531c <_vfiprintf_r+0x110>
 80052e4:	06d1      	lsls	r1, r2, #27
 80052e6:	bf44      	itt	mi
 80052e8:	2320      	movmi	r3, #32
 80052ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ee:	0713      	lsls	r3, r2, #28
 80052f0:	bf44      	itt	mi
 80052f2:	232b      	movmi	r3, #43	@ 0x2b
 80052f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052f8:	f89a 3000 	ldrb.w	r3, [sl]
 80052fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052fe:	d015      	beq.n	800532c <_vfiprintf_r+0x120>
 8005300:	9a07      	ldr	r2, [sp, #28]
 8005302:	4654      	mov	r4, sl
 8005304:	2000      	movs	r0, #0
 8005306:	f04f 0c0a 	mov.w	ip, #10
 800530a:	4621      	mov	r1, r4
 800530c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005310:	3b30      	subs	r3, #48	@ 0x30
 8005312:	2b09      	cmp	r3, #9
 8005314:	d94b      	bls.n	80053ae <_vfiprintf_r+0x1a2>
 8005316:	b1b0      	cbz	r0, 8005346 <_vfiprintf_r+0x13a>
 8005318:	9207      	str	r2, [sp, #28]
 800531a:	e014      	b.n	8005346 <_vfiprintf_r+0x13a>
 800531c:	eba0 0308 	sub.w	r3, r0, r8
 8005320:	fa09 f303 	lsl.w	r3, r9, r3
 8005324:	4313      	orrs	r3, r2
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	46a2      	mov	sl, r4
 800532a:	e7d2      	b.n	80052d2 <_vfiprintf_r+0xc6>
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	1d19      	adds	r1, r3, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	9103      	str	r1, [sp, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	bfbb      	ittet	lt
 8005338:	425b      	neglt	r3, r3
 800533a:	f042 0202 	orrlt.w	r2, r2, #2
 800533e:	9307      	strge	r3, [sp, #28]
 8005340:	9307      	strlt	r3, [sp, #28]
 8005342:	bfb8      	it	lt
 8005344:	9204      	strlt	r2, [sp, #16]
 8005346:	7823      	ldrb	r3, [r4, #0]
 8005348:	2b2e      	cmp	r3, #46	@ 0x2e
 800534a:	d10a      	bne.n	8005362 <_vfiprintf_r+0x156>
 800534c:	7863      	ldrb	r3, [r4, #1]
 800534e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005350:	d132      	bne.n	80053b8 <_vfiprintf_r+0x1ac>
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	9203      	str	r2, [sp, #12]
 800535a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800535e:	3402      	adds	r4, #2
 8005360:	9305      	str	r3, [sp, #20]
 8005362:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005438 <_vfiprintf_r+0x22c>
 8005366:	7821      	ldrb	r1, [r4, #0]
 8005368:	2203      	movs	r2, #3
 800536a:	4650      	mov	r0, sl
 800536c:	f7fa ff50 	bl	8000210 <memchr>
 8005370:	b138      	cbz	r0, 8005382 <_vfiprintf_r+0x176>
 8005372:	9b04      	ldr	r3, [sp, #16]
 8005374:	eba0 000a 	sub.w	r0, r0, sl
 8005378:	2240      	movs	r2, #64	@ 0x40
 800537a:	4082      	lsls	r2, r0
 800537c:	4313      	orrs	r3, r2
 800537e:	3401      	adds	r4, #1
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005386:	4829      	ldr	r0, [pc, #164]	@ (800542c <_vfiprintf_r+0x220>)
 8005388:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800538c:	2206      	movs	r2, #6
 800538e:	f7fa ff3f 	bl	8000210 <memchr>
 8005392:	2800      	cmp	r0, #0
 8005394:	d03f      	beq.n	8005416 <_vfiprintf_r+0x20a>
 8005396:	4b26      	ldr	r3, [pc, #152]	@ (8005430 <_vfiprintf_r+0x224>)
 8005398:	bb1b      	cbnz	r3, 80053e2 <_vfiprintf_r+0x1d6>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	3307      	adds	r3, #7
 800539e:	f023 0307 	bic.w	r3, r3, #7
 80053a2:	3308      	adds	r3, #8
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a8:	443b      	add	r3, r7
 80053aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ac:	e76a      	b.n	8005284 <_vfiprintf_r+0x78>
 80053ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80053b2:	460c      	mov	r4, r1
 80053b4:	2001      	movs	r0, #1
 80053b6:	e7a8      	b.n	800530a <_vfiprintf_r+0xfe>
 80053b8:	2300      	movs	r3, #0
 80053ba:	3401      	adds	r4, #1
 80053bc:	9305      	str	r3, [sp, #20]
 80053be:	4619      	mov	r1, r3
 80053c0:	f04f 0c0a 	mov.w	ip, #10
 80053c4:	4620      	mov	r0, r4
 80053c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ca:	3a30      	subs	r2, #48	@ 0x30
 80053cc:	2a09      	cmp	r2, #9
 80053ce:	d903      	bls.n	80053d8 <_vfiprintf_r+0x1cc>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0c6      	beq.n	8005362 <_vfiprintf_r+0x156>
 80053d4:	9105      	str	r1, [sp, #20]
 80053d6:	e7c4      	b.n	8005362 <_vfiprintf_r+0x156>
 80053d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053dc:	4604      	mov	r4, r0
 80053de:	2301      	movs	r3, #1
 80053e0:	e7f0      	b.n	80053c4 <_vfiprintf_r+0x1b8>
 80053e2:	ab03      	add	r3, sp, #12
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	462a      	mov	r2, r5
 80053e8:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <_vfiprintf_r+0x228>)
 80053ea:	a904      	add	r1, sp, #16
 80053ec:	4630      	mov	r0, r6
 80053ee:	f3af 8000 	nop.w
 80053f2:	4607      	mov	r7, r0
 80053f4:	1c78      	adds	r0, r7, #1
 80053f6:	d1d6      	bne.n	80053a6 <_vfiprintf_r+0x19a>
 80053f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053fa:	07d9      	lsls	r1, r3, #31
 80053fc:	d405      	bmi.n	800540a <_vfiprintf_r+0x1fe>
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	059a      	lsls	r2, r3, #22
 8005402:	d402      	bmi.n	800540a <_vfiprintf_r+0x1fe>
 8005404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005406:	f7ff feb7 	bl	8005178 <__retarget_lock_release_recursive>
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	065b      	lsls	r3, r3, #25
 800540e:	f53f af1f 	bmi.w	8005250 <_vfiprintf_r+0x44>
 8005412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005414:	e71e      	b.n	8005254 <_vfiprintf_r+0x48>
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	462a      	mov	r2, r5
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <_vfiprintf_r+0x228>)
 800541e:	a904      	add	r1, sp, #16
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f923 	bl	800566c <_printf_i>
 8005426:	e7e4      	b.n	80053f2 <_vfiprintf_r+0x1e6>
 8005428:	080061e5 	.word	0x080061e5
 800542c:	080061ef 	.word	0x080061ef
 8005430:	00000000 	.word	0x00000000
 8005434:	080051e7 	.word	0x080051e7
 8005438:	080061eb 	.word	0x080061eb

0800543c <malloc>:
 800543c:	4b02      	ldr	r3, [pc, #8]	@ (8005448 <malloc+0xc>)
 800543e:	4601      	mov	r1, r0
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f000 b825 	b.w	8005490 <_malloc_r>
 8005446:	bf00      	nop
 8005448:	20000038 	.word	0x20000038

0800544c <sbrk_aligned>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4e0f      	ldr	r6, [pc, #60]	@ (800548c <sbrk_aligned+0x40>)
 8005450:	460c      	mov	r4, r1
 8005452:	6831      	ldr	r1, [r6, #0]
 8005454:	4605      	mov	r5, r0
 8005456:	b911      	cbnz	r1, 800545e <sbrk_aligned+0x12>
 8005458:	f000 fc82 	bl	8005d60 <_sbrk_r>
 800545c:	6030      	str	r0, [r6, #0]
 800545e:	4621      	mov	r1, r4
 8005460:	4628      	mov	r0, r5
 8005462:	f000 fc7d 	bl	8005d60 <_sbrk_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d103      	bne.n	8005472 <sbrk_aligned+0x26>
 800546a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800546e:	4620      	mov	r0, r4
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	1cc4      	adds	r4, r0, #3
 8005474:	f024 0403 	bic.w	r4, r4, #3
 8005478:	42a0      	cmp	r0, r4
 800547a:	d0f8      	beq.n	800546e <sbrk_aligned+0x22>
 800547c:	1a21      	subs	r1, r4, r0
 800547e:	4628      	mov	r0, r5
 8005480:	f000 fc6e 	bl	8005d60 <_sbrk_r>
 8005484:	3001      	adds	r0, #1
 8005486:	d1f2      	bne.n	800546e <sbrk_aligned+0x22>
 8005488:	e7ef      	b.n	800546a <sbrk_aligned+0x1e>
 800548a:	bf00      	nop
 800548c:	20000374 	.word	0x20000374

08005490 <_malloc_r>:
 8005490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005494:	1ccd      	adds	r5, r1, #3
 8005496:	f025 0503 	bic.w	r5, r5, #3
 800549a:	3508      	adds	r5, #8
 800549c:	2d0c      	cmp	r5, #12
 800549e:	bf38      	it	cc
 80054a0:	250c      	movcc	r5, #12
 80054a2:	2d00      	cmp	r5, #0
 80054a4:	4606      	mov	r6, r0
 80054a6:	db01      	blt.n	80054ac <_malloc_r+0x1c>
 80054a8:	42a9      	cmp	r1, r5
 80054aa:	d904      	bls.n	80054b6 <_malloc_r+0x26>
 80054ac:	230c      	movs	r3, #12
 80054ae:	6033      	str	r3, [r6, #0]
 80054b0:	2000      	movs	r0, #0
 80054b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800558c <_malloc_r+0xfc>
 80054ba:	f000 faa3 	bl	8005a04 <__malloc_lock>
 80054be:	f8d8 3000 	ldr.w	r3, [r8]
 80054c2:	461c      	mov	r4, r3
 80054c4:	bb44      	cbnz	r4, 8005518 <_malloc_r+0x88>
 80054c6:	4629      	mov	r1, r5
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7ff ffbf 	bl	800544c <sbrk_aligned>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	4604      	mov	r4, r0
 80054d2:	d158      	bne.n	8005586 <_malloc_r+0xf6>
 80054d4:	f8d8 4000 	ldr.w	r4, [r8]
 80054d8:	4627      	mov	r7, r4
 80054da:	2f00      	cmp	r7, #0
 80054dc:	d143      	bne.n	8005566 <_malloc_r+0xd6>
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d04b      	beq.n	800557a <_malloc_r+0xea>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	4639      	mov	r1, r7
 80054e6:	4630      	mov	r0, r6
 80054e8:	eb04 0903 	add.w	r9, r4, r3
 80054ec:	f000 fc38 	bl	8005d60 <_sbrk_r>
 80054f0:	4581      	cmp	r9, r0
 80054f2:	d142      	bne.n	800557a <_malloc_r+0xea>
 80054f4:	6821      	ldr	r1, [r4, #0]
 80054f6:	1a6d      	subs	r5, r5, r1
 80054f8:	4629      	mov	r1, r5
 80054fa:	4630      	mov	r0, r6
 80054fc:	f7ff ffa6 	bl	800544c <sbrk_aligned>
 8005500:	3001      	adds	r0, #1
 8005502:	d03a      	beq.n	800557a <_malloc_r+0xea>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	442b      	add	r3, r5
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	f8d8 3000 	ldr.w	r3, [r8]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	bb62      	cbnz	r2, 800556c <_malloc_r+0xdc>
 8005512:	f8c8 7000 	str.w	r7, [r8]
 8005516:	e00f      	b.n	8005538 <_malloc_r+0xa8>
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	1b52      	subs	r2, r2, r5
 800551c:	d420      	bmi.n	8005560 <_malloc_r+0xd0>
 800551e:	2a0b      	cmp	r2, #11
 8005520:	d917      	bls.n	8005552 <_malloc_r+0xc2>
 8005522:	1961      	adds	r1, r4, r5
 8005524:	42a3      	cmp	r3, r4
 8005526:	6025      	str	r5, [r4, #0]
 8005528:	bf18      	it	ne
 800552a:	6059      	strne	r1, [r3, #4]
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	bf08      	it	eq
 8005530:	f8c8 1000 	streq.w	r1, [r8]
 8005534:	5162      	str	r2, [r4, r5]
 8005536:	604b      	str	r3, [r1, #4]
 8005538:	4630      	mov	r0, r6
 800553a:	f000 fa69 	bl	8005a10 <__malloc_unlock>
 800553e:	f104 000b 	add.w	r0, r4, #11
 8005542:	1d23      	adds	r3, r4, #4
 8005544:	f020 0007 	bic.w	r0, r0, #7
 8005548:	1ac2      	subs	r2, r0, r3
 800554a:	bf1c      	itt	ne
 800554c:	1a1b      	subne	r3, r3, r0
 800554e:	50a3      	strne	r3, [r4, r2]
 8005550:	e7af      	b.n	80054b2 <_malloc_r+0x22>
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	42a3      	cmp	r3, r4
 8005556:	bf0c      	ite	eq
 8005558:	f8c8 2000 	streq.w	r2, [r8]
 800555c:	605a      	strne	r2, [r3, #4]
 800555e:	e7eb      	b.n	8005538 <_malloc_r+0xa8>
 8005560:	4623      	mov	r3, r4
 8005562:	6864      	ldr	r4, [r4, #4]
 8005564:	e7ae      	b.n	80054c4 <_malloc_r+0x34>
 8005566:	463c      	mov	r4, r7
 8005568:	687f      	ldr	r7, [r7, #4]
 800556a:	e7b6      	b.n	80054da <_malloc_r+0x4a>
 800556c:	461a      	mov	r2, r3
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	42a3      	cmp	r3, r4
 8005572:	d1fb      	bne.n	800556c <_malloc_r+0xdc>
 8005574:	2300      	movs	r3, #0
 8005576:	6053      	str	r3, [r2, #4]
 8005578:	e7de      	b.n	8005538 <_malloc_r+0xa8>
 800557a:	230c      	movs	r3, #12
 800557c:	6033      	str	r3, [r6, #0]
 800557e:	4630      	mov	r0, r6
 8005580:	f000 fa46 	bl	8005a10 <__malloc_unlock>
 8005584:	e794      	b.n	80054b0 <_malloc_r+0x20>
 8005586:	6005      	str	r5, [r0, #0]
 8005588:	e7d6      	b.n	8005538 <_malloc_r+0xa8>
 800558a:	bf00      	nop
 800558c:	20000378 	.word	0x20000378

08005590 <_printf_common>:
 8005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	4616      	mov	r6, r2
 8005596:	4698      	mov	r8, r3
 8005598:	688a      	ldr	r2, [r1, #8]
 800559a:	690b      	ldr	r3, [r1, #16]
 800559c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055a0:	4293      	cmp	r3, r2
 80055a2:	bfb8      	it	lt
 80055a4:	4613      	movlt	r3, r2
 80055a6:	6033      	str	r3, [r6, #0]
 80055a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055ac:	4607      	mov	r7, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	b10a      	cbz	r2, 80055b6 <_printf_common+0x26>
 80055b2:	3301      	adds	r3, #1
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	0699      	lsls	r1, r3, #26
 80055ba:	bf42      	ittt	mi
 80055bc:	6833      	ldrmi	r3, [r6, #0]
 80055be:	3302      	addmi	r3, #2
 80055c0:	6033      	strmi	r3, [r6, #0]
 80055c2:	6825      	ldr	r5, [r4, #0]
 80055c4:	f015 0506 	ands.w	r5, r5, #6
 80055c8:	d106      	bne.n	80055d8 <_printf_common+0x48>
 80055ca:	f104 0a19 	add.w	sl, r4, #25
 80055ce:	68e3      	ldr	r3, [r4, #12]
 80055d0:	6832      	ldr	r2, [r6, #0]
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	42ab      	cmp	r3, r5
 80055d6:	dc26      	bgt.n	8005626 <_printf_common+0x96>
 80055d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055dc:	6822      	ldr	r2, [r4, #0]
 80055de:	3b00      	subs	r3, #0
 80055e0:	bf18      	it	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	0692      	lsls	r2, r2, #26
 80055e6:	d42b      	bmi.n	8005640 <_printf_common+0xb0>
 80055e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055ec:	4641      	mov	r1, r8
 80055ee:	4638      	mov	r0, r7
 80055f0:	47c8      	blx	r9
 80055f2:	3001      	adds	r0, #1
 80055f4:	d01e      	beq.n	8005634 <_printf_common+0xa4>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	6922      	ldr	r2, [r4, #16]
 80055fa:	f003 0306 	and.w	r3, r3, #6
 80055fe:	2b04      	cmp	r3, #4
 8005600:	bf02      	ittt	eq
 8005602:	68e5      	ldreq	r5, [r4, #12]
 8005604:	6833      	ldreq	r3, [r6, #0]
 8005606:	1aed      	subeq	r5, r5, r3
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	bf0c      	ite	eq
 800560c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005610:	2500      	movne	r5, #0
 8005612:	4293      	cmp	r3, r2
 8005614:	bfc4      	itt	gt
 8005616:	1a9b      	subgt	r3, r3, r2
 8005618:	18ed      	addgt	r5, r5, r3
 800561a:	2600      	movs	r6, #0
 800561c:	341a      	adds	r4, #26
 800561e:	42b5      	cmp	r5, r6
 8005620:	d11a      	bne.n	8005658 <_printf_common+0xc8>
 8005622:	2000      	movs	r0, #0
 8005624:	e008      	b.n	8005638 <_printf_common+0xa8>
 8005626:	2301      	movs	r3, #1
 8005628:	4652      	mov	r2, sl
 800562a:	4641      	mov	r1, r8
 800562c:	4638      	mov	r0, r7
 800562e:	47c8      	blx	r9
 8005630:	3001      	adds	r0, #1
 8005632:	d103      	bne.n	800563c <_printf_common+0xac>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563c:	3501      	adds	r5, #1
 800563e:	e7c6      	b.n	80055ce <_printf_common+0x3e>
 8005640:	18e1      	adds	r1, r4, r3
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	2030      	movs	r0, #48	@ 0x30
 8005646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800564a:	4422      	add	r2, r4
 800564c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005654:	3302      	adds	r3, #2
 8005656:	e7c7      	b.n	80055e8 <_printf_common+0x58>
 8005658:	2301      	movs	r3, #1
 800565a:	4622      	mov	r2, r4
 800565c:	4641      	mov	r1, r8
 800565e:	4638      	mov	r0, r7
 8005660:	47c8      	blx	r9
 8005662:	3001      	adds	r0, #1
 8005664:	d0e6      	beq.n	8005634 <_printf_common+0xa4>
 8005666:	3601      	adds	r6, #1
 8005668:	e7d9      	b.n	800561e <_printf_common+0x8e>
	...

0800566c <_printf_i>:
 800566c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005670:	7e0f      	ldrb	r7, [r1, #24]
 8005672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005674:	2f78      	cmp	r7, #120	@ 0x78
 8005676:	4691      	mov	r9, r2
 8005678:	4680      	mov	r8, r0
 800567a:	460c      	mov	r4, r1
 800567c:	469a      	mov	sl, r3
 800567e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005682:	d807      	bhi.n	8005694 <_printf_i+0x28>
 8005684:	2f62      	cmp	r7, #98	@ 0x62
 8005686:	d80a      	bhi.n	800569e <_printf_i+0x32>
 8005688:	2f00      	cmp	r7, #0
 800568a:	f000 80d2 	beq.w	8005832 <_printf_i+0x1c6>
 800568e:	2f58      	cmp	r7, #88	@ 0x58
 8005690:	f000 80b9 	beq.w	8005806 <_printf_i+0x19a>
 8005694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800569c:	e03a      	b.n	8005714 <_printf_i+0xa8>
 800569e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056a2:	2b15      	cmp	r3, #21
 80056a4:	d8f6      	bhi.n	8005694 <_printf_i+0x28>
 80056a6:	a101      	add	r1, pc, #4	@ (adr r1, 80056ac <_printf_i+0x40>)
 80056a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056ac:	08005705 	.word	0x08005705
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005695 	.word	0x08005695
 80056b8:	08005695 	.word	0x08005695
 80056bc:	08005695 	.word	0x08005695
 80056c0:	08005695 	.word	0x08005695
 80056c4:	08005719 	.word	0x08005719
 80056c8:	08005695 	.word	0x08005695
 80056cc:	08005695 	.word	0x08005695
 80056d0:	08005695 	.word	0x08005695
 80056d4:	08005695 	.word	0x08005695
 80056d8:	08005819 	.word	0x08005819
 80056dc:	08005743 	.word	0x08005743
 80056e0:	080057d3 	.word	0x080057d3
 80056e4:	08005695 	.word	0x08005695
 80056e8:	08005695 	.word	0x08005695
 80056ec:	0800583b 	.word	0x0800583b
 80056f0:	08005695 	.word	0x08005695
 80056f4:	08005743 	.word	0x08005743
 80056f8:	08005695 	.word	0x08005695
 80056fc:	08005695 	.word	0x08005695
 8005700:	080057db 	.word	0x080057db
 8005704:	6833      	ldr	r3, [r6, #0]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6032      	str	r2, [r6, #0]
 800570c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005714:	2301      	movs	r3, #1
 8005716:	e09d      	b.n	8005854 <_printf_i+0x1e8>
 8005718:	6833      	ldr	r3, [r6, #0]
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	1d19      	adds	r1, r3, #4
 800571e:	6031      	str	r1, [r6, #0]
 8005720:	0606      	lsls	r6, r0, #24
 8005722:	d501      	bpl.n	8005728 <_printf_i+0xbc>
 8005724:	681d      	ldr	r5, [r3, #0]
 8005726:	e003      	b.n	8005730 <_printf_i+0xc4>
 8005728:	0645      	lsls	r5, r0, #25
 800572a:	d5fb      	bpl.n	8005724 <_printf_i+0xb8>
 800572c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005730:	2d00      	cmp	r5, #0
 8005732:	da03      	bge.n	800573c <_printf_i+0xd0>
 8005734:	232d      	movs	r3, #45	@ 0x2d
 8005736:	426d      	negs	r5, r5
 8005738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800573c:	4859      	ldr	r0, [pc, #356]	@ (80058a4 <_printf_i+0x238>)
 800573e:	230a      	movs	r3, #10
 8005740:	e011      	b.n	8005766 <_printf_i+0xfa>
 8005742:	6821      	ldr	r1, [r4, #0]
 8005744:	6833      	ldr	r3, [r6, #0]
 8005746:	0608      	lsls	r0, r1, #24
 8005748:	f853 5b04 	ldr.w	r5, [r3], #4
 800574c:	d402      	bmi.n	8005754 <_printf_i+0xe8>
 800574e:	0649      	lsls	r1, r1, #25
 8005750:	bf48      	it	mi
 8005752:	b2ad      	uxthmi	r5, r5
 8005754:	2f6f      	cmp	r7, #111	@ 0x6f
 8005756:	4853      	ldr	r0, [pc, #332]	@ (80058a4 <_printf_i+0x238>)
 8005758:	6033      	str	r3, [r6, #0]
 800575a:	bf14      	ite	ne
 800575c:	230a      	movne	r3, #10
 800575e:	2308      	moveq	r3, #8
 8005760:	2100      	movs	r1, #0
 8005762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005766:	6866      	ldr	r6, [r4, #4]
 8005768:	60a6      	str	r6, [r4, #8]
 800576a:	2e00      	cmp	r6, #0
 800576c:	bfa2      	ittt	ge
 800576e:	6821      	ldrge	r1, [r4, #0]
 8005770:	f021 0104 	bicge.w	r1, r1, #4
 8005774:	6021      	strge	r1, [r4, #0]
 8005776:	b90d      	cbnz	r5, 800577c <_printf_i+0x110>
 8005778:	2e00      	cmp	r6, #0
 800577a:	d04b      	beq.n	8005814 <_printf_i+0x1a8>
 800577c:	4616      	mov	r6, r2
 800577e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005782:	fb03 5711 	mls	r7, r3, r1, r5
 8005786:	5dc7      	ldrb	r7, [r0, r7]
 8005788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800578c:	462f      	mov	r7, r5
 800578e:	42bb      	cmp	r3, r7
 8005790:	460d      	mov	r5, r1
 8005792:	d9f4      	bls.n	800577e <_printf_i+0x112>
 8005794:	2b08      	cmp	r3, #8
 8005796:	d10b      	bne.n	80057b0 <_printf_i+0x144>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	07df      	lsls	r7, r3, #31
 800579c:	d508      	bpl.n	80057b0 <_printf_i+0x144>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	4299      	cmp	r1, r3
 80057a4:	bfde      	ittt	le
 80057a6:	2330      	movle	r3, #48	@ 0x30
 80057a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80057b0:	1b92      	subs	r2, r2, r6
 80057b2:	6122      	str	r2, [r4, #16]
 80057b4:	f8cd a000 	str.w	sl, [sp]
 80057b8:	464b      	mov	r3, r9
 80057ba:	aa03      	add	r2, sp, #12
 80057bc:	4621      	mov	r1, r4
 80057be:	4640      	mov	r0, r8
 80057c0:	f7ff fee6 	bl	8005590 <_printf_common>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d14a      	bne.n	800585e <_printf_i+0x1f2>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057cc:	b004      	add	sp, #16
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	4833      	ldr	r0, [pc, #204]	@ (80058a8 <_printf_i+0x23c>)
 80057dc:	2778      	movs	r7, #120	@ 0x78
 80057de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	6831      	ldr	r1, [r6, #0]
 80057e6:	061f      	lsls	r7, r3, #24
 80057e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80057ec:	d402      	bmi.n	80057f4 <_printf_i+0x188>
 80057ee:	065f      	lsls	r7, r3, #25
 80057f0:	bf48      	it	mi
 80057f2:	b2ad      	uxthmi	r5, r5
 80057f4:	6031      	str	r1, [r6, #0]
 80057f6:	07d9      	lsls	r1, r3, #31
 80057f8:	bf44      	itt	mi
 80057fa:	f043 0320 	orrmi.w	r3, r3, #32
 80057fe:	6023      	strmi	r3, [r4, #0]
 8005800:	b11d      	cbz	r5, 800580a <_printf_i+0x19e>
 8005802:	2310      	movs	r3, #16
 8005804:	e7ac      	b.n	8005760 <_printf_i+0xf4>
 8005806:	4827      	ldr	r0, [pc, #156]	@ (80058a4 <_printf_i+0x238>)
 8005808:	e7e9      	b.n	80057de <_printf_i+0x172>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f023 0320 	bic.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	e7f6      	b.n	8005802 <_printf_i+0x196>
 8005814:	4616      	mov	r6, r2
 8005816:	e7bd      	b.n	8005794 <_printf_i+0x128>
 8005818:	6833      	ldr	r3, [r6, #0]
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	6961      	ldr	r1, [r4, #20]
 800581e:	1d18      	adds	r0, r3, #4
 8005820:	6030      	str	r0, [r6, #0]
 8005822:	062e      	lsls	r6, r5, #24
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	d501      	bpl.n	800582c <_printf_i+0x1c0>
 8005828:	6019      	str	r1, [r3, #0]
 800582a:	e002      	b.n	8005832 <_printf_i+0x1c6>
 800582c:	0668      	lsls	r0, r5, #25
 800582e:	d5fb      	bpl.n	8005828 <_printf_i+0x1bc>
 8005830:	8019      	strh	r1, [r3, #0]
 8005832:	2300      	movs	r3, #0
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	4616      	mov	r6, r2
 8005838:	e7bc      	b.n	80057b4 <_printf_i+0x148>
 800583a:	6833      	ldr	r3, [r6, #0]
 800583c:	1d1a      	adds	r2, r3, #4
 800583e:	6032      	str	r2, [r6, #0]
 8005840:	681e      	ldr	r6, [r3, #0]
 8005842:	6862      	ldr	r2, [r4, #4]
 8005844:	2100      	movs	r1, #0
 8005846:	4630      	mov	r0, r6
 8005848:	f7fa fce2 	bl	8000210 <memchr>
 800584c:	b108      	cbz	r0, 8005852 <_printf_i+0x1e6>
 800584e:	1b80      	subs	r0, r0, r6
 8005850:	6060      	str	r0, [r4, #4]
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	2300      	movs	r3, #0
 8005858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800585c:	e7aa      	b.n	80057b4 <_printf_i+0x148>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	4632      	mov	r2, r6
 8005862:	4649      	mov	r1, r9
 8005864:	4640      	mov	r0, r8
 8005866:	47d0      	blx	sl
 8005868:	3001      	adds	r0, #1
 800586a:	d0ad      	beq.n	80057c8 <_printf_i+0x15c>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	079b      	lsls	r3, r3, #30
 8005870:	d413      	bmi.n	800589a <_printf_i+0x22e>
 8005872:	68e0      	ldr	r0, [r4, #12]
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	4298      	cmp	r0, r3
 8005878:	bfb8      	it	lt
 800587a:	4618      	movlt	r0, r3
 800587c:	e7a6      	b.n	80057cc <_printf_i+0x160>
 800587e:	2301      	movs	r3, #1
 8005880:	4632      	mov	r2, r6
 8005882:	4649      	mov	r1, r9
 8005884:	4640      	mov	r0, r8
 8005886:	47d0      	blx	sl
 8005888:	3001      	adds	r0, #1
 800588a:	d09d      	beq.n	80057c8 <_printf_i+0x15c>
 800588c:	3501      	adds	r5, #1
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1a5b      	subs	r3, r3, r1
 8005894:	42ab      	cmp	r3, r5
 8005896:	dcf2      	bgt.n	800587e <_printf_i+0x212>
 8005898:	e7eb      	b.n	8005872 <_printf_i+0x206>
 800589a:	2500      	movs	r5, #0
 800589c:	f104 0619 	add.w	r6, r4, #25
 80058a0:	e7f5      	b.n	800588e <_printf_i+0x222>
 80058a2:	bf00      	nop
 80058a4:	080061f6 	.word	0x080061f6
 80058a8:	08006207 	.word	0x08006207

080058ac <__sflush_r>:
 80058ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	0716      	lsls	r6, r2, #28
 80058b6:	4605      	mov	r5, r0
 80058b8:	460c      	mov	r4, r1
 80058ba:	d454      	bmi.n	8005966 <__sflush_r+0xba>
 80058bc:	684b      	ldr	r3, [r1, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dc02      	bgt.n	80058c8 <__sflush_r+0x1c>
 80058c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dd48      	ble.n	800595a <__sflush_r+0xae>
 80058c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d045      	beq.n	800595a <__sflush_r+0xae>
 80058ce:	2300      	movs	r3, #0
 80058d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80058d4:	682f      	ldr	r7, [r5, #0]
 80058d6:	6a21      	ldr	r1, [r4, #32]
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	d030      	beq.n	800593e <__sflush_r+0x92>
 80058dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	0759      	lsls	r1, r3, #29
 80058e2:	d505      	bpl.n	80058f0 <__sflush_r+0x44>
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058ea:	b10b      	cbz	r3, 80058f0 <__sflush_r+0x44>
 80058ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058f4:	6a21      	ldr	r1, [r4, #32]
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b0      	blx	r6
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	d106      	bne.n	800590e <__sflush_r+0x62>
 8005900:	6829      	ldr	r1, [r5, #0]
 8005902:	291d      	cmp	r1, #29
 8005904:	d82b      	bhi.n	800595e <__sflush_r+0xb2>
 8005906:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <__sflush_r+0x104>)
 8005908:	410a      	asrs	r2, r1
 800590a:	07d6      	lsls	r6, r2, #31
 800590c:	d427      	bmi.n	800595e <__sflush_r+0xb2>
 800590e:	2200      	movs	r2, #0
 8005910:	6062      	str	r2, [r4, #4]
 8005912:	04d9      	lsls	r1, r3, #19
 8005914:	6922      	ldr	r2, [r4, #16]
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	d504      	bpl.n	8005924 <__sflush_r+0x78>
 800591a:	1c42      	adds	r2, r0, #1
 800591c:	d101      	bne.n	8005922 <__sflush_r+0x76>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	b903      	cbnz	r3, 8005924 <__sflush_r+0x78>
 8005922:	6560      	str	r0, [r4, #84]	@ 0x54
 8005924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005926:	602f      	str	r7, [r5, #0]
 8005928:	b1b9      	cbz	r1, 800595a <__sflush_r+0xae>
 800592a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800592e:	4299      	cmp	r1, r3
 8005930:	d002      	beq.n	8005938 <__sflush_r+0x8c>
 8005932:	4628      	mov	r0, r5
 8005934:	f000 fa3e 	bl	8005db4 <_free_r>
 8005938:	2300      	movs	r3, #0
 800593a:	6363      	str	r3, [r4, #52]	@ 0x34
 800593c:	e00d      	b.n	800595a <__sflush_r+0xae>
 800593e:	2301      	movs	r3, #1
 8005940:	4628      	mov	r0, r5
 8005942:	47b0      	blx	r6
 8005944:	4602      	mov	r2, r0
 8005946:	1c50      	adds	r0, r2, #1
 8005948:	d1c9      	bne.n	80058de <__sflush_r+0x32>
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0c6      	beq.n	80058de <__sflush_r+0x32>
 8005950:	2b1d      	cmp	r3, #29
 8005952:	d001      	beq.n	8005958 <__sflush_r+0xac>
 8005954:	2b16      	cmp	r3, #22
 8005956:	d11e      	bne.n	8005996 <__sflush_r+0xea>
 8005958:	602f      	str	r7, [r5, #0]
 800595a:	2000      	movs	r0, #0
 800595c:	e022      	b.n	80059a4 <__sflush_r+0xf8>
 800595e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005962:	b21b      	sxth	r3, r3
 8005964:	e01b      	b.n	800599e <__sflush_r+0xf2>
 8005966:	690f      	ldr	r7, [r1, #16]
 8005968:	2f00      	cmp	r7, #0
 800596a:	d0f6      	beq.n	800595a <__sflush_r+0xae>
 800596c:	0793      	lsls	r3, r2, #30
 800596e:	680e      	ldr	r6, [r1, #0]
 8005970:	bf08      	it	eq
 8005972:	694b      	ldreq	r3, [r1, #20]
 8005974:	600f      	str	r7, [r1, #0]
 8005976:	bf18      	it	ne
 8005978:	2300      	movne	r3, #0
 800597a:	eba6 0807 	sub.w	r8, r6, r7
 800597e:	608b      	str	r3, [r1, #8]
 8005980:	f1b8 0f00 	cmp.w	r8, #0
 8005984:	dde9      	ble.n	800595a <__sflush_r+0xae>
 8005986:	6a21      	ldr	r1, [r4, #32]
 8005988:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800598a:	4643      	mov	r3, r8
 800598c:	463a      	mov	r2, r7
 800598e:	4628      	mov	r0, r5
 8005990:	47b0      	blx	r6
 8005992:	2800      	cmp	r0, #0
 8005994:	dc08      	bgt.n	80059a8 <__sflush_r+0xfc>
 8005996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	4407      	add	r7, r0
 80059aa:	eba8 0800 	sub.w	r8, r8, r0
 80059ae:	e7e7      	b.n	8005980 <__sflush_r+0xd4>
 80059b0:	dfbffffe 	.word	0xdfbffffe

080059b4 <_fflush_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	4605      	mov	r5, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	b913      	cbnz	r3, 80059c4 <_fflush_r+0x10>
 80059be:	2500      	movs	r5, #0
 80059c0:	4628      	mov	r0, r5
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	b118      	cbz	r0, 80059ce <_fflush_r+0x1a>
 80059c6:	6a03      	ldr	r3, [r0, #32]
 80059c8:	b90b      	cbnz	r3, 80059ce <_fflush_r+0x1a>
 80059ca:	f7ff fa9f 	bl	8004f0c <__sinit>
 80059ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f3      	beq.n	80059be <_fflush_r+0xa>
 80059d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059d8:	07d0      	lsls	r0, r2, #31
 80059da:	d404      	bmi.n	80059e6 <_fflush_r+0x32>
 80059dc:	0599      	lsls	r1, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_fflush_r+0x32>
 80059e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059e2:	f7ff fbc8 	bl	8005176 <__retarget_lock_acquire_recursive>
 80059e6:	4628      	mov	r0, r5
 80059e8:	4621      	mov	r1, r4
 80059ea:	f7ff ff5f 	bl	80058ac <__sflush_r>
 80059ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059f0:	07da      	lsls	r2, r3, #31
 80059f2:	4605      	mov	r5, r0
 80059f4:	d4e4      	bmi.n	80059c0 <_fflush_r+0xc>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	059b      	lsls	r3, r3, #22
 80059fa:	d4e1      	bmi.n	80059c0 <_fflush_r+0xc>
 80059fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059fe:	f7ff fbbb 	bl	8005178 <__retarget_lock_release_recursive>
 8005a02:	e7dd      	b.n	80059c0 <_fflush_r+0xc>

08005a04 <__malloc_lock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	@ (8005a0c <__malloc_lock+0x8>)
 8005a06:	f7ff bbb6 	b.w	8005176 <__retarget_lock_acquire_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20000370 	.word	0x20000370

08005a10 <__malloc_unlock>:
 8005a10:	4801      	ldr	r0, [pc, #4]	@ (8005a18 <__malloc_unlock+0x8>)
 8005a12:	f7ff bbb1 	b.w	8005178 <__retarget_lock_release_recursive>
 8005a16:	bf00      	nop
 8005a18:	20000370 	.word	0x20000370

08005a1c <__sread>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a24:	f000 f98a 	bl	8005d3c <_read_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	bfab      	itete	ge
 8005a2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a30:	181b      	addge	r3, r3, r0
 8005a32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a36:	bfac      	ite	ge
 8005a38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a3a:	81a3      	strhlt	r3, [r4, #12]
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <__swrite>:
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	461f      	mov	r7, r3
 8005a44:	898b      	ldrh	r3, [r1, #12]
 8005a46:	05db      	lsls	r3, r3, #23
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	d505      	bpl.n	8005a5c <__swrite+0x1e>
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2302      	movs	r3, #2
 8005a56:	2200      	movs	r2, #0
 8005a58:	f000 f95e 	bl	8005d18 <_lseek_r>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	f000 b985 	b.w	8005d80 <_write_r>

08005a76 <__sseek>:
 8005a76:	b510      	push	{r4, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 f94b 	bl	8005d18 <_lseek_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	bf15      	itete	ne
 8005a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a92:	81a3      	strheq	r3, [r4, #12]
 8005a94:	bf18      	it	ne
 8005a96:	81a3      	strhne	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__sclose>:
 8005a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9e:	f000 b909 	b.w	8005cb4 <_close_r>
	...

08005aa4 <fiprintf>:
 8005aa4:	b40e      	push	{r1, r2, r3}
 8005aa6:	b503      	push	{r0, r1, lr}
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	ab03      	add	r3, sp, #12
 8005aac:	4805      	ldr	r0, [pc, #20]	@ (8005ac4 <fiprintf+0x20>)
 8005aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab2:	6800      	ldr	r0, [r0, #0]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	f7ff fba9 	bl	800520c <_vfiprintf_r>
 8005aba:	b002      	add	sp, #8
 8005abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac0:	b003      	add	sp, #12
 8005ac2:	4770      	bx	lr
 8005ac4:	20000038 	.word	0x20000038

08005ac8 <__swbuf_r>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	460e      	mov	r6, r1
 8005acc:	4614      	mov	r4, r2
 8005ace:	4605      	mov	r5, r0
 8005ad0:	b118      	cbz	r0, 8005ada <__swbuf_r+0x12>
 8005ad2:	6a03      	ldr	r3, [r0, #32]
 8005ad4:	b90b      	cbnz	r3, 8005ada <__swbuf_r+0x12>
 8005ad6:	f7ff fa19 	bl	8004f0c <__sinit>
 8005ada:	69a3      	ldr	r3, [r4, #24]
 8005adc:	60a3      	str	r3, [r4, #8]
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	071a      	lsls	r2, r3, #28
 8005ae2:	d501      	bpl.n	8005ae8 <__swbuf_r+0x20>
 8005ae4:	6923      	ldr	r3, [r4, #16]
 8005ae6:	b943      	cbnz	r3, 8005afa <__swbuf_r+0x32>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f82a 	bl	8005b44 <__swsetup_r>
 8005af0:	b118      	cbz	r0, 8005afa <__swbuf_r+0x32>
 8005af2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005af6:	4638      	mov	r0, r7
 8005af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	1a98      	subs	r0, r3, r2
 8005b00:	6963      	ldr	r3, [r4, #20]
 8005b02:	b2f6      	uxtb	r6, r6
 8005b04:	4283      	cmp	r3, r0
 8005b06:	4637      	mov	r7, r6
 8005b08:	dc05      	bgt.n	8005b16 <__swbuf_r+0x4e>
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f7ff ff51 	bl	80059b4 <_fflush_r>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1ed      	bne.n	8005af2 <__swbuf_r+0x2a>
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60a3      	str	r3, [r4, #8]
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	6022      	str	r2, [r4, #0]
 8005b22:	701e      	strb	r6, [r3, #0]
 8005b24:	6962      	ldr	r2, [r4, #20]
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d004      	beq.n	8005b36 <__swbuf_r+0x6e>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	07db      	lsls	r3, r3, #31
 8005b30:	d5e1      	bpl.n	8005af6 <__swbuf_r+0x2e>
 8005b32:	2e0a      	cmp	r6, #10
 8005b34:	d1df      	bne.n	8005af6 <__swbuf_r+0x2e>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f7ff ff3b 	bl	80059b4 <_fflush_r>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d0d9      	beq.n	8005af6 <__swbuf_r+0x2e>
 8005b42:	e7d6      	b.n	8005af2 <__swbuf_r+0x2a>

08005b44 <__swsetup_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4b29      	ldr	r3, [pc, #164]	@ (8005bec <__swsetup_r+0xa8>)
 8005b48:	4605      	mov	r5, r0
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	b118      	cbz	r0, 8005b58 <__swsetup_r+0x14>
 8005b50:	6a03      	ldr	r3, [r0, #32]
 8005b52:	b90b      	cbnz	r3, 8005b58 <__swsetup_r+0x14>
 8005b54:	f7ff f9da 	bl	8004f0c <__sinit>
 8005b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5c:	0719      	lsls	r1, r3, #28
 8005b5e:	d422      	bmi.n	8005ba6 <__swsetup_r+0x62>
 8005b60:	06da      	lsls	r2, r3, #27
 8005b62:	d407      	bmi.n	8005b74 <__swsetup_r+0x30>
 8005b64:	2209      	movs	r2, #9
 8005b66:	602a      	str	r2, [r5, #0]
 8005b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b72:	e033      	b.n	8005bdc <__swsetup_r+0x98>
 8005b74:	0758      	lsls	r0, r3, #29
 8005b76:	d512      	bpl.n	8005b9e <__swsetup_r+0x5a>
 8005b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b7a:	b141      	cbz	r1, 8005b8e <__swsetup_r+0x4a>
 8005b7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b80:	4299      	cmp	r1, r3
 8005b82:	d002      	beq.n	8005b8a <__swsetup_r+0x46>
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 f915 	bl	8005db4 <_free_r>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b94:	81a3      	strh	r3, [r4, #12]
 8005b96:	2300      	movs	r3, #0
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	f043 0308 	orr.w	r3, r3, #8
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	b94b      	cbnz	r3, 8005bbe <__swsetup_r+0x7a>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb4:	d003      	beq.n	8005bbe <__swsetup_r+0x7a>
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 f83f 	bl	8005c3c <__smakebuf_r>
 8005bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc2:	f013 0201 	ands.w	r2, r3, #1
 8005bc6:	d00a      	beq.n	8005bde <__swsetup_r+0x9a>
 8005bc8:	2200      	movs	r2, #0
 8005bca:	60a2      	str	r2, [r4, #8]
 8005bcc:	6962      	ldr	r2, [r4, #20]
 8005bce:	4252      	negs	r2, r2
 8005bd0:	61a2      	str	r2, [r4, #24]
 8005bd2:	6922      	ldr	r2, [r4, #16]
 8005bd4:	b942      	cbnz	r2, 8005be8 <__swsetup_r+0xa4>
 8005bd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bda:	d1c5      	bne.n	8005b68 <__swsetup_r+0x24>
 8005bdc:	bd38      	pop	{r3, r4, r5, pc}
 8005bde:	0799      	lsls	r1, r3, #30
 8005be0:	bf58      	it	pl
 8005be2:	6962      	ldrpl	r2, [r4, #20]
 8005be4:	60a2      	str	r2, [r4, #8]
 8005be6:	e7f4      	b.n	8005bd2 <__swsetup_r+0x8e>
 8005be8:	2000      	movs	r0, #0
 8005bea:	e7f7      	b.n	8005bdc <__swsetup_r+0x98>
 8005bec:	20000038 	.word	0x20000038

08005bf0 <__swhatbuf_r>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	b096      	sub	sp, #88	@ 0x58
 8005bfc:	4615      	mov	r5, r2
 8005bfe:	461e      	mov	r6, r3
 8005c00:	da0d      	bge.n	8005c1e <__swhatbuf_r+0x2e>
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c08:	f04f 0100 	mov.w	r1, #0
 8005c0c:	bf14      	ite	ne
 8005c0e:	2340      	movne	r3, #64	@ 0x40
 8005c10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c14:	2000      	movs	r0, #0
 8005c16:	6031      	str	r1, [r6, #0]
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	b016      	add	sp, #88	@ 0x58
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	466a      	mov	r2, sp
 8005c20:	f000 f858 	bl	8005cd4 <_fstat_r>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	dbec      	blt.n	8005c02 <__swhatbuf_r+0x12>
 8005c28:	9901      	ldr	r1, [sp, #4]
 8005c2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c32:	4259      	negs	r1, r3
 8005c34:	4159      	adcs	r1, r3
 8005c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c3a:	e7eb      	b.n	8005c14 <__swhatbuf_r+0x24>

08005c3c <__smakebuf_r>:
 8005c3c:	898b      	ldrh	r3, [r1, #12]
 8005c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c40:	079d      	lsls	r5, r3, #30
 8005c42:	4606      	mov	r6, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	d507      	bpl.n	8005c58 <__smakebuf_r+0x1c>
 8005c48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	2301      	movs	r3, #1
 8005c52:	6163      	str	r3, [r4, #20]
 8005c54:	b003      	add	sp, #12
 8005c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c58:	ab01      	add	r3, sp, #4
 8005c5a:	466a      	mov	r2, sp
 8005c5c:	f7ff ffc8 	bl	8005bf0 <__swhatbuf_r>
 8005c60:	9f00      	ldr	r7, [sp, #0]
 8005c62:	4605      	mov	r5, r0
 8005c64:	4639      	mov	r1, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff fc12 	bl	8005490 <_malloc_r>
 8005c6c:	b948      	cbnz	r0, 8005c82 <__smakebuf_r+0x46>
 8005c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c72:	059a      	lsls	r2, r3, #22
 8005c74:	d4ee      	bmi.n	8005c54 <__smakebuf_r+0x18>
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	f043 0302 	orr.w	r3, r3, #2
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	e7e2      	b.n	8005c48 <__smakebuf_r+0xc>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	6020      	str	r0, [r4, #0]
 8005c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	9b01      	ldr	r3, [sp, #4]
 8005c8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c92:	b15b      	cbz	r3, 8005cac <__smakebuf_r+0x70>
 8005c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 f82d 	bl	8005cf8 <_isatty_r>
 8005c9e:	b128      	cbz	r0, 8005cac <__smakebuf_r+0x70>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f023 0303 	bic.w	r3, r3, #3
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	431d      	orrs	r5, r3
 8005cb0:	81a5      	strh	r5, [r4, #12]
 8005cb2:	e7cf      	b.n	8005c54 <__smakebuf_r+0x18>

08005cb4 <_close_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d06      	ldr	r5, [pc, #24]	@ (8005cd0 <_close_r+0x1c>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fb faa8 	bl	8001214 <_close>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_close_r+0x1a>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_close_r+0x1a>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	2000037c 	.word	0x2000037c

08005cd4 <_fstat_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	@ (8005cf4 <_fstat_r+0x20>)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	f7fb faa3 	bl	800122c <_fstat>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	d102      	bne.n	8005cf0 <_fstat_r+0x1c>
 8005cea:	682b      	ldr	r3, [r5, #0]
 8005cec:	b103      	cbz	r3, 8005cf0 <_fstat_r+0x1c>
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	bd38      	pop	{r3, r4, r5, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2000037c 	.word	0x2000037c

08005cf8 <_isatty_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d06      	ldr	r5, [pc, #24]	@ (8005d14 <_isatty_r+0x1c>)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	f7fb faa2 	bl	800124c <_isatty>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_isatty_r+0x1a>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_isatty_r+0x1a>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	2000037c 	.word	0x2000037c

08005d18 <_lseek_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	@ (8005d38 <_lseek_r+0x20>)
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	4608      	mov	r0, r1
 8005d20:	4611      	mov	r1, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	602a      	str	r2, [r5, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f7fb fa9b 	bl	8001262 <_lseek>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_lseek_r+0x1e>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_lseek_r+0x1e>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	2000037c 	.word	0x2000037c

08005d3c <_read_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d07      	ldr	r5, [pc, #28]	@ (8005d5c <_read_r+0x20>)
 8005d40:	4604      	mov	r4, r0
 8005d42:	4608      	mov	r0, r1
 8005d44:	4611      	mov	r1, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	602a      	str	r2, [r5, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f7fb fa29 	bl	80011a2 <_read>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_read_r+0x1e>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_read_r+0x1e>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	2000037c 	.word	0x2000037c

08005d60 <_sbrk_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4d06      	ldr	r5, [pc, #24]	@ (8005d7c <_sbrk_r+0x1c>)
 8005d64:	2300      	movs	r3, #0
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	f7fb fa86 	bl	800127c <_sbrk>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d102      	bne.n	8005d7a <_sbrk_r+0x1a>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	b103      	cbz	r3, 8005d7a <_sbrk_r+0x1a>
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	2000037c 	.word	0x2000037c

08005d80 <_write_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d07      	ldr	r5, [pc, #28]	@ (8005da0 <_write_r+0x20>)
 8005d84:	4604      	mov	r4, r0
 8005d86:	4608      	mov	r0, r1
 8005d88:	4611      	mov	r1, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	602a      	str	r2, [r5, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f7fb fa24 	bl	80011dc <_write>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_write_r+0x1e>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_write_r+0x1e>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	2000037c 	.word	0x2000037c

08005da4 <abort>:
 8005da4:	b508      	push	{r3, lr}
 8005da6:	2006      	movs	r0, #6
 8005da8:	f000 f876 	bl	8005e98 <raise>
 8005dac:	2001      	movs	r0, #1
 8005dae:	f7fb f9ed 	bl	800118c <_exit>
	...

08005db4 <_free_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4605      	mov	r5, r0
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d041      	beq.n	8005e40 <_free_r+0x8c>
 8005dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc0:	1f0c      	subs	r4, r1, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bfb8      	it	lt
 8005dc6:	18e4      	addlt	r4, r4, r3
 8005dc8:	f7ff fe1c 	bl	8005a04 <__malloc_lock>
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e44 <_free_r+0x90>)
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	b933      	cbnz	r3, 8005de0 <_free_r+0x2c>
 8005dd2:	6063      	str	r3, [r4, #4]
 8005dd4:	6014      	str	r4, [r2, #0]
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ddc:	f7ff be18 	b.w	8005a10 <__malloc_unlock>
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d908      	bls.n	8005df6 <_free_r+0x42>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	1821      	adds	r1, r4, r0
 8005de8:	428b      	cmp	r3, r1
 8005dea:	bf01      	itttt	eq
 8005dec:	6819      	ldreq	r1, [r3, #0]
 8005dee:	685b      	ldreq	r3, [r3, #4]
 8005df0:	1809      	addeq	r1, r1, r0
 8005df2:	6021      	streq	r1, [r4, #0]
 8005df4:	e7ed      	b.n	8005dd2 <_free_r+0x1e>
 8005df6:	461a      	mov	r2, r3
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	b10b      	cbz	r3, 8005e00 <_free_r+0x4c>
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	d9fa      	bls.n	8005df6 <_free_r+0x42>
 8005e00:	6811      	ldr	r1, [r2, #0]
 8005e02:	1850      	adds	r0, r2, r1
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d10b      	bne.n	8005e20 <_free_r+0x6c>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	4401      	add	r1, r0
 8005e0c:	1850      	adds	r0, r2, r1
 8005e0e:	4283      	cmp	r3, r0
 8005e10:	6011      	str	r1, [r2, #0]
 8005e12:	d1e0      	bne.n	8005dd6 <_free_r+0x22>
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	6053      	str	r3, [r2, #4]
 8005e1a:	4408      	add	r0, r1
 8005e1c:	6010      	str	r0, [r2, #0]
 8005e1e:	e7da      	b.n	8005dd6 <_free_r+0x22>
 8005e20:	d902      	bls.n	8005e28 <_free_r+0x74>
 8005e22:	230c      	movs	r3, #12
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	e7d6      	b.n	8005dd6 <_free_r+0x22>
 8005e28:	6820      	ldr	r0, [r4, #0]
 8005e2a:	1821      	adds	r1, r4, r0
 8005e2c:	428b      	cmp	r3, r1
 8005e2e:	bf04      	itt	eq
 8005e30:	6819      	ldreq	r1, [r3, #0]
 8005e32:	685b      	ldreq	r3, [r3, #4]
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	bf04      	itt	eq
 8005e38:	1809      	addeq	r1, r1, r0
 8005e3a:	6021      	streq	r1, [r4, #0]
 8005e3c:	6054      	str	r4, [r2, #4]
 8005e3e:	e7ca      	b.n	8005dd6 <_free_r+0x22>
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	bf00      	nop
 8005e44:	20000378 	.word	0x20000378

08005e48 <_raise_r>:
 8005e48:	291f      	cmp	r1, #31
 8005e4a:	b538      	push	{r3, r4, r5, lr}
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	d904      	bls.n	8005e5c <_raise_r+0x14>
 8005e52:	2316      	movs	r3, #22
 8005e54:	6003      	str	r3, [r0, #0]
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e5e:	b112      	cbz	r2, 8005e66 <_raise_r+0x1e>
 8005e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e64:	b94b      	cbnz	r3, 8005e7a <_raise_r+0x32>
 8005e66:	4628      	mov	r0, r5
 8005e68:	f000 f830 	bl	8005ecc <_getpid_r>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4601      	mov	r1, r0
 8005e70:	4628      	mov	r0, r5
 8005e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e76:	f000 b817 	b.w	8005ea8 <_kill_r>
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d00a      	beq.n	8005e94 <_raise_r+0x4c>
 8005e7e:	1c59      	adds	r1, r3, #1
 8005e80:	d103      	bne.n	8005e8a <_raise_r+0x42>
 8005e82:	2316      	movs	r3, #22
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	2001      	movs	r0, #1
 8005e88:	e7e7      	b.n	8005e5a <_raise_r+0x12>
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e90:	4620      	mov	r0, r4
 8005e92:	4798      	blx	r3
 8005e94:	2000      	movs	r0, #0
 8005e96:	e7e0      	b.n	8005e5a <_raise_r+0x12>

08005e98 <raise>:
 8005e98:	4b02      	ldr	r3, [pc, #8]	@ (8005ea4 <raise+0xc>)
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f7ff bfd3 	b.w	8005e48 <_raise_r>
 8005ea2:	bf00      	nop
 8005ea4:	20000038 	.word	0x20000038

08005ea8 <_kill_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4d07      	ldr	r5, [pc, #28]	@ (8005ec8 <_kill_r+0x20>)
 8005eac:	2300      	movs	r3, #0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	f7fb f959 	bl	800116c <_kill>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d102      	bne.n	8005ec4 <_kill_r+0x1c>
 8005ebe:	682b      	ldr	r3, [r5, #0]
 8005ec0:	b103      	cbz	r3, 8005ec4 <_kill_r+0x1c>
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	bd38      	pop	{r3, r4, r5, pc}
 8005ec6:	bf00      	nop
 8005ec8:	2000037c 	.word	0x2000037c

08005ecc <_getpid_r>:
 8005ecc:	f7fb b946 	b.w	800115c <_getpid>

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
