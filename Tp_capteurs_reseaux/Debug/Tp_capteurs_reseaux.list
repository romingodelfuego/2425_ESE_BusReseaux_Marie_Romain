
Tp_capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080055a4  080055a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005718  08005718  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005720  08005720  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005724  08005724  00006724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005728  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000068  08005790  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08005790  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb17  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  00015baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00018468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d6  00000000  00000000  00019130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023703  00000000  00000000  00019b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d2a  00000000  00000000  0003d209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf79e  00000000  00000000  0004ef33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e6d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  0011e714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001222cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800558c 	.word	0x0800558c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800558c 	.word	0x0800558c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005a6:	23d0      	movs	r3, #208	@ 0xd0
 80005a8:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005aa:	23ee      	movs	r3, #238	@ 0xee
 80005ac:	4619      	mov	r1, r3
 80005ae:	1d3a      	adds	r2, r7, #4
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	481a      	ldr	r0, [pc, #104]	@ (8000624 <BMP280_check+0x84>)
 80005ba:	f001 fba9 	bl	8001d10 <HAL_I2C_Master_Transmit>
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80005c8:	4817      	ldr	r0, [pc, #92]	@ (8000628 <BMP280_check+0x88>)
 80005ca:	f004 fa29 	bl	8004a20 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80005ce:	23ee      	movs	r3, #238	@ 0xee
 80005d0:	4619      	mov	r1, r3
 80005d2:	2301      	movs	r3, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	1d3a      	adds	r2, r7, #4
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4603      	mov	r3, r0
 80005e0:	4810      	ldr	r0, [pc, #64]	@ (8000624 <BMP280_check+0x84>)
 80005e2:	f001 fc93 	bl	8001f0c <HAL_I2C_Master_Receive>
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 80005f0:	480e      	ldr	r0, [pc, #56]	@ (800062c <BMP280_check+0x8c>)
 80005f2:	f004 fa15 	bl	8004a20 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80005f6:	793b      	ldrb	r3, [r7, #4]
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <BMP280_check+0x90>)
 80005fc:	f004 f9a8 	bl	8004950 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000600:	793b      	ldrb	r3, [r7, #4]
 8000602:	2258      	movs	r2, #88	@ 0x58
 8000604:	4293      	cmp	r3, r2
 8000606:	d104      	bne.n	8000612 <BMP280_check+0x72>
		printf("Ok\r\n");
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <BMP280_check+0x94>)
 800060a:	f004 fa09 	bl	8004a20 <puts>
		return 0;
 800060e:	2300      	movs	r3, #0
 8000610:	e003      	b.n	800061a <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 8000612:	4809      	ldr	r0, [pc, #36]	@ (8000638 <BMP280_check+0x98>)
 8000614:	f004 fa04 	bl	8004a20 <puts>
		return 1;
 8000618:	2301      	movs	r3, #1
	}
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000ac 	.word	0x200000ac
 8000628:	080055a4 	.word	0x080055a4
 800062c:	080055c8 	.word	0x080055c8
 8000630:	080055ec 	.word	0x080055ec
 8000634:	080055f8 	.word	0x080055f8
 8000638:	080055fc 	.word	0x080055fc

0800063c <BMP280_init>:

int BMP280_init() {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000642:	2357      	movs	r3, #87	@ 0x57
 8000644:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8000646:	480d      	ldr	r0, [pc, #52]	@ (800067c <BMP280_init+0x40>)
 8000648:	f004 f9ea 	bl	8004a20 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 800064c:	22f4      	movs	r2, #244	@ 0xf4
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4619      	mov	r1, r3
 8000652:	4610      	mov	r0, r2
 8000654:	f000 f818 	bl	8000688 <BMP280_Write_Reg>
 8000658:	4603      	mov	r3, r0
 800065a:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d104      	bne.n	800066c <BMP280_init+0x30>
		printf("Config Ok\r\n");
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <BMP280_init+0x44>)
 8000664:	f004 f9dc 	bl	8004a20 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	//BMP280_get_trimming();
	return 0;
 8000668:	2300      	movs	r3, #0
 800066a:	e003      	b.n	8000674 <BMP280_init+0x38>
		printf("Config not Ok!\r\n");
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <BMP280_init+0x48>)
 800066e:	f004 f9d7 	bl	8004a20 <puts>
		return 1;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08005608 	.word	0x08005608
 8000680:	08005618 	.word	0x08005618
 8000684:	08005624 	.word	0x08005624

08000688 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80006a0:	23ee      	movs	r3, #238	@ 0xee
 80006a2:	4619      	mov	r1, r3
 80006a4:	f107 020c 	add.w	r2, r7, #12
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2302      	movs	r3, #2
 80006b0:	4814      	ldr	r0, [pc, #80]	@ (8000704 <BMP280_Write_Reg+0x7c>)
 80006b2:	f001 fb2d 	bl	8001d10 <HAL_I2C_Master_Transmit>
 80006b6:	4603      	mov	r3, r0
 80006b8:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80006c0:	4811      	ldr	r0, [pc, #68]	@ (8000708 <BMP280_Write_Reg+0x80>)
 80006c2:	f004 f9ad 	bl	8004a20 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80006c6:	23ee      	movs	r3, #238	@ 0xee
 80006c8:	4619      	mov	r1, r3
 80006ca:	f107 020c 	add.w	r2, r7, #12
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2301      	movs	r3, #1
 80006d6:	480b      	ldr	r0, [pc, #44]	@ (8000704 <BMP280_Write_Reg+0x7c>)
 80006d8:	f001 fc18 	bl	8001f0c <HAL_I2C_Master_Receive>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 80006e6:	4809      	ldr	r0, [pc, #36]	@ (800070c <BMP280_Write_Reg+0x84>)
 80006e8:	f004 f99a 	bl	8004a20 <puts>
	}

	if (buf[0] == value) {
 80006ec:	7b3b      	ldrb	r3, [r7, #12]
 80006ee:	79ba      	ldrb	r2, [r7, #6]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d101      	bne.n	80006f8 <BMP280_Write_Reg+0x70>
		return 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e000      	b.n	80006fa <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 80006f8:	2301      	movs	r3, #1
	}
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000ac 	.word	0x200000ac
 8000708:	08005634 	.word	0x08005634
 800070c:	08005650 	.word	0x08005650

08000710 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af02      	add	r7, sp, #8
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000720:	23ee      	movs	r3, #238	@ 0xee
 8000722:	4619      	mov	r1, r3
 8000724:	1dfa      	adds	r2, r7, #7
 8000726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	4814      	ldr	r0, [pc, #80]	@ (8000780 <BMP280_Read_Reg+0x70>)
 8000730:	f001 faee 	bl	8001d10 <HAL_I2C_Master_Transmit>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 800073e:	4811      	ldr	r0, [pc, #68]	@ (8000784 <BMP280_Read_Reg+0x74>)
 8000740:	f004 f96e 	bl	8004a20 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ff82 	bl	8004650 <malloc>
 800074c:	4603      	mov	r3, r0
 800074e:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000750:	23ee      	movs	r3, #238	@ 0xee
 8000752:	4619      	mov	r1, r3
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	b29b      	uxth	r3, r3
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	4807      	ldr	r0, [pc, #28]	@ (8000780 <BMP280_Read_Reg+0x70>)
 8000762:	f001 fbd3 	bl	8001f0c <HAL_I2C_Master_Receive>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <BMP280_Read_Reg+0x78>)
 8000772:	f004 f955 	bl	8004a20 <puts>
	}

	return buf;
 8000776:	68bb      	ldr	r3, [r7, #8]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000ac 	.word	0x200000ac
 8000784:	08005634 	.word	0x08005634
 8000788:	08005650 	.word	0x08005650

0800078c <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8000792:	23fa      	movs	r3, #250	@ 0xfa
 8000794:	2203      	movs	r2, #3
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffb9 	bl	8000710 <BMP280_Read_Reg>
 800079e:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	031a      	lsls	r2, r3, #12
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3301      	adds	r3, #1
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	3202      	adds	r2, #2
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	0912      	lsrs	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007ba:	4313      	orrs	r3, r2
 80007bc:	603b      	str	r3, [r7, #0]

	free(buf);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f003 ff4e 	bl	8004660 <free>

	printf("Temperature: ");
 80007c4:	4807      	ldr	r0, [pc, #28]	@ (80007e4 <BMP280_get_temperature+0x58>)
 80007c6:	f004 f8c3 	bl	8004950 <iprintf>
	printf("0X%05lX", adc_T);
 80007ca:	6839      	ldr	r1, [r7, #0]
 80007cc:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <BMP280_get_temperature+0x5c>)
 80007ce:	f004 f8bf 	bl	8004950 <iprintf>
	printf("\r\n");
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <BMP280_get_temperature+0x60>)
 80007d4:	f004 f924 	bl	8004a20 <puts>

	return adc_T;
 80007d8:	683b      	ldr	r3, [r7, #0]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	0800566c 	.word	0x0800566c
 80007e8:	0800567c 	.word	0x0800567c
 80007ec:	08005684 	.word	0x08005684

080007f0 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 80007f6:	23f7      	movs	r3, #247	@ 0xf7
 80007f8:	2203      	movs	r2, #3
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff87 	bl	8000710 <BMP280_Read_Reg>
 8000802:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	031a      	lsls	r2, r3, #12
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3301      	adds	r3, #1
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	3202      	adds	r2, #2
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	0912      	lsrs	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800081e:	4313      	orrs	r3, r2
 8000820:	603b      	str	r3, [r7, #0]

	free(buf);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f003 ff1c 	bl	8004660 <free>

	printf("Pressure:    0x");
 8000828:	4807      	ldr	r0, [pc, #28]	@ (8000848 <BMP280_get_pressure+0x58>)
 800082a:	f004 f891 	bl	8004950 <iprintf>
	printf("%05lX", adc_P);
 800082e:	6839      	ldr	r1, [r7, #0]
 8000830:	4806      	ldr	r0, [pc, #24]	@ (800084c <BMP280_get_pressure+0x5c>)
 8000832:	f004 f88d 	bl	8004950 <iprintf>
	printf("\r\n");
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <BMP280_get_pressure+0x60>)
 8000838:	f004 f8f2 	bl	8004a20 <puts>

	return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08005688 	.word	0x08005688
 800084c:	08005698 	.word	0x08005698
 8000850:	08005684 	.word	0x08005684

08000854 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_CAN2_Init+0x60>)
 800085a:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <MX_CAN2_Init+0x64>)
 800085c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_CAN2_Init+0x60>)
 8000860:	2210      	movs	r2, #16
 8000862:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_CAN2_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_CAN2_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000870:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_CAN2_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_CAN2_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <MX_CAN2_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_CAN2_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <MX_CAN2_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_CAN2_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <MX_CAN2_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_CAN2_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_CAN2_Init+0x60>)
 80008a2:	f000 fca3 	bl	80011ec <HAL_CAN_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 f9d6 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000084 	.word	0x20000084
 80008b8:	40006800 	.word	0x40006800

080008bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a20      	ldr	r2, [pc, #128]	@ (800095c <HAL_CAN_MspInit+0xa0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d13a      	bne.n	8000954 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 80008e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 8000904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a10      	ldr	r2, [pc, #64]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <HAL_CAN_MspInit+0xa4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000932:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000944:	2309      	movs	r3, #9
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <HAL_CAN_MspInit+0xa8>)
 8000950:	f000 feec 	bl	800172c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40006800 	.word	0x40006800
 8000960:	40023800 	.word	0x40023800
 8000964:	40020400 	.word	0x40020400

08000968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b2d      	ldr	r3, [pc, #180]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a2c      	ldr	r2, [pc, #176]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a25      	ldr	r2, [pc, #148]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a1e      	ldr	r2, [pc, #120]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <MX_GPIO_Init+0xd4>)
 80009f4:	f001 f82e 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <MX_GPIO_Init+0xd8>)
 8000a10:	f000 fe8c 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a14:	2320      	movs	r3, #32
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_GPIO_Init+0xd4>)
 8000a2c:	f000 fe7e 	bl	800172c <HAL_GPIO_Init>

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	@ 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020800 	.word	0x40020800

08000a44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <MX_I2C1_Init+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a50:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_I2C1_Init+0x58>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a82:	f001 f801 	bl	8001a88 <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a8c:	f000 f8e6 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000ac 	.word	0x200000ac
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <HAL_I2C_MspInit+0x84>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d12c      	bne.n	8000b1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ade:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af0:	2304      	movs	r3, #4
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <HAL_I2C_MspInit+0x8c>)
 8000afc:	f000 fe16 	bl	800172c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b34:	f000 fac4 	bl	80010c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b38:	f000 f822 	bl	8000b80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b3c:	f7ff ff14 	bl	8000968 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000b40:	f000 f9e6 	bl	8000f10 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000b44:	f7ff ff7e 	bl	8000a44 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000b48:	f000 f9b8 	bl	8000ebc <MX_USART1_UART_Init>
	MX_CAN2_Init();
 8000b4c:	f7ff fe82 	bl	8000854 <MX_CAN2_Init>
	*/




	printf("\r\nChecking for BMP280\r\n");
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <main+0x48>)
 8000b52:	f003 ff65 	bl	8004a20 <puts>
	BMP280_check();
 8000b56:	f7ff fd23 	bl	80005a0 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 8000b5a:	4808      	ldr	r0, [pc, #32]	@ (8000b7c <main+0x4c>)
 8000b5c:	f003 ff60 	bl	8004a20 <puts>
	BMP280_init();
 8000b60:	f7ff fd6c 	bl	800063c <BMP280_init>





		BMP280_get_temperature();
 8000b64:	f7ff fe12 	bl	800078c <BMP280_get_temperature>
		BMP280_get_pressure();
 8000b68:	f7ff fe42 	bl	80007f0 <BMP280_get_pressure>
	    HAL_Delay(1000);
 8000b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b70:	f000 fb18 	bl	80011a4 <HAL_Delay>
		BMP280_get_temperature();
 8000b74:	bf00      	nop
 8000b76:	e7f5      	b.n	8000b64 <main+0x34>
 8000b78:	080056a0 	.word	0x080056a0
 8000b7c:	080056b8 	.word	0x080056b8

08000b80 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	@ 0x50
 8000b84:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2234      	movs	r2, #52	@ 0x34
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 ff4e 	bl	8004a30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <SystemClock_Config+0xd4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a29      	ldr	r2, [pc, #164]	@ (8000c54 <SystemClock_Config+0xd4>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <SystemClock_Config+0xd4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <SystemClock_Config+0xd8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bcc:	4a22      	ldr	r2, [pc, #136]	@ (8000c58 <SystemClock_Config+0xd8>)
 8000bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <SystemClock_Config+0xd8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	2302      	movs	r3, #2
 8000bec:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000bf8:	23b4      	movs	r3, #180	@ 0xb4
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fa7f 	bl	8003110 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000c18:	f000 f820 	bl	8000c5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c20:	2302      	movs	r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c2c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c32:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 ff1e 	bl	8002a7c <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000c46:	f000 f809 	bl	8000c5c <Error_Handler>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	@ 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c70:	1d39      	adds	r1, r7, #4
 8000c72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c76:	2201      	movs	r2, #1
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <__io_putchar+0x20>)
 8000c7a:	f002 fd37 	bl	80036ec <HAL_UART_Transmit>

  return ch;
 8000c7e:	687b      	ldr	r3, [r7, #4]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000014c 	.word	0x2000014c

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fc5a 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 fa17 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <USART1_IRQHandler+0x10>)
 8000d42:	f002 fd5f 	bl	8003804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000104 	.word	0x20000104

08000d50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
  }

  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e009      	b.n	8000db0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf1      	blt.n	8000d9c <_write+0x12>
  }
  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_close>:

int _close(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dea:	605a      	str	r2, [r3, #4]
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_isatty>:

int _isatty(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f003 fe00 	bl	8004a60 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20020000 	.word	0x20020000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000100 	.word	0x20000100
 8000e94:	200002e8 	.word	0x200002e8

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <MX_USART1_UART_Init+0x50>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	f002 fbaa 	bl	800364c <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000efe:	f7ff fead 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000104 	.word	0x20000104
 8000f0c:	40011000 	.word	0x40011000

08000f10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <MX_USART2_UART_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f48:	f002 fb80 	bl	800364c <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f52:	f7ff fe83 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000014c 	.word	0x2000014c
 8000f60:	40004400 	.word	0x40004400

08000f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	@ 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a36      	ldr	r2, [pc, #216]	@ (800105c <HAL_UART_MspInit+0xf8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d135      	bne.n	8000ff2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	4b35      	ldr	r3, [pc, #212]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	4a34      	ldr	r2, [pc, #208]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f96:	4b32      	ldr	r3, [pc, #200]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a2d      	ldr	r2, [pc, #180]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4822      	ldr	r0, [pc, #136]	@ (8001064 <HAL_UART_MspInit+0x100>)
 8000fdc:	f000 fba6 	bl	800172c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2025      	movs	r0, #37	@ 0x25
 8000fe6:	f000 fad8 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fea:	2025      	movs	r0, #37	@ 0x25
 8000fec:	f000 faf1 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ff0:	e030      	b.n	8001054 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <HAL_UART_MspInit+0x104>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d12b      	bne.n	8001054 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	4a16      	ldr	r2, [pc, #88]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8001006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100a:	6413      	str	r3, [r2, #64]	@ 0x40
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6313      	str	r3, [r2, #48]	@ 0x30
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_UART_MspInit+0xfc>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001034:	230c      	movs	r3, #12
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001044:	2307      	movs	r3, #7
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <HAL_UART_MspInit+0x100>)
 8001050:	f000 fb6c 	bl	800172c <HAL_GPIO_Init>
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	@ 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40011000 	.word	0x40011000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40004400 	.word	0x40004400

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001070:	f7ff ff12 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800109a:	f003 fce7 	bl	8004a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fd47 	bl	8000b30 <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010b0:	08005728 	.word	0x08005728
  ldr r2, =_sbss
 80010b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010b8:	200002e4 	.word	0x200002e4

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 fa4b 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fdca 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fa63 	bl	80015ee <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001140:	f000 fa2b 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000008 	.word	0x20000008
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	20000194 	.word	0x20000194

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000194 	.word	0x20000194

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008

080011ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0ed      	b.n	80013da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fb56 	bl	80008bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001220:	f7ff ffb4 	bl	800118c <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001226:	e012      	b.n	800124e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001228:	f7ff ffb0 	bl	800118c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d90b      	bls.n	800124e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2205      	movs	r2, #5
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0c5      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e5      	beq.n	8001228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0202 	bic.w	r2, r2, #2
 800126a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800126c:	f7ff ff8e 	bl	800118c <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001272:	e012      	b.n	800129a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001274:	f7ff ff8a 	bl	800118c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b0a      	cmp	r3, #10
 8001280:	d90b      	bls.n	800129a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2205      	movs	r2, #5
 8001292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e09f      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e5      	bne.n	8001274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d108      	bne.n	80012c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e007      	b.n	80012d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e007      	b.n	80012fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e9b      	ldrb	r3, [r3, #26]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e007      	b.n	8001326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0220 	bic.w	r2, r2, #32
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7edb      	ldrb	r3, [r3, #27]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d108      	bne.n	8001340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0210 	bic.w	r2, r2, #16
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e007      	b.n	8001350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0210 	orr.w	r2, r2, #16
 800134e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7f1b      	ldrb	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d108      	bne.n	800136a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0208 	orr.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e007      	b.n	800137a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0208 	bic.w	r2, r2, #8
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7f5b      	ldrb	r3, [r3, #29]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e007      	b.n	80013a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0204 	bic.w	r2, r2, #4
 80013a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	ea42 0103 	orr.w	r1, r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	@ (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	@ (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	@ 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff29 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff3e 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff31 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff fdba 	bl	800118c <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d008      	beq.n	8001638 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2280      	movs	r2, #128	@ 0x80
 800162a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e052      	b.n	80016de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0216 	bic.w	r2, r2, #22
 8001646:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001656:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d103      	bne.n	8001668 <HAL_DMA_Abort+0x62>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0208 	bic.w	r2, r2, #8
 8001676:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001688:	e013      	b.n	80016b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168a:	f7ff fd7f 	bl	800118c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b05      	cmp	r3, #5
 8001696:	d90c      	bls.n	80016b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2220      	movs	r2, #32
 800169c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e015      	b.n	80016de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e4      	bne.n	800168a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c4:	223f      	movs	r2, #63	@ 0x3f
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d004      	beq.n	8001704 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e00c      	b.n	800171e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2205      	movs	r2, #5
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e165      	b.n	8001a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 8154 	bne.w	8001a0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d005      	beq.n	800177e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	2b02      	cmp	r3, #2
 800177c:	d130      	bne.n	80017e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 0201 	and.w	r2, r3, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d017      	beq.n	800181c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d123      	bne.n	8001870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80ae 	beq.w	8001a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a2c <HAL_GPIO_Init+0x300>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	4a5c      	ldr	r2, [pc, #368]	@ (8001a2c <HAL_GPIO_Init+0x300>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a2c <HAL_GPIO_Init+0x300>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ce:	4a58      	ldr	r2, [pc, #352]	@ (8001a30 <HAL_GPIO_Init+0x304>)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a34 <HAL_GPIO_Init+0x308>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d025      	beq.n	8001946 <HAL_GPIO_Init+0x21a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a38 <HAL_GPIO_Init+0x30c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01f      	beq.n	8001942 <HAL_GPIO_Init+0x216>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4d      	ldr	r2, [pc, #308]	@ (8001a3c <HAL_GPIO_Init+0x310>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x212>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a40 <HAL_GPIO_Init+0x314>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	@ (8001a44 <HAL_GPIO_Init+0x318>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x20a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a48 <HAL_GPIO_Init+0x31c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x206>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a49      	ldr	r2, [pc, #292]	@ (8001a4c <HAL_GPIO_Init+0x320>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x202>
 800192a:	2306      	movs	r3, #6
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 800192e:	2307      	movs	r3, #7
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	@ (8001a30 <HAL_GPIO_Init+0x304>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b3a      	ldr	r3, [pc, #232]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198a:	4a31      	ldr	r2, [pc, #196]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001990:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b4:	4a26      	ldr	r2, [pc, #152]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ba:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019de:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a08:	4a11      	ldr	r2, [pc, #68]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f ae96 	bls.w	8001748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a70:	e003      	b.n	8001a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	041a      	lsls	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e12b      	b.n	8001cf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe fff6 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	@ 0x24
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ada:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001aea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aec:	f001 f8b8 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8001af0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a81      	ldr	r2, [pc, #516]	@ (8001cfc <HAL_I2C_Init+0x274>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d807      	bhi.n	8001b0c <HAL_I2C_Init+0x84>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a80      	ldr	r2, [pc, #512]	@ (8001d00 <HAL_I2C_Init+0x278>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	bf94      	ite	ls
 8001b04:	2301      	movls	r3, #1
 8001b06:	2300      	movhi	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e006      	b.n	8001b1a <HAL_I2C_Init+0x92>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d04 <HAL_I2C_Init+0x27c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	bf94      	ite	ls
 8001b14:	2301      	movls	r3, #1
 8001b16:	2300      	movhi	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0e7      	b.n	8001cf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4a78      	ldr	r2, [pc, #480]	@ (8001d08 <HAL_I2C_Init+0x280>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4a6a      	ldr	r2, [pc, #424]	@ (8001cfc <HAL_I2C_Init+0x274>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d802      	bhi.n	8001b5c <HAL_I2C_Init+0xd4>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	e009      	b.n	8001b70 <HAL_I2C_Init+0xe8>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	4a69      	ldr	r2, [pc, #420]	@ (8001d0c <HAL_I2C_Init+0x284>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	3301      	adds	r3, #1
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	495c      	ldr	r1, [pc, #368]	@ (8001cfc <HAL_I2C_Init+0x274>)
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	d819      	bhi.n	8001bc4 <HAL_I2C_Init+0x13c>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e59      	subs	r1, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b9e:	1c59      	adds	r1, r3, #1
 8001ba0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_I2C_Init+0x138>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1e59      	subs	r1, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbe:	e051      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e04f      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d111      	bne.n	8001bf0 <HAL_I2C_Init+0x168>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1e58      	subs	r0, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	440b      	add	r3, r1
 8001bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	e012      	b.n	8001c16 <HAL_I2C_Init+0x18e>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	0099      	lsls	r1, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Init+0x196>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e022      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10e      	bne.n	8001c44 <HAL_I2C_Init+0x1bc>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1e58      	subs	r0, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	440b      	add	r3, r1
 8001c34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c42:	e00f      	b.n	8001c64 <HAL_I2C_Init+0x1dc>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e58      	subs	r0, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	0099      	lsls	r1, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	6809      	ldr	r1, [r1, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6911      	ldr	r1, [r2, #16]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68d2      	ldr	r2, [r2, #12]
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	000186a0 	.word	0x000186a0
 8001d00:	001e847f 	.word	0x001e847f
 8001d04:	003d08ff 	.word	0x003d08ff
 8001d08:	431bde83 	.word	0x431bde83
 8001d0c:	10624dd3 	.word	0x10624dd3

08001d10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	817b      	strh	r3, [r7, #10]
 8001d20:	4613      	mov	r3, r2
 8001d22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff fa32 	bl	800118c <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	f040 80e0 	bne.w	8001ef8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2319      	movs	r3, #25
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4970      	ldr	r1, [pc, #448]	@ (8001f04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fc64 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0d3      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2C_Master_Transmit+0x50>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0cc      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d007      	beq.n	8001d86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2221      	movs	r2, #33	@ 0x21
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2210      	movs	r2, #16
 8001da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	893a      	ldrh	r2, [r7, #8]
 8001db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	@ (8001f08 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dc8:	8979      	ldrh	r1, [r7, #10]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 face 	bl	8002370 <I2C_MasterRequestWrite>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e08d      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001df4:	e066      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fd22 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d107      	bne.n	8001e1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e06b      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11b      	bne.n	8001e98 <HAL_I2C_Master_Transmit+0x188>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d017      	beq.n	8001e98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	6a39      	ldr	r1, [r7, #32]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fd19 	bl	80028d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d107      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e01a      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d194      	bne.n	8001df6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ef8:	2302      	movs	r3, #2
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	00100002 	.word	0x00100002
 8001f08:	ffff0000 	.word	0xffff0000

08001f0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	@ 0x30
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	461a      	mov	r2, r3
 8001f18:	460b      	mov	r3, r1
 8001f1a:	817b      	strh	r3, [r7, #10]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff f934 	bl	800118c <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	f040 8217 	bne.w	8002362 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2319      	movs	r3, #25
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	497c      	ldr	r1, [pc, #496]	@ (8002130 <HAL_I2C_Master_Receive+0x224>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fb66 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e20a      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_I2C_Master_Receive+0x50>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e203      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d007      	beq.n	8001f82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2222      	movs	r2, #34	@ 0x22
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	893a      	ldrh	r2, [r7, #8]
 8001fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4a5c      	ldr	r2, [pc, #368]	@ (8002134 <HAL_I2C_Master_Receive+0x228>)
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fc4:	8979      	ldrh	r1, [r7, #10]
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fa52 	bl	8002474 <I2C_MasterRequestRead>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1c4      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d113      	bne.n	800200a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e198      	b.n	800233c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200e:	2b01      	cmp	r3, #1
 8002010:	d11b      	bne.n	800204a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e178      	b.n	800233c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	2b02      	cmp	r3, #2
 8002050:	d11b      	bne.n	800208a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002060:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	e158      	b.n	800233c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020b0:	e144      	b.n	800233c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	f200 80f1 	bhi.w	800229e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d123      	bne.n	800210c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fc4b 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e145      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800210a:	e117      	b.n	800233c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	2b02      	cmp	r3, #2
 8002112:	d14e      	bne.n	80021b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211a:	2200      	movs	r2, #0
 800211c:	4906      	ldr	r1, [pc, #24]	@ (8002138 <HAL_I2C_Master_Receive+0x22c>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fa76 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e11a      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
 800212e:	bf00      	nop
 8002130:	00100002 	.word	0x00100002
 8002134:	ffff0000 	.word	0xffff0000
 8002138:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021b0:	e0c4      	b.n	800233c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b8:	2200      	movs	r2, #0
 80021ba:	496c      	ldr	r1, [pc, #432]	@ (800236c <HAL_I2C_Master_Receive+0x460>)
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fa27 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cb      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002214:	2200      	movs	r2, #0
 8002216:	4955      	ldr	r1, [pc, #340]	@ (800236c <HAL_I2C_Master_Receive+0x460>)
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f9f9 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e09d      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800229c:	e04e      	b.n	800233c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fb5e 	bl	8002964 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e058      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d124      	bne.n	800233c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d107      	bne.n	800230a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002308:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	f47f aeb6 	bne.w	80020b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3728      	adds	r7, #40	@ 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	00010004 	.word	0x00010004

08002370 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	460b      	mov	r3, r1
 800237e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d006      	beq.n	800239a <I2C_MasterRequestWrite+0x2a>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d003      	beq.n	800239a <I2C_MasterRequestWrite+0x2a>
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002398:	d108      	bne.n	80023ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00b      	b.n	80023c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	2b12      	cmp	r3, #18
 80023b2:	d107      	bne.n	80023c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f91d 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ea:	d103      	bne.n	80023f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e035      	b.n	8002464 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002400:	d108      	bne.n	8002414 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002410:	611a      	str	r2, [r3, #16]
 8002412:	e01b      	b.n	800244c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002414:	897b      	ldrh	r3, [r7, #10]
 8002416:	11db      	asrs	r3, r3, #7
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f003 0306 	and.w	r3, r3, #6
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f063 030f 	orn	r3, r3, #15
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	490e      	ldr	r1, [pc, #56]	@ (800246c <I2C_MasterRequestWrite+0xfc>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f966 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e010      	b.n	8002464 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4907      	ldr	r1, [pc, #28]	@ (8002470 <I2C_MasterRequestWrite+0x100>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f956 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	00010008 	.word	0x00010008
 8002470:	00010002 	.word	0x00010002

08002474 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	460b      	mov	r3, r1
 8002482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002498:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d006      	beq.n	80024ae <I2C_MasterRequestRead+0x3a>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d003      	beq.n	80024ae <I2C_MasterRequestRead+0x3a>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024ac:	d108      	bne.n	80024c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e00b      	b.n	80024d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	2b11      	cmp	r3, #17
 80024c6:	d107      	bne.n	80024d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f893 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024fe:	d103      	bne.n	8002508 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e079      	b.n	8002600 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002514:	d108      	bne.n	8002528 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]
 8002526:	e05f      	b.n	80025e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002528:	897b      	ldrh	r3, [r7, #10]
 800252a:	11db      	asrs	r3, r3, #7
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 0306 	and.w	r3, r3, #6
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f063 030f 	orn	r3, r3, #15
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4930      	ldr	r1, [pc, #192]	@ (8002608 <I2C_MasterRequestRead+0x194>)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f8dc 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e054      	b.n	8002600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002556:	897b      	ldrh	r3, [r7, #10]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4929      	ldr	r1, [pc, #164]	@ (800260c <I2C_MasterRequestRead+0x198>)
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f8cc 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e044      	b.n	8002600 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f831 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c2:	d103      	bne.n	80025cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e017      	b.n	8002600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	11db      	asrs	r3, r3, #7
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0306 	and.w	r3, r3, #6
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f063 030e 	orn	r3, r3, #14
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4907      	ldr	r1, [pc, #28]	@ (800260c <I2C_MasterRequestRead+0x198>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f888 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	00010008 	.word	0x00010008
 800260c:	00010002 	.word	0x00010002

08002610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	e048      	b.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002628:	d044      	beq.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7fe fdaf 	bl	800118c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d139      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10d      	bne.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x56>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	e00c      	b.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	429a      	cmp	r2, r3
 8002684:	d116      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e023      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10d      	bne.n	80026da <I2C_WaitOnFlagUntilTimeout+0xca>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	e00c      	b.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d093      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002712:	e071      	b.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	d123      	bne.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800273c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e067      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002772:	d041      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	f7fe fd0a 	bl	800118c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d302      	bcc.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d136      	bne.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d10c      	bne.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4013      	ands	r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e00b      	b.n	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e021      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10c      	bne.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e00b      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f af6d 	bne.w	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002850:	e034      	b.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8e3 	bl	8002a1e <I2C_IsAcknowledgeFailed>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e034      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002868:	d028      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7fe fc8f 	bl	800118c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11d      	bne.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d016      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	2b80      	cmp	r3, #128	@ 0x80
 80028c8:	d1c3      	bne.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e0:	e034      	b.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f89b 	bl	8002a1e <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e034      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f8:	d028      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe fc47 	bl	800118c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11d      	bne.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d016      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d1c3      	bne.n	80028e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002970:	e049      	b.n	8002a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d119      	bne.n	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0210 	mvn.w	r2, #16
 8002988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e030      	b.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	f7fe fbea 	bl	800118c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11d      	bne.n	8002a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d4:	2b40      	cmp	r3, #64	@ 0x40
 80029d6:	d016      	beq.n	8002a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e007      	b.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a10:	2b40      	cmp	r3, #64	@ 0x40
 8002a12:	d1ae      	bne.n	8002972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a34:	d11b      	bne.n	8002a6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f043 0204 	orr.w	r2, r3, #4
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cc      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b68      	ldr	r3, [pc, #416]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d90c      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b8      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad0:	4b59      	ldr	r3, [pc, #356]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae8:	4b53      	ldr	r3, [pc, #332]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a52      	ldr	r2, [pc, #328]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b50      	ldr	r3, [pc, #320]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	494d      	ldr	r1, [pc, #308]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d044      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d119      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e067      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b37      	ldr	r3, [pc, #220]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4934      	ldr	r1, [pc, #208]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fb0e 	bl	800118c <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe fb0a 	bl	800118c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d20c      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4916      	ldr	r1, [pc, #88]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	490e      	ldr	r1, [pc, #56]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c02:	f000 f855 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	@ (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	490a      	ldr	r1, [pc, #40]	@ (8002c3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
 8002c16:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1a:	4a09      	ldr	r2, [pc, #36]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fa6e 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	080056cc 	.word	0x080056cc
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000000 	.word	0x20000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	@ (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	080056dc 	.word	0x080056dc

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c8c:	f7ff ffdc 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0b5b      	lsrs	r3, r3, #13
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4903      	ldr	r1, [pc, #12]	@ (8002cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	080056dc 	.word	0x080056dc

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb4:	b0ae      	sub	sp, #184	@ 0xb8
 8002cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd6:	4bcb      	ldr	r3, [pc, #812]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	f200 8206 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	080030f1 	.word	0x080030f1
 8002cf4:	080030f1 	.word	0x080030f1
 8002cf8:	080030f1 	.word	0x080030f1
 8002cfc:	08002d29 	.word	0x08002d29
 8002d00:	080030f1 	.word	0x080030f1
 8002d04:	080030f1 	.word	0x080030f1
 8002d08:	080030f1 	.word	0x080030f1
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	080030f1 	.word	0x080030f1
 8002d14:	080030f1 	.word	0x080030f1
 8002d18:	080030f1 	.word	0x080030f1
 8002d1c:	08002f21 	.word	0x08002f21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4bb9      	ldr	r3, [pc, #740]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d26:	e1e7      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4bb8      	ldr	r3, [pc, #736]	@ (800300c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d2e:	e1e3      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4bb4      	ldr	r3, [pc, #720]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d071      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d48:	4bae      	ldr	r3, [pc, #696]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d6e:	4622      	mov	r2, r4
 8002d70:	462b      	mov	r3, r5
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	0159      	lsls	r1, r3, #5
 8002d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d80:	0150      	lsls	r0, r2, #5
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4621      	mov	r1, r4
 8002d88:	1a51      	subs	r1, r2, r1
 8002d8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002da0:	4649      	mov	r1, r9
 8002da2:	018b      	lsls	r3, r1, #6
 8002da4:	4641      	mov	r1, r8
 8002da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002daa:	4641      	mov	r1, r8
 8002dac:	018a      	lsls	r2, r1, #6
 8002dae:	4641      	mov	r1, r8
 8002db0:	1a51      	subs	r1, r2, r1
 8002db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002db4:	4649      	mov	r1, r9
 8002db6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002dc8:	4649      	mov	r1, r9
 8002dca:	00cb      	lsls	r3, r1, #3
 8002dcc:	4641      	mov	r1, r8
 8002dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	00ca      	lsls	r2, r1, #3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4622      	mov	r2, r4
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de2:	462b      	mov	r3, r5
 8002de4:	460a      	mov	r2, r1
 8002de6:	eb42 0303 	adc.w	r3, r2, r3
 8002dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002df8:	4629      	mov	r1, r5
 8002dfa:	024b      	lsls	r3, r1, #9
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e02:	4621      	mov	r1, r4
 8002e04:	024a      	lsls	r2, r1, #9
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e1c:	f7fd fa48 	bl	80002b0 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e2a:	e067      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2c:	4b75      	ldr	r3, [pc, #468]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e46:	2300      	movs	r3, #0
 8002e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e60:	0150      	lsls	r0, r2, #5
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4621      	mov	r1, r4
 8002e68:	1a51      	subs	r1, r2, r1
 8002e6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e80:	4649      	mov	r1, r9
 8002e82:	018b      	lsls	r3, r1, #6
 8002e84:	4641      	mov	r1, r8
 8002e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	018a      	lsls	r2, r1, #6
 8002e8e:	4641      	mov	r1, r8
 8002e90:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e94:	4649      	mov	r1, r9
 8002e96:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ea6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eae:	4692      	mov	sl, r2
 8002eb0:	469b      	mov	fp, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	eb1a 0303 	adds.w	r3, sl, r3
 8002eb8:	623b      	str	r3, [r7, #32]
 8002eba:	462b      	mov	r3, r5
 8002ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ece:	4629      	mov	r1, r5
 8002ed0:	028b      	lsls	r3, r1, #10
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed8:	4621      	mov	r1, r4
 8002eda:	028a      	lsls	r2, r1, #10
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ee8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002eea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002eee:	f7fd f9df 	bl	80002b0 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002efc:	4b41      	ldr	r3, [pc, #260]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	3301      	adds	r3, #1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f1e:	e0eb      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b38      	ldr	r3, [pc, #224]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2c:	4b35      	ldr	r3, [pc, #212]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d06b      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f38:	4b32      	ldr	r3, [pc, #200]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	2200      	movs	r2, #0
 8002f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f54:	4622      	mov	r2, r4
 8002f56:	462b      	mov	r3, r5
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	0159      	lsls	r1, r3, #5
 8002f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f66:	0150      	lsls	r0, r2, #5
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	1a51      	subs	r1, r2, r1
 8002f70:	61b9      	str	r1, [r7, #24]
 8002f72:	4629      	mov	r1, r5
 8002f74:	eb63 0301 	sbc.w	r3, r3, r1
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f86:	4659      	mov	r1, fp
 8002f88:	018b      	lsls	r3, r1, #6
 8002f8a:	4651      	mov	r1, sl
 8002f8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f90:	4651      	mov	r1, sl
 8002f92:	018a      	lsls	r2, r1, #6
 8002f94:	4651      	mov	r1, sl
 8002f96:	ebb2 0801 	subs.w	r8, r2, r1
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb4:	4690      	mov	r8, r2
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	4623      	mov	r3, r4
 8002fba:	eb18 0303 	adds.w	r3, r8, r3
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	eb49 0303 	adc.w	r3, r9, r3
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	024b      	lsls	r3, r1, #9
 8002fd8:	4621      	mov	r1, r4
 8002fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fde:	4621      	mov	r1, r4
 8002fe0:	024a      	lsls	r2, r1, #9
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fea:	2200      	movs	r2, #0
 8002fec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ff4:	f7fd f95c 	bl	80002b0 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003002:	e065      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x420>
 8003004:	40023800 	.word	0x40023800
 8003008:	00f42400 	.word	0x00f42400
 800300c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003010:	4b3d      	ldr	r3, [pc, #244]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x458>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	2200      	movs	r2, #0
 8003018:	4618      	mov	r0, r3
 800301a:	4611      	mov	r1, r2
 800301c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003020:	653b      	str	r3, [r7, #80]	@ 0x50
 8003022:	2300      	movs	r3, #0
 8003024:	657b      	str	r3, [r7, #84]	@ 0x54
 8003026:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800302a:	4642      	mov	r2, r8
 800302c:	464b      	mov	r3, r9
 800302e:	f04f 0000 	mov.w	r0, #0
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	0159      	lsls	r1, r3, #5
 8003038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800303c:	0150      	lsls	r0, r2, #5
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4641      	mov	r1, r8
 8003044:	1a51      	subs	r1, r2, r1
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	4649      	mov	r1, r9
 800304a:	eb63 0301 	sbc.w	r3, r3, r1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800305c:	4659      	mov	r1, fp
 800305e:	018b      	lsls	r3, r1, #6
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003066:	4651      	mov	r1, sl
 8003068:	018a      	lsls	r2, r1, #6
 800306a:	4651      	mov	r1, sl
 800306c:	1a54      	subs	r4, r2, r1
 800306e:	4659      	mov	r1, fp
 8003070:	eb63 0501 	sbc.w	r5, r3, r1
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	00eb      	lsls	r3, r5, #3
 800307e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003082:	00e2      	lsls	r2, r4, #3
 8003084:	4614      	mov	r4, r2
 8003086:	461d      	mov	r5, r3
 8003088:	4643      	mov	r3, r8
 800308a:	18e3      	adds	r3, r4, r3
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	464b      	mov	r3, r9
 8003090:	eb45 0303 	adc.w	r3, r5, r3
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030a2:	4629      	mov	r1, r5
 80030a4:	028b      	lsls	r3, r1, #10
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030ac:	4621      	mov	r1, r4
 80030ae:	028a      	lsls	r2, r1, #10
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030b8:	2200      	movs	r2, #0
 80030ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030c2:	f7fd f8f5 	bl	80002b0 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4613      	mov	r3, r2
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x458>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0f1b      	lsrs	r3, r3, #28
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80030de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ee:	e003      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_RCC_GetSysClockFreq+0x45c>)
 80030f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	37b8      	adds	r7, #184	@ 0xb8
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400

08003110 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e28d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8083 	beq.w	8003236 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003130:	4b94      	ldr	r3, [pc, #592]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d019      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800313c:	4b91      	ldr	r3, [pc, #580]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
        || \
 8003144:	2b08      	cmp	r3, #8
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003148:	4b8e      	ldr	r3, [pc, #568]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b8b      	ldr	r3, [pc, #556]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b88      	ldr	r3, [pc, #544]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b84      	ldr	r3, [pc, #528]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x124>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e25a      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x90>
 8003192:	4b7c      	ldr	r3, [pc, #496]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7b      	ldr	r2, [pc, #492]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xb4>
 80031aa:	4b76      	ldr	r3, [pc, #472]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b73      	ldr	r3, [pc, #460]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a72      	ldr	r2, [pc, #456]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd ffd2 	bl	800118c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fd ffce 	bl	800118c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	@ 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e21f      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b61      	ldr	r3, [pc, #388]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xdc>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fd ffbe 	bl	800118c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd ffba 	bl	800118c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e20b      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b57      	ldr	r3, [pc, #348]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x104>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d06f      	beq.n	8003322 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003242:	4b50      	ldr	r3, [pc, #320]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800324e:	4b4d      	ldr	r3, [pc, #308]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
        || \
 8003256:	2b08      	cmp	r3, #8
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800325a:	4b4a      	ldr	r3, [pc, #296]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b44      	ldr	r3, [pc, #272]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1d3      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4937      	ldr	r1, [pc, #220]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <HAL_RCC_OscConfig+0x278>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd ff67 	bl	800118c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd ff63 	bl	800118c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1b4      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b28      	ldr	r3, [pc, #160]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4925      	ldr	r1, [pc, #148]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x278>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fd ff46 	bl	800118c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003304:	f7fd ff42 	bl	800118c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e193      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d036      	beq.n	800339c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fd ff26 	bl	800118c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fd ff22 	bl	800118c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e173      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x234>
 8003362:	e01b      	b.n	800339c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b09      	ldr	r3, [pc, #36]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fd ff0f 	bl	800118c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00e      	b.n	8003390 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003372:	f7fd ff0b 	bl	800118c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d907      	bls.n	8003390 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e15c      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 8003384:	40023800 	.word	0x40023800
 8003388:	42470000 	.word	0x42470000
 800338c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b8a      	ldr	r3, [pc, #552]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b83      	ldr	r3, [pc, #524]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b7f      	ldr	r3, [pc, #508]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	4a7e      	ldr	r2, [pc, #504]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ca:	4b7c      	ldr	r3, [pc, #496]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b79      	ldr	r3, [pc, #484]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b76      	ldr	r3, [pc, #472]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fd fecb 	bl	800118c <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fd fec7 	bl	800118c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e118      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b6c      	ldr	r3, [pc, #432]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x31e>
 8003420:	4b66      	ldr	r3, [pc, #408]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003424:	4a65      	ldr	r2, [pc, #404]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	@ 0x70
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x340>
 8003436:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	4a60      	ldr	r2, [pc, #384]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	@ 0x70
 8003442:	4b5e      	ldr	r3, [pc, #376]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	4a5d      	ldr	r2, [pc, #372]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	@ 0x70
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 8003450:	4b5a      	ldr	r3, [pc, #360]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a59      	ldr	r2, [pc, #356]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
 800345c:	4b57      	ldr	r3, [pc, #348]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003460:	4a56      	ldr	r2, [pc, #344]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fd fe8c 	bl	800118c <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fd fe88 	bl	800118c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0d7      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b4b      	ldr	r3, [pc, #300]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCC_OscConfig+0x368>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fd fe76 	bl	800118c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fd fe72 	bl	800118c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0c1      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	4b40      	ldr	r3, [pc, #256]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	4a3a      	ldr	r2, [pc, #232]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80ad 	beq.w	800363c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e2:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d060      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d145      	bne.n	8003582 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b33      	ldr	r3, [pc, #204]	@ (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd fe46 	bl	800118c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fd fe42 	bl	800118c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e093      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b29      	ldr	r3, [pc, #164]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	071b      	lsls	r3, r3, #28
 800354e:	491b      	ldr	r1, [pc, #108]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fe17 	bl	800118c <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fd fe13 	bl	800118c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e064      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x452>
 8003580:	e05c      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd fe00 	bl	800118c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fd fdfc 	bl	800118c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
 80035ae:	e045      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e040      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003648 <HAL_RCC_OscConfig+0x538>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d030      	beq.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d129      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d122      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	4293      	cmp	r3, r2
 8003602:	d119      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	3b01      	subs	r3, #1
 8003612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d10f      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e042      	b.n	80036e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fc76 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fd69 	bl	8004168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	d175      	bne.n	80037f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Transmit+0x2c>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e06e      	b.n	80037fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2221      	movs	r2, #33	@ 0x21
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372a:	f7fd fd2f 	bl	800118c <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003744:	d108      	bne.n	8003758 <HAL_UART_Transmit+0x6c>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e003      	b.n	8003760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003760:	e02e      	b.n	80037c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2180      	movs	r1, #128	@ 0x80
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fb05 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e03a      	b.n	80037fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3302      	adds	r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	e007      	b.n	80037b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3301      	adds	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1cb      	bne.n	8003762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2140      	movs	r1, #64	@ 0x40
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fad1 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e006      	b.n	80037fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e000      	b.n	80037fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
  }
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b0ba      	sub	sp, #232	@ 0xe8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_UART_IRQHandler+0x66>
 8003856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fbc2 	bl	8003fec <UART_Receive_IT>
      return;
 8003868:	e25b      	b.n	8003d22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800386a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80de 	beq.w	8003a30 <HAL_UART_IRQHandler+0x22c>
 8003874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003884:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80d1 	beq.w	8003a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_UART_IRQHandler+0xae>
 800389a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_UART_IRQHandler+0xd2>
 80038be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f043 0202 	orr.w	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_UART_IRQHandler+0xf6>
 80038e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	f043 0204 	orr.w	r2, r3, #4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d011      	beq.n	800392a <HAL_UART_IRQHandler+0x126>
 8003906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f043 0208 	orr.w	r2, r3, #8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 81f2 	beq.w	8003d18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_UART_IRQHandler+0x14e>
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fb4d 	bl	8003fec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b40      	cmp	r3, #64	@ 0x40
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_UART_IRQHandler+0x17a>
 8003976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d04f      	beq.n	8003a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa55 	bl	8003e2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d141      	bne.n	8003a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3314      	adds	r3, #20
 80039ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1d9      	bne.n	8003992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d013      	beq.n	8003a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ea:	4a7e      	ldr	r2, [pc, #504]	@ (8003be4 <HAL_UART_IRQHandler+0x3e0>)
 80039ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fe77 	bl	80016e6 <HAL_DMA_Abort_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	e00e      	b.n	8003a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f99e 	bl	8003d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a14:	e00a      	b.n	8003a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f99a 	bl	8003d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	e006      	b.n	8003a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f996 	bl	8003d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a2a:	e175      	b.n	8003d18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	bf00      	nop
    return;
 8003a2e:	e173      	b.n	8003d18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f040 814f 	bne.w	8003cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8148 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8141 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a76:	2b40      	cmp	r3, #64	@ 0x40
 8003a78:	f040 80b6 	bne.w	8003be8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8145 	beq.w	8003d1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	f080 813e 	bcs.w	8003d1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab2:	f000 8088 	beq.w	8003bc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1d9      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e1      	bne.n	8003b02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3314      	adds	r3, #20
 8003b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e3      	bne.n	8003b3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b96:	f023 0310 	bic.w	r3, r3, #16
 8003b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ba8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003baa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e3      	bne.n	8003b84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fd20 	bl	8001606 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f8c1 	bl	8003d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003be2:	e09b      	b.n	8003d1c <HAL_UART_IRQHandler+0x518>
 8003be4:	08003ef5 	.word	0x08003ef5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 808e 	beq.w	8003d20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8089 	beq.w	8003d20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c32:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e3      	bne.n	8003c0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	623b      	str	r3, [r7, #32]
   return(result);
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3314      	adds	r3, #20
 8003c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e3      	bne.n	8003c46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0310 	bic.w	r3, r3, #16
 8003ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cb0:	61fa      	str	r2, [r7, #28]
 8003cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	69b9      	ldr	r1, [r7, #24]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e3      	bne.n	8003c8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f847 	bl	8003d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd6:	e023      	b.n	8003d20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x4f4>
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f913 	bl	8003f1c <UART_Transmit_IT>
    return;
 8003cf6:	e014      	b.n	8003d22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00e      	beq.n	8003d22 <HAL_UART_IRQHandler+0x51e>
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f953 	bl	8003fbc <UART_EndTransmit_IT>
    return;
 8003d16:	e004      	b.n	8003d22 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d18:	bf00      	nop
 8003d1a:	e002      	b.n	8003d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d20:	bf00      	nop
  }
}
 8003d22:	37e8      	adds	r7, #232	@ 0xe8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	e03b      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d94:	d037      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d96:	f7fd f9f9 	bl	800118c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <UART_WaitOnFlagUntilTimeout+0x30>
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e03a      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d023      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b80      	cmp	r3, #128	@ 0x80
 8003dc2:	d020      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d01d      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d116      	bne.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f81d 	bl	8003e2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2208      	movs	r2, #8
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00f      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	bf0c      	ite	eq
 8003e16:	2301      	moveq	r3, #1
 8003e18:	2300      	movne	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d0b4      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b095      	sub	sp, #84	@ 0x54
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e56:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3314      	adds	r3, #20
 8003e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d119      	bne.n	8003eda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f023 0310 	bic.w	r3, r3, #16
 8003ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ec6:	61ba      	str	r2, [r7, #24]
 8003ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e5      	bne.n	8003ea6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ee8:	bf00      	nop
 8003eea:	3754      	adds	r7, #84	@ 0x54
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff ff1e 	bl	8003d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b21      	cmp	r3, #33	@ 0x21
 8003f2e:	d13e      	bne.n	8003fae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f38:	d114      	bne.n	8003f64 <UART_Transmit_IT+0x48>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d110      	bne.n	8003f64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]
 8003f62:	e008      	b.n	8003f76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	1c59      	adds	r1, r3, #1
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6211      	str	r1, [r2, #32]
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4619      	mov	r1, r3
 8003f84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fea3 	bl	8003d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08c      	sub	sp, #48	@ 0x30
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b22      	cmp	r3, #34	@ 0x22
 8003ffe:	f040 80ae 	bne.w	800415e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400a:	d117      	bne.n	800403c <UART_Receive_IT+0x50>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d113      	bne.n	800403c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	b29b      	uxth	r3, r3
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	b29a      	uxth	r2, r3
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	629a      	str	r2, [r3, #40]	@ 0x28
 800403a:	e026      	b.n	800408a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004042:	2300      	movs	r3, #0
 8004044:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404e:	d007      	beq.n	8004060 <UART_Receive_IT+0x74>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <UART_Receive_IT+0x82>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e008      	b.n	8004080 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800407a:	b2da      	uxtb	r2, r3
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29b      	uxth	r3, r3
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4619      	mov	r1, r3
 8004098:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800409a:	2b00      	cmp	r3, #0
 800409c:	d15d      	bne.n	800415a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0220 	bic.w	r2, r2, #32
 80040ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d135      	bne.n	8004150 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	613b      	str	r3, [r7, #16]
   return(result);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f023 0310 	bic.w	r3, r3, #16
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410a:	623a      	str	r2, [r7, #32]
 800410c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	69f9      	ldr	r1, [r7, #28]
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	61bb      	str	r3, [r7, #24]
   return(result);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e5      	bne.n	80040ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b10      	cmp	r3, #16
 800412a:	d10a      	bne.n	8004142 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fe0b 	bl	8003d64 <HAL_UARTEx_RxEventCallback>
 800414e:	e002      	b.n	8004156 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fdf3 	bl	8003d3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e002      	b.n	8004160 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3730      	adds	r7, #48	@ 0x30
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b0c0      	sub	sp, #256	@ 0x100
 800416e:	af00      	add	r7, sp, #0
 8004170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	ea40 0301 	orr.w	r3, r0, r1
 8004190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041c0:	f021 010c 	bic.w	r1, r1, #12
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041ce:	430b      	orrs	r3, r1
 80041d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e2:	6999      	ldr	r1, [r3, #24]
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	ea40 0301 	orr.w	r3, r0, r1
 80041ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b8f      	ldr	r3, [pc, #572]	@ (8004434 <UART_SetConfig+0x2cc>)
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d005      	beq.n	8004208 <UART_SetConfig+0xa0>
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b8d      	ldr	r3, [pc, #564]	@ (8004438 <UART_SetConfig+0x2d0>)
 8004204:	429a      	cmp	r2, r3
 8004206:	d104      	bne.n	8004212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe fd3e 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 800420c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004210:	e003      	b.n	800421a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004212:	f7fe fd25 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8004216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004224:	f040 810c 	bne.w	8004440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	1891      	adds	r1, r2, r2
 8004240:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004242:	415b      	adcs	r3, r3
 8004244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800424a:	4621      	mov	r1, r4
 800424c:	eb12 0801 	adds.w	r8, r2, r1
 8004250:	4629      	mov	r1, r5
 8004252:	eb43 0901 	adc.w	r9, r3, r1
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426a:	4690      	mov	r8, r2
 800426c:	4699      	mov	r9, r3
 800426e:	4623      	mov	r3, r4
 8004270:	eb18 0303 	adds.w	r3, r8, r3
 8004274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004278:	462b      	mov	r3, r5
 800427a:	eb49 0303 	adc.w	r3, r9, r3
 800427e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800428e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004296:	460b      	mov	r3, r1
 8004298:	18db      	adds	r3, r3, r3
 800429a:	653b      	str	r3, [r7, #80]	@ 0x50
 800429c:	4613      	mov	r3, r2
 800429e:	eb42 0303 	adc.w	r3, r2, r3
 80042a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042ac:	f7fc f800 	bl	80002b0 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b61      	ldr	r3, [pc, #388]	@ (800443c <UART_SetConfig+0x2d4>)
 80042b6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	011c      	lsls	r4, r3, #4
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042d8:	415b      	adcs	r3, r3
 80042da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042e0:	4641      	mov	r1, r8
 80042e2:	eb12 0a01 	adds.w	sl, r2, r1
 80042e6:	4649      	mov	r1, r9
 80042e8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004300:	4692      	mov	sl, r2
 8004302:	469b      	mov	fp, r3
 8004304:	4643      	mov	r3, r8
 8004306:	eb1a 0303 	adds.w	r3, sl, r3
 800430a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800430e:	464b      	mov	r3, r9
 8004310:	eb4b 0303 	adc.w	r3, fp, r3
 8004314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800432c:	460b      	mov	r3, r1
 800432e:	18db      	adds	r3, r3, r3
 8004330:	643b      	str	r3, [r7, #64]	@ 0x40
 8004332:	4613      	mov	r3, r2
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	647b      	str	r3, [r7, #68]	@ 0x44
 800433a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800433e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004342:	f7fb ffb5 	bl	80002b0 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4611      	mov	r1, r2
 800434c:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <UART_SetConfig+0x2d4>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2264      	movs	r2, #100	@ 0x64
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004362:	4b36      	ldr	r3, [pc, #216]	@ (800443c <UART_SetConfig+0x2d4>)
 8004364:	fba3 2302 	umull	r2, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004370:	441c      	add	r4, r3
 8004372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800437c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800438c:	415b      	adcs	r3, r3
 800438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004394:	4641      	mov	r1, r8
 8004396:	1851      	adds	r1, r2, r1
 8004398:	6339      	str	r1, [r7, #48]	@ 0x30
 800439a:	4649      	mov	r1, r9
 800439c:	414b      	adcs	r3, r1
 800439e:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043ac:	4659      	mov	r1, fp
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4651      	mov	r1, sl
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4642      	mov	r2, r8
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043c8:	464b      	mov	r3, r9
 80043ca:	460a      	mov	r2, r1
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043e8:	460b      	mov	r3, r1
 80043ea:	18db      	adds	r3, r3, r3
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ee:	4613      	mov	r3, r2
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043fe:	f7fb ff57 	bl	80002b0 <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4b0d      	ldr	r3, [pc, #52]	@ (800443c <UART_SetConfig+0x2d4>)
 8004408:	fba3 1302 	umull	r1, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	2164      	movs	r1, #100	@ 0x64
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	3332      	adds	r3, #50	@ 0x32
 800441a:	4a08      	ldr	r2, [pc, #32]	@ (800443c <UART_SetConfig+0x2d4>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	f003 0207 	and.w	r2, r3, #7
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4422      	add	r2, r4
 800442e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004430:	e106      	b.n	8004640 <UART_SetConfig+0x4d8>
 8004432:	bf00      	nop
 8004434:	40011000 	.word	0x40011000
 8004438:	40011400 	.word	0x40011400
 800443c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800444a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800444e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	6239      	str	r1, [r7, #32]
 800445a:	415b      	adcs	r3, r3
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	4641      	mov	r1, r8
 8004464:	1854      	adds	r4, r2, r1
 8004466:	4649      	mov	r1, r9
 8004468:	eb43 0501 	adc.w	r5, r3, r1
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	00eb      	lsls	r3, r5, #3
 8004476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447a:	00e2      	lsls	r2, r4, #3
 800447c:	4614      	mov	r4, r2
 800447e:	461d      	mov	r5, r3
 8004480:	4643      	mov	r3, r8
 8004482:	18e3      	adds	r3, r4, r3
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004488:	464b      	mov	r3, r9
 800448a:	eb45 0303 	adc.w	r3, r5, r3
 800448e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800449e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044ae:	4629      	mov	r1, r5
 80044b0:	008b      	lsls	r3, r1, #2
 80044b2:	4621      	mov	r1, r4
 80044b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b8:	4621      	mov	r1, r4
 80044ba:	008a      	lsls	r2, r1, #2
 80044bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044c0:	f7fb fef6 	bl	80002b0 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4b60      	ldr	r3, [pc, #384]	@ (800464c <UART_SetConfig+0x4e4>)
 80044ca:	fba3 2302 	umull	r2, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	011c      	lsls	r4, r3, #4
 80044d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	61b9      	str	r1, [r7, #24]
 80044ec:	415b      	adcs	r3, r3
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	4641      	mov	r1, r8
 80044f6:	1851      	adds	r1, r2, r1
 80044f8:	6139      	str	r1, [r7, #16]
 80044fa:	4649      	mov	r1, r9
 80044fc:	414b      	adcs	r3, r1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800450c:	4659      	mov	r1, fp
 800450e:	00cb      	lsls	r3, r1, #3
 8004510:	4651      	mov	r1, sl
 8004512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004516:	4651      	mov	r1, sl
 8004518:	00ca      	lsls	r2, r1, #3
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	4603      	mov	r3, r0
 8004520:	4642      	mov	r2, r8
 8004522:	189b      	adds	r3, r3, r2
 8004524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004528:	464b      	mov	r3, r9
 800452a:	460a      	mov	r2, r1
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800453e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800455e:	f7fb fea7 	bl	80002b0 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4611      	mov	r1, r2
 8004568:	4b38      	ldr	r3, [pc, #224]	@ (800464c <UART_SetConfig+0x4e4>)
 800456a:	fba3 2301 	umull	r2, r3, r3, r1
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2264      	movs	r2, #100	@ 0x64
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	1acb      	subs	r3, r1, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	@ 0x32
 800457c:	4a33      	ldr	r2, [pc, #204]	@ (800464c <UART_SetConfig+0x4e4>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004588:	441c      	add	r4, r3
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	673b      	str	r3, [r7, #112]	@ 0x70
 8004592:	677a      	str	r2, [r7, #116]	@ 0x74
 8004594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	1891      	adds	r1, r2, r2
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	415b      	adcs	r3, r3
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a8:	4641      	mov	r1, r8
 80045aa:	1851      	adds	r1, r2, r1
 80045ac:	6039      	str	r1, [r7, #0]
 80045ae:	4649      	mov	r1, r9
 80045b0:	414b      	adcs	r3, r1
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045c0:	4659      	mov	r1, fp
 80045c2:	00cb      	lsls	r3, r1, #3
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ca:	4651      	mov	r1, sl
 80045cc:	00ca      	lsls	r2, r1, #3
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	4642      	mov	r2, r8
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045da:	464b      	mov	r3, r9
 80045dc:	460a      	mov	r2, r1
 80045de:	eb42 0303 	adc.w	r3, r2, r3
 80045e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045fc:	4649      	mov	r1, r9
 80045fe:	008b      	lsls	r3, r1, #2
 8004600:	4641      	mov	r1, r8
 8004602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004606:	4641      	mov	r1, r8
 8004608:	008a      	lsls	r2, r1, #2
 800460a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800460e:	f7fb fe4f 	bl	80002b0 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <UART_SetConfig+0x4e4>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	@ 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	3332      	adds	r3, #50	@ 0x32
 800462a:	4a08      	ldr	r2, [pc, #32]	@ (800464c <UART_SetConfig+0x4e4>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4422      	add	r2, r4
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004646:	46bd      	mov	sp, r7
 8004648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464c:	51eb851f 	.word	0x51eb851f

08004650 <malloc>:
 8004650:	4b02      	ldr	r3, [pc, #8]	@ (800465c <malloc+0xc>)
 8004652:	4601      	mov	r1, r0
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	f000 b82d 	b.w	80046b4 <_malloc_r>
 800465a:	bf00      	nop
 800465c:	20000018 	.word	0x20000018

08004660 <free>:
 8004660:	4b02      	ldr	r3, [pc, #8]	@ (800466c <free+0xc>)
 8004662:	4601      	mov	r1, r0
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	f000 ba29 	b.w	8004abc <_free_r>
 800466a:	bf00      	nop
 800466c:	20000018 	.word	0x20000018

08004670 <sbrk_aligned>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4e0f      	ldr	r6, [pc, #60]	@ (80046b0 <sbrk_aligned+0x40>)
 8004674:	460c      	mov	r4, r1
 8004676:	6831      	ldr	r1, [r6, #0]
 8004678:	4605      	mov	r5, r0
 800467a:	b911      	cbnz	r1, 8004682 <sbrk_aligned+0x12>
 800467c:	f000 f9e0 	bl	8004a40 <_sbrk_r>
 8004680:	6030      	str	r0, [r6, #0]
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f9db 	bl	8004a40 <_sbrk_r>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d103      	bne.n	8004696 <sbrk_aligned+0x26>
 800468e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004692:	4620      	mov	r0, r4
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	1cc4      	adds	r4, r0, #3
 8004698:	f024 0403 	bic.w	r4, r4, #3
 800469c:	42a0      	cmp	r0, r4
 800469e:	d0f8      	beq.n	8004692 <sbrk_aligned+0x22>
 80046a0:	1a21      	subs	r1, r4, r0
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 f9cc 	bl	8004a40 <_sbrk_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d1f2      	bne.n	8004692 <sbrk_aligned+0x22>
 80046ac:	e7ef      	b.n	800468e <sbrk_aligned+0x1e>
 80046ae:	bf00      	nop
 80046b0:	20000198 	.word	0x20000198

080046b4 <_malloc_r>:
 80046b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b8:	1ccd      	adds	r5, r1, #3
 80046ba:	f025 0503 	bic.w	r5, r5, #3
 80046be:	3508      	adds	r5, #8
 80046c0:	2d0c      	cmp	r5, #12
 80046c2:	bf38      	it	cc
 80046c4:	250c      	movcc	r5, #12
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	4606      	mov	r6, r0
 80046ca:	db01      	blt.n	80046d0 <_malloc_r+0x1c>
 80046cc:	42a9      	cmp	r1, r5
 80046ce:	d904      	bls.n	80046da <_malloc_r+0x26>
 80046d0:	230c      	movs	r3, #12
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	2000      	movs	r0, #0
 80046d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047b0 <_malloc_r+0xfc>
 80046de:	f000 f869 	bl	80047b4 <__malloc_lock>
 80046e2:	f8d8 3000 	ldr.w	r3, [r8]
 80046e6:	461c      	mov	r4, r3
 80046e8:	bb44      	cbnz	r4, 800473c <_malloc_r+0x88>
 80046ea:	4629      	mov	r1, r5
 80046ec:	4630      	mov	r0, r6
 80046ee:	f7ff ffbf 	bl	8004670 <sbrk_aligned>
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	4604      	mov	r4, r0
 80046f6:	d158      	bne.n	80047aa <_malloc_r+0xf6>
 80046f8:	f8d8 4000 	ldr.w	r4, [r8]
 80046fc:	4627      	mov	r7, r4
 80046fe:	2f00      	cmp	r7, #0
 8004700:	d143      	bne.n	800478a <_malloc_r+0xd6>
 8004702:	2c00      	cmp	r4, #0
 8004704:	d04b      	beq.n	800479e <_malloc_r+0xea>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4639      	mov	r1, r7
 800470a:	4630      	mov	r0, r6
 800470c:	eb04 0903 	add.w	r9, r4, r3
 8004710:	f000 f996 	bl	8004a40 <_sbrk_r>
 8004714:	4581      	cmp	r9, r0
 8004716:	d142      	bne.n	800479e <_malloc_r+0xea>
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	1a6d      	subs	r5, r5, r1
 800471c:	4629      	mov	r1, r5
 800471e:	4630      	mov	r0, r6
 8004720:	f7ff ffa6 	bl	8004670 <sbrk_aligned>
 8004724:	3001      	adds	r0, #1
 8004726:	d03a      	beq.n	800479e <_malloc_r+0xea>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	442b      	add	r3, r5
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	f8d8 3000 	ldr.w	r3, [r8]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	bb62      	cbnz	r2, 8004790 <_malloc_r+0xdc>
 8004736:	f8c8 7000 	str.w	r7, [r8]
 800473a:	e00f      	b.n	800475c <_malloc_r+0xa8>
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	1b52      	subs	r2, r2, r5
 8004740:	d420      	bmi.n	8004784 <_malloc_r+0xd0>
 8004742:	2a0b      	cmp	r2, #11
 8004744:	d917      	bls.n	8004776 <_malloc_r+0xc2>
 8004746:	1961      	adds	r1, r4, r5
 8004748:	42a3      	cmp	r3, r4
 800474a:	6025      	str	r5, [r4, #0]
 800474c:	bf18      	it	ne
 800474e:	6059      	strne	r1, [r3, #4]
 8004750:	6863      	ldr	r3, [r4, #4]
 8004752:	bf08      	it	eq
 8004754:	f8c8 1000 	streq.w	r1, [r8]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4630      	mov	r0, r6
 800475e:	f000 f82f 	bl	80047c0 <__malloc_unlock>
 8004762:	f104 000b 	add.w	r0, r4, #11
 8004766:	1d23      	adds	r3, r4, #4
 8004768:	f020 0007 	bic.w	r0, r0, #7
 800476c:	1ac2      	subs	r2, r0, r3
 800476e:	bf1c      	itt	ne
 8004770:	1a1b      	subne	r3, r3, r0
 8004772:	50a3      	strne	r3, [r4, r2]
 8004774:	e7af      	b.n	80046d6 <_malloc_r+0x22>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	42a3      	cmp	r3, r4
 800477a:	bf0c      	ite	eq
 800477c:	f8c8 2000 	streq.w	r2, [r8]
 8004780:	605a      	strne	r2, [r3, #4]
 8004782:	e7eb      	b.n	800475c <_malloc_r+0xa8>
 8004784:	4623      	mov	r3, r4
 8004786:	6864      	ldr	r4, [r4, #4]
 8004788:	e7ae      	b.n	80046e8 <_malloc_r+0x34>
 800478a:	463c      	mov	r4, r7
 800478c:	687f      	ldr	r7, [r7, #4]
 800478e:	e7b6      	b.n	80046fe <_malloc_r+0x4a>
 8004790:	461a      	mov	r2, r3
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	42a3      	cmp	r3, r4
 8004796:	d1fb      	bne.n	8004790 <_malloc_r+0xdc>
 8004798:	2300      	movs	r3, #0
 800479a:	6053      	str	r3, [r2, #4]
 800479c:	e7de      	b.n	800475c <_malloc_r+0xa8>
 800479e:	230c      	movs	r3, #12
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 f80c 	bl	80047c0 <__malloc_unlock>
 80047a8:	e794      	b.n	80046d4 <_malloc_r+0x20>
 80047aa:	6005      	str	r5, [r0, #0]
 80047ac:	e7d6      	b.n	800475c <_malloc_r+0xa8>
 80047ae:	bf00      	nop
 80047b0:	2000019c 	.word	0x2000019c

080047b4 <__malloc_lock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	@ (80047bc <__malloc_lock+0x8>)
 80047b6:	f000 b97e 	b.w	8004ab6 <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	200002dc 	.word	0x200002dc

080047c0 <__malloc_unlock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__malloc_unlock+0x8>)
 80047c2:	f000 b979 	b.w	8004ab8 <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	200002dc 	.word	0x200002dc

080047cc <std>:
 80047cc:	2300      	movs	r3, #0
 80047ce:	b510      	push	{r4, lr}
 80047d0:	4604      	mov	r4, r0
 80047d2:	e9c0 3300 	strd	r3, r3, [r0]
 80047d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047da:	6083      	str	r3, [r0, #8]
 80047dc:	8181      	strh	r1, [r0, #12]
 80047de:	6643      	str	r3, [r0, #100]	@ 0x64
 80047e0:	81c2      	strh	r2, [r0, #14]
 80047e2:	6183      	str	r3, [r0, #24]
 80047e4:	4619      	mov	r1, r3
 80047e6:	2208      	movs	r2, #8
 80047e8:	305c      	adds	r0, #92	@ 0x5c
 80047ea:	f000 f921 	bl	8004a30 <memset>
 80047ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <std+0x58>)
 80047f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80047f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <std+0x5c>)
 80047f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047f6:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <std+0x60>)
 80047f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <std+0x64>)
 80047fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <std+0x68>)
 8004800:	6224      	str	r4, [r4, #32]
 8004802:	429c      	cmp	r4, r3
 8004804:	d006      	beq.n	8004814 <std+0x48>
 8004806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800480a:	4294      	cmp	r4, r2
 800480c:	d002      	beq.n	8004814 <std+0x48>
 800480e:	33d0      	adds	r3, #208	@ 0xd0
 8004810:	429c      	cmp	r4, r3
 8004812:	d105      	bne.n	8004820 <std+0x54>
 8004814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f000 b94a 	b.w	8004ab4 <__retarget_lock_init_recursive>
 8004820:	bd10      	pop	{r4, pc}
 8004822:	bf00      	nop
 8004824:	08005249 	.word	0x08005249
 8004828:	0800526b 	.word	0x0800526b
 800482c:	080052a3 	.word	0x080052a3
 8004830:	080052c7 	.word	0x080052c7
 8004834:	200001a0 	.word	0x200001a0

08004838 <stdio_exit_handler>:
 8004838:	4a02      	ldr	r2, [pc, #8]	@ (8004844 <stdio_exit_handler+0xc>)
 800483a:	4903      	ldr	r1, [pc, #12]	@ (8004848 <stdio_exit_handler+0x10>)
 800483c:	4803      	ldr	r0, [pc, #12]	@ (800484c <stdio_exit_handler+0x14>)
 800483e:	f000 b869 	b.w	8004914 <_fwalk_sglue>
 8004842:	bf00      	nop
 8004844:	2000000c 	.word	0x2000000c
 8004848:	080051f9 	.word	0x080051f9
 800484c:	2000001c 	.word	0x2000001c

08004850 <cleanup_stdio>:
 8004850:	6841      	ldr	r1, [r0, #4]
 8004852:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <cleanup_stdio+0x34>)
 8004854:	4299      	cmp	r1, r3
 8004856:	b510      	push	{r4, lr}
 8004858:	4604      	mov	r4, r0
 800485a:	d001      	beq.n	8004860 <cleanup_stdio+0x10>
 800485c:	f000 fccc 	bl	80051f8 <_fflush_r>
 8004860:	68a1      	ldr	r1, [r4, #8]
 8004862:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <cleanup_stdio+0x38>)
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <cleanup_stdio+0x1e>
 8004868:	4620      	mov	r0, r4
 800486a:	f000 fcc5 	bl	80051f8 <_fflush_r>
 800486e:	68e1      	ldr	r1, [r4, #12]
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <cleanup_stdio+0x3c>)
 8004872:	4299      	cmp	r1, r3
 8004874:	d004      	beq.n	8004880 <cleanup_stdio+0x30>
 8004876:	4620      	mov	r0, r4
 8004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800487c:	f000 bcbc 	b.w	80051f8 <_fflush_r>
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	200001a0 	.word	0x200001a0
 8004888:	20000208 	.word	0x20000208
 800488c:	20000270 	.word	0x20000270

08004890 <global_stdio_init.part.0>:
 8004890:	b510      	push	{r4, lr}
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <global_stdio_init.part.0+0x30>)
 8004894:	4c0b      	ldr	r4, [pc, #44]	@ (80048c4 <global_stdio_init.part.0+0x34>)
 8004896:	4a0c      	ldr	r2, [pc, #48]	@ (80048c8 <global_stdio_init.part.0+0x38>)
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	4620      	mov	r0, r4
 800489c:	2200      	movs	r2, #0
 800489e:	2104      	movs	r1, #4
 80048a0:	f7ff ff94 	bl	80047cc <std>
 80048a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048a8:	2201      	movs	r2, #1
 80048aa:	2109      	movs	r1, #9
 80048ac:	f7ff ff8e 	bl	80047cc <std>
 80048b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048b4:	2202      	movs	r2, #2
 80048b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ba:	2112      	movs	r1, #18
 80048bc:	f7ff bf86 	b.w	80047cc <std>
 80048c0:	200002d8 	.word	0x200002d8
 80048c4:	200001a0 	.word	0x200001a0
 80048c8:	08004839 	.word	0x08004839

080048cc <__sfp_lock_acquire>:
 80048cc:	4801      	ldr	r0, [pc, #4]	@ (80048d4 <__sfp_lock_acquire+0x8>)
 80048ce:	f000 b8f2 	b.w	8004ab6 <__retarget_lock_acquire_recursive>
 80048d2:	bf00      	nop
 80048d4:	200002dd 	.word	0x200002dd

080048d8 <__sfp_lock_release>:
 80048d8:	4801      	ldr	r0, [pc, #4]	@ (80048e0 <__sfp_lock_release+0x8>)
 80048da:	f000 b8ed 	b.w	8004ab8 <__retarget_lock_release_recursive>
 80048de:	bf00      	nop
 80048e0:	200002dd 	.word	0x200002dd

080048e4 <__sinit>:
 80048e4:	b510      	push	{r4, lr}
 80048e6:	4604      	mov	r4, r0
 80048e8:	f7ff fff0 	bl	80048cc <__sfp_lock_acquire>
 80048ec:	6a23      	ldr	r3, [r4, #32]
 80048ee:	b11b      	cbz	r3, 80048f8 <__sinit+0x14>
 80048f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f4:	f7ff bff0 	b.w	80048d8 <__sfp_lock_release>
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <__sinit+0x28>)
 80048fa:	6223      	str	r3, [r4, #32]
 80048fc:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <__sinit+0x2c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f5      	bne.n	80048f0 <__sinit+0xc>
 8004904:	f7ff ffc4 	bl	8004890 <global_stdio_init.part.0>
 8004908:	e7f2      	b.n	80048f0 <__sinit+0xc>
 800490a:	bf00      	nop
 800490c:	08004851 	.word	0x08004851
 8004910:	200002d8 	.word	0x200002d8

08004914 <_fwalk_sglue>:
 8004914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004918:	4607      	mov	r7, r0
 800491a:	4688      	mov	r8, r1
 800491c:	4614      	mov	r4, r2
 800491e:	2600      	movs	r6, #0
 8004920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004924:	f1b9 0901 	subs.w	r9, r9, #1
 8004928:	d505      	bpl.n	8004936 <_fwalk_sglue+0x22>
 800492a:	6824      	ldr	r4, [r4, #0]
 800492c:	2c00      	cmp	r4, #0
 800492e:	d1f7      	bne.n	8004920 <_fwalk_sglue+0xc>
 8004930:	4630      	mov	r0, r6
 8004932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d907      	bls.n	800494c <_fwalk_sglue+0x38>
 800493c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004940:	3301      	adds	r3, #1
 8004942:	d003      	beq.n	800494c <_fwalk_sglue+0x38>
 8004944:	4629      	mov	r1, r5
 8004946:	4638      	mov	r0, r7
 8004948:	47c0      	blx	r8
 800494a:	4306      	orrs	r6, r0
 800494c:	3568      	adds	r5, #104	@ 0x68
 800494e:	e7e9      	b.n	8004924 <_fwalk_sglue+0x10>

08004950 <iprintf>:
 8004950:	b40f      	push	{r0, r1, r2, r3}
 8004952:	b507      	push	{r0, r1, r2, lr}
 8004954:	4906      	ldr	r1, [pc, #24]	@ (8004970 <iprintf+0x20>)
 8004956:	ab04      	add	r3, sp, #16
 8004958:	6808      	ldr	r0, [r1, #0]
 800495a:	f853 2b04 	ldr.w	r2, [r3], #4
 800495e:	6881      	ldr	r1, [r0, #8]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	f000 f91f 	bl	8004ba4 <_vfiprintf_r>
 8004966:	b003      	add	sp, #12
 8004968:	f85d eb04 	ldr.w	lr, [sp], #4
 800496c:	b004      	add	sp, #16
 800496e:	4770      	bx	lr
 8004970:	20000018 	.word	0x20000018

08004974 <_puts_r>:
 8004974:	6a03      	ldr	r3, [r0, #32]
 8004976:	b570      	push	{r4, r5, r6, lr}
 8004978:	6884      	ldr	r4, [r0, #8]
 800497a:	4605      	mov	r5, r0
 800497c:	460e      	mov	r6, r1
 800497e:	b90b      	cbnz	r3, 8004984 <_puts_r+0x10>
 8004980:	f7ff ffb0 	bl	80048e4 <__sinit>
 8004984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004986:	07db      	lsls	r3, r3, #31
 8004988:	d405      	bmi.n	8004996 <_puts_r+0x22>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	0598      	lsls	r0, r3, #22
 800498e:	d402      	bmi.n	8004996 <_puts_r+0x22>
 8004990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004992:	f000 f890 	bl	8004ab6 <__retarget_lock_acquire_recursive>
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	0719      	lsls	r1, r3, #28
 800499a:	d502      	bpl.n	80049a2 <_puts_r+0x2e>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d135      	bne.n	8004a0e <_puts_r+0x9a>
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 fcd1 	bl	800534c <__swsetup_r>
 80049aa:	b380      	cbz	r0, 8004a0e <_puts_r+0x9a>
 80049ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80049b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049b2:	07da      	lsls	r2, r3, #31
 80049b4:	d405      	bmi.n	80049c2 <_puts_r+0x4e>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	059b      	lsls	r3, r3, #22
 80049ba:	d402      	bmi.n	80049c2 <_puts_r+0x4e>
 80049bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049be:	f000 f87b 	bl	8004ab8 <__retarget_lock_release_recursive>
 80049c2:	4628      	mov	r0, r5
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da04      	bge.n	80049d4 <_puts_r+0x60>
 80049ca:	69a2      	ldr	r2, [r4, #24]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	dc17      	bgt.n	8004a00 <_puts_r+0x8c>
 80049d0:	290a      	cmp	r1, #10
 80049d2:	d015      	beq.n	8004a00 <_puts_r+0x8c>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	6022      	str	r2, [r4, #0]
 80049da:	7019      	strb	r1, [r3, #0]
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	2900      	cmp	r1, #0
 80049e8:	d1ed      	bne.n	80049c6 <_puts_r+0x52>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da11      	bge.n	8004a12 <_puts_r+0x9e>
 80049ee:	4622      	mov	r2, r4
 80049f0:	210a      	movs	r1, #10
 80049f2:	4628      	mov	r0, r5
 80049f4:	f000 fc6b 	bl	80052ce <__swbuf_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0d7      	beq.n	80049ac <_puts_r+0x38>
 80049fc:	250a      	movs	r5, #10
 80049fe:	e7d7      	b.n	80049b0 <_puts_r+0x3c>
 8004a00:	4622      	mov	r2, r4
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 fc63 	bl	80052ce <__swbuf_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1e7      	bne.n	80049dc <_puts_r+0x68>
 8004a0c:	e7ce      	b.n	80049ac <_puts_r+0x38>
 8004a0e:	3e01      	subs	r6, #1
 8004a10:	e7e4      	b.n	80049dc <_puts_r+0x68>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	6022      	str	r2, [r4, #0]
 8004a18:	220a      	movs	r2, #10
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	e7ee      	b.n	80049fc <_puts_r+0x88>
	...

08004a20 <puts>:
 8004a20:	4b02      	ldr	r3, [pc, #8]	@ (8004a2c <puts+0xc>)
 8004a22:	4601      	mov	r1, r0
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	f7ff bfa5 	b.w	8004974 <_puts_r>
 8004a2a:	bf00      	nop
 8004a2c:	20000018 	.word	0x20000018

08004a30 <memset>:
 8004a30:	4402      	add	r2, r0
 8004a32:	4603      	mov	r3, r0
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d100      	bne.n	8004a3a <memset+0xa>
 8004a38:	4770      	bx	lr
 8004a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a3e:	e7f9      	b.n	8004a34 <memset+0x4>

08004a40 <_sbrk_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4d06      	ldr	r5, [pc, #24]	@ (8004a5c <_sbrk_r+0x1c>)
 8004a44:	2300      	movs	r3, #0
 8004a46:	4604      	mov	r4, r0
 8004a48:	4608      	mov	r0, r1
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	f7fc f9ee 	bl	8000e2c <_sbrk>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d102      	bne.n	8004a5a <_sbrk_r+0x1a>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	b103      	cbz	r3, 8004a5a <_sbrk_r+0x1a>
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	200002e0 	.word	0x200002e0

08004a60 <__errno>:
 8004a60:	4b01      	ldr	r3, [pc, #4]	@ (8004a68 <__errno+0x8>)
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000018 	.word	0x20000018

08004a6c <__libc_init_array>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004aa4 <__libc_init_array+0x38>)
 8004a70:	4c0d      	ldr	r4, [pc, #52]	@ (8004aa8 <__libc_init_array+0x3c>)
 8004a72:	1b64      	subs	r4, r4, r5
 8004a74:	10a4      	asrs	r4, r4, #2
 8004a76:	2600      	movs	r6, #0
 8004a78:	42a6      	cmp	r6, r4
 8004a7a:	d109      	bne.n	8004a90 <__libc_init_array+0x24>
 8004a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8004aac <__libc_init_array+0x40>)
 8004a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ab0 <__libc_init_array+0x44>)
 8004a80:	f000 fd84 	bl	800558c <_init>
 8004a84:	1b64      	subs	r4, r4, r5
 8004a86:	10a4      	asrs	r4, r4, #2
 8004a88:	2600      	movs	r6, #0
 8004a8a:	42a6      	cmp	r6, r4
 8004a8c:	d105      	bne.n	8004a9a <__libc_init_array+0x2e>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a94:	4798      	blx	r3
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7ee      	b.n	8004a78 <__libc_init_array+0xc>
 8004a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9e:	4798      	blx	r3
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	e7f2      	b.n	8004a8a <__libc_init_array+0x1e>
 8004aa4:	08005720 	.word	0x08005720
 8004aa8:	08005720 	.word	0x08005720
 8004aac:	08005720 	.word	0x08005720
 8004ab0:	08005724 	.word	0x08005724

08004ab4 <__retarget_lock_init_recursive>:
 8004ab4:	4770      	bx	lr

08004ab6 <__retarget_lock_acquire_recursive>:
 8004ab6:	4770      	bx	lr

08004ab8 <__retarget_lock_release_recursive>:
 8004ab8:	4770      	bx	lr
	...

08004abc <_free_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4605      	mov	r5, r0
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d041      	beq.n	8004b48 <_free_r+0x8c>
 8004ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac8:	1f0c      	subs	r4, r1, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfb8      	it	lt
 8004ace:	18e4      	addlt	r4, r4, r3
 8004ad0:	f7ff fe70 	bl	80047b4 <__malloc_lock>
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b4c <_free_r+0x90>)
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	b933      	cbnz	r3, 8004ae8 <_free_r+0x2c>
 8004ada:	6063      	str	r3, [r4, #4]
 8004adc:	6014      	str	r4, [r2, #0]
 8004ade:	4628      	mov	r0, r5
 8004ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae4:	f7ff be6c 	b.w	80047c0 <__malloc_unlock>
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	d908      	bls.n	8004afe <_free_r+0x42>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	1821      	adds	r1, r4, r0
 8004af0:	428b      	cmp	r3, r1
 8004af2:	bf01      	itttt	eq
 8004af4:	6819      	ldreq	r1, [r3, #0]
 8004af6:	685b      	ldreq	r3, [r3, #4]
 8004af8:	1809      	addeq	r1, r1, r0
 8004afa:	6021      	streq	r1, [r4, #0]
 8004afc:	e7ed      	b.n	8004ada <_free_r+0x1e>
 8004afe:	461a      	mov	r2, r3
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	b10b      	cbz	r3, 8004b08 <_free_r+0x4c>
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	d9fa      	bls.n	8004afe <_free_r+0x42>
 8004b08:	6811      	ldr	r1, [r2, #0]
 8004b0a:	1850      	adds	r0, r2, r1
 8004b0c:	42a0      	cmp	r0, r4
 8004b0e:	d10b      	bne.n	8004b28 <_free_r+0x6c>
 8004b10:	6820      	ldr	r0, [r4, #0]
 8004b12:	4401      	add	r1, r0
 8004b14:	1850      	adds	r0, r2, r1
 8004b16:	4283      	cmp	r3, r0
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	d1e0      	bne.n	8004ade <_free_r+0x22>
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	6053      	str	r3, [r2, #4]
 8004b22:	4408      	add	r0, r1
 8004b24:	6010      	str	r0, [r2, #0]
 8004b26:	e7da      	b.n	8004ade <_free_r+0x22>
 8004b28:	d902      	bls.n	8004b30 <_free_r+0x74>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	e7d6      	b.n	8004ade <_free_r+0x22>
 8004b30:	6820      	ldr	r0, [r4, #0]
 8004b32:	1821      	adds	r1, r4, r0
 8004b34:	428b      	cmp	r3, r1
 8004b36:	bf04      	itt	eq
 8004b38:	6819      	ldreq	r1, [r3, #0]
 8004b3a:	685b      	ldreq	r3, [r3, #4]
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	bf04      	itt	eq
 8004b40:	1809      	addeq	r1, r1, r0
 8004b42:	6021      	streq	r1, [r4, #0]
 8004b44:	6054      	str	r4, [r2, #4]
 8004b46:	e7ca      	b.n	8004ade <_free_r+0x22>
 8004b48:	bd38      	pop	{r3, r4, r5, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000019c 	.word	0x2000019c

08004b50 <__sfputc_r>:
 8004b50:	6893      	ldr	r3, [r2, #8]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	b410      	push	{r4}
 8004b58:	6093      	str	r3, [r2, #8]
 8004b5a:	da08      	bge.n	8004b6e <__sfputc_r+0x1e>
 8004b5c:	6994      	ldr	r4, [r2, #24]
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	db01      	blt.n	8004b66 <__sfputc_r+0x16>
 8004b62:	290a      	cmp	r1, #10
 8004b64:	d103      	bne.n	8004b6e <__sfputc_r+0x1e>
 8004b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b6a:	f000 bbb0 	b.w	80052ce <__swbuf_r>
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	1c58      	adds	r0, r3, #1
 8004b72:	6010      	str	r0, [r2, #0]
 8004b74:	7019      	strb	r1, [r3, #0]
 8004b76:	4608      	mov	r0, r1
 8004b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <__sfputs_r>:
 8004b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b80:	4606      	mov	r6, r0
 8004b82:	460f      	mov	r7, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	18d5      	adds	r5, r2, r3
 8004b88:	42ac      	cmp	r4, r5
 8004b8a:	d101      	bne.n	8004b90 <__sfputs_r+0x12>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e007      	b.n	8004ba0 <__sfputs_r+0x22>
 8004b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b94:	463a      	mov	r2, r7
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7ff ffda 	bl	8004b50 <__sfputc_r>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d1f3      	bne.n	8004b88 <__sfputs_r+0xa>
 8004ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ba4 <_vfiprintf_r>:
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	460d      	mov	r5, r1
 8004baa:	b09d      	sub	sp, #116	@ 0x74
 8004bac:	4614      	mov	r4, r2
 8004bae:	4698      	mov	r8, r3
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	b118      	cbz	r0, 8004bbc <_vfiprintf_r+0x18>
 8004bb4:	6a03      	ldr	r3, [r0, #32]
 8004bb6:	b90b      	cbnz	r3, 8004bbc <_vfiprintf_r+0x18>
 8004bb8:	f7ff fe94 	bl	80048e4 <__sinit>
 8004bbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bbe:	07d9      	lsls	r1, r3, #31
 8004bc0:	d405      	bmi.n	8004bce <_vfiprintf_r+0x2a>
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	059a      	lsls	r2, r3, #22
 8004bc6:	d402      	bmi.n	8004bce <_vfiprintf_r+0x2a>
 8004bc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bca:	f7ff ff74 	bl	8004ab6 <__retarget_lock_acquire_recursive>
 8004bce:	89ab      	ldrh	r3, [r5, #12]
 8004bd0:	071b      	lsls	r3, r3, #28
 8004bd2:	d501      	bpl.n	8004bd8 <_vfiprintf_r+0x34>
 8004bd4:	692b      	ldr	r3, [r5, #16]
 8004bd6:	b99b      	cbnz	r3, 8004c00 <_vfiprintf_r+0x5c>
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 fbb6 	bl	800534c <__swsetup_r>
 8004be0:	b170      	cbz	r0, 8004c00 <_vfiprintf_r+0x5c>
 8004be2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004be4:	07dc      	lsls	r4, r3, #31
 8004be6:	d504      	bpl.n	8004bf2 <_vfiprintf_r+0x4e>
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bec:	b01d      	add	sp, #116	@ 0x74
 8004bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	0598      	lsls	r0, r3, #22
 8004bf6:	d4f7      	bmi.n	8004be8 <_vfiprintf_r+0x44>
 8004bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bfa:	f7ff ff5d 	bl	8004ab8 <__retarget_lock_release_recursive>
 8004bfe:	e7f3      	b.n	8004be8 <_vfiprintf_r+0x44>
 8004c00:	2300      	movs	r3, #0
 8004c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c04:	2320      	movs	r3, #32
 8004c06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c0e:	2330      	movs	r3, #48	@ 0x30
 8004c10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004dc0 <_vfiprintf_r+0x21c>
 8004c14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c18:	f04f 0901 	mov.w	r9, #1
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	469a      	mov	sl, r3
 8004c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c24:	b10a      	cbz	r2, 8004c2a <_vfiprintf_r+0x86>
 8004c26:	2a25      	cmp	r2, #37	@ 0x25
 8004c28:	d1f9      	bne.n	8004c1e <_vfiprintf_r+0x7a>
 8004c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c2e:	d00b      	beq.n	8004c48 <_vfiprintf_r+0xa4>
 8004c30:	465b      	mov	r3, fp
 8004c32:	4622      	mov	r2, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7ff ffa1 	bl	8004b7e <__sfputs_r>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f000 80a7 	beq.w	8004d90 <_vfiprintf_r+0x1ec>
 8004c42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c44:	445a      	add	r2, fp
 8004c46:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c48:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 809f 	beq.w	8004d90 <_vfiprintf_r+0x1ec>
 8004c52:	2300      	movs	r3, #0
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c5c:	f10a 0a01 	add.w	sl, sl, #1
 8004c60:	9304      	str	r3, [sp, #16]
 8004c62:	9307      	str	r3, [sp, #28]
 8004c64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c68:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c6a:	4654      	mov	r4, sl
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c72:	4853      	ldr	r0, [pc, #332]	@ (8004dc0 <_vfiprintf_r+0x21c>)
 8004c74:	f7fb facc 	bl	8000210 <memchr>
 8004c78:	9a04      	ldr	r2, [sp, #16]
 8004c7a:	b9d8      	cbnz	r0, 8004cb4 <_vfiprintf_r+0x110>
 8004c7c:	06d1      	lsls	r1, r2, #27
 8004c7e:	bf44      	itt	mi
 8004c80:	2320      	movmi	r3, #32
 8004c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c86:	0713      	lsls	r3, r2, #28
 8004c88:	bf44      	itt	mi
 8004c8a:	232b      	movmi	r3, #43	@ 0x2b
 8004c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c90:	f89a 3000 	ldrb.w	r3, [sl]
 8004c94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c96:	d015      	beq.n	8004cc4 <_vfiprintf_r+0x120>
 8004c98:	9a07      	ldr	r2, [sp, #28]
 8004c9a:	4654      	mov	r4, sl
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f04f 0c0a 	mov.w	ip, #10
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ca8:	3b30      	subs	r3, #48	@ 0x30
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d94b      	bls.n	8004d46 <_vfiprintf_r+0x1a2>
 8004cae:	b1b0      	cbz	r0, 8004cde <_vfiprintf_r+0x13a>
 8004cb0:	9207      	str	r2, [sp, #28]
 8004cb2:	e014      	b.n	8004cde <_vfiprintf_r+0x13a>
 8004cb4:	eba0 0308 	sub.w	r3, r0, r8
 8004cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	9304      	str	r3, [sp, #16]
 8004cc0:	46a2      	mov	sl, r4
 8004cc2:	e7d2      	b.n	8004c6a <_vfiprintf_r+0xc6>
 8004cc4:	9b03      	ldr	r3, [sp, #12]
 8004cc6:	1d19      	adds	r1, r3, #4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	9103      	str	r1, [sp, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bfbb      	ittet	lt
 8004cd0:	425b      	neglt	r3, r3
 8004cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd6:	9307      	strge	r3, [sp, #28]
 8004cd8:	9307      	strlt	r3, [sp, #28]
 8004cda:	bfb8      	it	lt
 8004cdc:	9204      	strlt	r2, [sp, #16]
 8004cde:	7823      	ldrb	r3, [r4, #0]
 8004ce0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ce2:	d10a      	bne.n	8004cfa <_vfiprintf_r+0x156>
 8004ce4:	7863      	ldrb	r3, [r4, #1]
 8004ce6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce8:	d132      	bne.n	8004d50 <_vfiprintf_r+0x1ac>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	1d1a      	adds	r2, r3, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	9203      	str	r2, [sp, #12]
 8004cf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cf6:	3402      	adds	r4, #2
 8004cf8:	9305      	str	r3, [sp, #20]
 8004cfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004dd0 <_vfiprintf_r+0x22c>
 8004cfe:	7821      	ldrb	r1, [r4, #0]
 8004d00:	2203      	movs	r2, #3
 8004d02:	4650      	mov	r0, sl
 8004d04:	f7fb fa84 	bl	8000210 <memchr>
 8004d08:	b138      	cbz	r0, 8004d1a <_vfiprintf_r+0x176>
 8004d0a:	9b04      	ldr	r3, [sp, #16]
 8004d0c:	eba0 000a 	sub.w	r0, r0, sl
 8004d10:	2240      	movs	r2, #64	@ 0x40
 8004d12:	4082      	lsls	r2, r0
 8004d14:	4313      	orrs	r3, r2
 8004d16:	3401      	adds	r4, #1
 8004d18:	9304      	str	r3, [sp, #16]
 8004d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d1e:	4829      	ldr	r0, [pc, #164]	@ (8004dc4 <_vfiprintf_r+0x220>)
 8004d20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d24:	2206      	movs	r2, #6
 8004d26:	f7fb fa73 	bl	8000210 <memchr>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d03f      	beq.n	8004dae <_vfiprintf_r+0x20a>
 8004d2e:	4b26      	ldr	r3, [pc, #152]	@ (8004dc8 <_vfiprintf_r+0x224>)
 8004d30:	bb1b      	cbnz	r3, 8004d7a <_vfiprintf_r+0x1d6>
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	3307      	adds	r3, #7
 8004d36:	f023 0307 	bic.w	r3, r3, #7
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	9303      	str	r3, [sp, #12]
 8004d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d40:	443b      	add	r3, r7
 8004d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d44:	e76a      	b.n	8004c1c <_vfiprintf_r+0x78>
 8004d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	e7a8      	b.n	8004ca2 <_vfiprintf_r+0xfe>
 8004d50:	2300      	movs	r3, #0
 8004d52:	3401      	adds	r4, #1
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	4619      	mov	r1, r3
 8004d58:	f04f 0c0a 	mov.w	ip, #10
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d62:	3a30      	subs	r2, #48	@ 0x30
 8004d64:	2a09      	cmp	r2, #9
 8004d66:	d903      	bls.n	8004d70 <_vfiprintf_r+0x1cc>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0c6      	beq.n	8004cfa <_vfiprintf_r+0x156>
 8004d6c:	9105      	str	r1, [sp, #20]
 8004d6e:	e7c4      	b.n	8004cfa <_vfiprintf_r+0x156>
 8004d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d74:	4604      	mov	r4, r0
 8004d76:	2301      	movs	r3, #1
 8004d78:	e7f0      	b.n	8004d5c <_vfiprintf_r+0x1b8>
 8004d7a:	ab03      	add	r3, sp, #12
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	462a      	mov	r2, r5
 8004d80:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <_vfiprintf_r+0x228>)
 8004d82:	a904      	add	r1, sp, #16
 8004d84:	4630      	mov	r0, r6
 8004d86:	f3af 8000 	nop.w
 8004d8a:	4607      	mov	r7, r0
 8004d8c:	1c78      	adds	r0, r7, #1
 8004d8e:	d1d6      	bne.n	8004d3e <_vfiprintf_r+0x19a>
 8004d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d92:	07d9      	lsls	r1, r3, #31
 8004d94:	d405      	bmi.n	8004da2 <_vfiprintf_r+0x1fe>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	059a      	lsls	r2, r3, #22
 8004d9a:	d402      	bmi.n	8004da2 <_vfiprintf_r+0x1fe>
 8004d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d9e:	f7ff fe8b 	bl	8004ab8 <__retarget_lock_release_recursive>
 8004da2:	89ab      	ldrh	r3, [r5, #12]
 8004da4:	065b      	lsls	r3, r3, #25
 8004da6:	f53f af1f 	bmi.w	8004be8 <_vfiprintf_r+0x44>
 8004daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dac:	e71e      	b.n	8004bec <_vfiprintf_r+0x48>
 8004dae:	ab03      	add	r3, sp, #12
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	462a      	mov	r2, r5
 8004db4:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <_vfiprintf_r+0x228>)
 8004db6:	a904      	add	r1, sp, #16
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f879 	bl	8004eb0 <_printf_i>
 8004dbe:	e7e4      	b.n	8004d8a <_vfiprintf_r+0x1e6>
 8004dc0:	080056e4 	.word	0x080056e4
 8004dc4:	080056ee 	.word	0x080056ee
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	08004b7f 	.word	0x08004b7f
 8004dd0:	080056ea 	.word	0x080056ea

08004dd4 <_printf_common>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	4616      	mov	r6, r2
 8004dda:	4698      	mov	r8, r3
 8004ddc:	688a      	ldr	r2, [r1, #8]
 8004dde:	690b      	ldr	r3, [r1, #16]
 8004de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bfb8      	it	lt
 8004de8:	4613      	movlt	r3, r2
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004df0:	4607      	mov	r7, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	b10a      	cbz	r2, 8004dfa <_printf_common+0x26>
 8004df6:	3301      	adds	r3, #1
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	0699      	lsls	r1, r3, #26
 8004dfe:	bf42      	ittt	mi
 8004e00:	6833      	ldrmi	r3, [r6, #0]
 8004e02:	3302      	addmi	r3, #2
 8004e04:	6033      	strmi	r3, [r6, #0]
 8004e06:	6825      	ldr	r5, [r4, #0]
 8004e08:	f015 0506 	ands.w	r5, r5, #6
 8004e0c:	d106      	bne.n	8004e1c <_printf_common+0x48>
 8004e0e:	f104 0a19 	add.w	sl, r4, #25
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	6832      	ldr	r2, [r6, #0]
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dc26      	bgt.n	8004e6a <_printf_common+0x96>
 8004e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	3b00      	subs	r3, #0
 8004e24:	bf18      	it	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	0692      	lsls	r2, r2, #26
 8004e2a:	d42b      	bmi.n	8004e84 <_printf_common+0xb0>
 8004e2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e30:	4641      	mov	r1, r8
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c8      	blx	r9
 8004e36:	3001      	adds	r0, #1
 8004e38:	d01e      	beq.n	8004e78 <_printf_common+0xa4>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	f003 0306 	and.w	r3, r3, #6
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	bf02      	ittt	eq
 8004e46:	68e5      	ldreq	r5, [r4, #12]
 8004e48:	6833      	ldreq	r3, [r6, #0]
 8004e4a:	1aed      	subeq	r5, r5, r3
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	bf0c      	ite	eq
 8004e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e54:	2500      	movne	r5, #0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bfc4      	itt	gt
 8004e5a:	1a9b      	subgt	r3, r3, r2
 8004e5c:	18ed      	addgt	r5, r5, r3
 8004e5e:	2600      	movs	r6, #0
 8004e60:	341a      	adds	r4, #26
 8004e62:	42b5      	cmp	r5, r6
 8004e64:	d11a      	bne.n	8004e9c <_printf_common+0xc8>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e008      	b.n	8004e7c <_printf_common+0xa8>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4652      	mov	r2, sl
 8004e6e:	4641      	mov	r1, r8
 8004e70:	4638      	mov	r0, r7
 8004e72:	47c8      	blx	r9
 8004e74:	3001      	adds	r0, #1
 8004e76:	d103      	bne.n	8004e80 <_printf_common+0xac>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	3501      	adds	r5, #1
 8004e82:	e7c6      	b.n	8004e12 <_printf_common+0x3e>
 8004e84:	18e1      	adds	r1, r4, r3
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	2030      	movs	r0, #48	@ 0x30
 8004e8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e8e:	4422      	add	r2, r4
 8004e90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e98:	3302      	adds	r3, #2
 8004e9a:	e7c7      	b.n	8004e2c <_printf_common+0x58>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c8      	blx	r9
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d0e6      	beq.n	8004e78 <_printf_common+0xa4>
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7d9      	b.n	8004e62 <_printf_common+0x8e>
	...

08004eb0 <_printf_i>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	7e0f      	ldrb	r7, [r1, #24]
 8004eb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004eb8:	2f78      	cmp	r7, #120	@ 0x78
 8004eba:	4691      	mov	r9, r2
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ec6:	d807      	bhi.n	8004ed8 <_printf_i+0x28>
 8004ec8:	2f62      	cmp	r7, #98	@ 0x62
 8004eca:	d80a      	bhi.n	8004ee2 <_printf_i+0x32>
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f000 80d2 	beq.w	8005076 <_printf_i+0x1c6>
 8004ed2:	2f58      	cmp	r7, #88	@ 0x58
 8004ed4:	f000 80b9 	beq.w	800504a <_printf_i+0x19a>
 8004ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004edc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ee0:	e03a      	b.n	8004f58 <_printf_i+0xa8>
 8004ee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ee6:	2b15      	cmp	r3, #21
 8004ee8:	d8f6      	bhi.n	8004ed8 <_printf_i+0x28>
 8004eea:	a101      	add	r1, pc, #4	@ (adr r1, 8004ef0 <_printf_i+0x40>)
 8004eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004ed9 	.word	0x08004ed9
 8004efc:	08004ed9 	.word	0x08004ed9
 8004f00:	08004ed9 	.word	0x08004ed9
 8004f04:	08004ed9 	.word	0x08004ed9
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004ed9 	.word	0x08004ed9
 8004f10:	08004ed9 	.word	0x08004ed9
 8004f14:	08004ed9 	.word	0x08004ed9
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	0800505d 	.word	0x0800505d
 8004f20:	08004f87 	.word	0x08004f87
 8004f24:	08005017 	.word	0x08005017
 8004f28:	08004ed9 	.word	0x08004ed9
 8004f2c:	08004ed9 	.word	0x08004ed9
 8004f30:	0800507f 	.word	0x0800507f
 8004f34:	08004ed9 	.word	0x08004ed9
 8004f38:	08004f87 	.word	0x08004f87
 8004f3c:	08004ed9 	.word	0x08004ed9
 8004f40:	08004ed9 	.word	0x08004ed9
 8004f44:	0800501f 	.word	0x0800501f
 8004f48:	6833      	ldr	r3, [r6, #0]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6032      	str	r2, [r6, #0]
 8004f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e09d      	b.n	8005098 <_printf_i+0x1e8>
 8004f5c:	6833      	ldr	r3, [r6, #0]
 8004f5e:	6820      	ldr	r0, [r4, #0]
 8004f60:	1d19      	adds	r1, r3, #4
 8004f62:	6031      	str	r1, [r6, #0]
 8004f64:	0606      	lsls	r6, r0, #24
 8004f66:	d501      	bpl.n	8004f6c <_printf_i+0xbc>
 8004f68:	681d      	ldr	r5, [r3, #0]
 8004f6a:	e003      	b.n	8004f74 <_printf_i+0xc4>
 8004f6c:	0645      	lsls	r5, r0, #25
 8004f6e:	d5fb      	bpl.n	8004f68 <_printf_i+0xb8>
 8004f70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	da03      	bge.n	8004f80 <_printf_i+0xd0>
 8004f78:	232d      	movs	r3, #45	@ 0x2d
 8004f7a:	426d      	negs	r5, r5
 8004f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f80:	4859      	ldr	r0, [pc, #356]	@ (80050e8 <_printf_i+0x238>)
 8004f82:	230a      	movs	r3, #10
 8004f84:	e011      	b.n	8004faa <_printf_i+0xfa>
 8004f86:	6821      	ldr	r1, [r4, #0]
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	0608      	lsls	r0, r1, #24
 8004f8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f90:	d402      	bmi.n	8004f98 <_printf_i+0xe8>
 8004f92:	0649      	lsls	r1, r1, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2ad      	uxthmi	r5, r5
 8004f98:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f9a:	4853      	ldr	r0, [pc, #332]	@ (80050e8 <_printf_i+0x238>)
 8004f9c:	6033      	str	r3, [r6, #0]
 8004f9e:	bf14      	ite	ne
 8004fa0:	230a      	movne	r3, #10
 8004fa2:	2308      	moveq	r3, #8
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004faa:	6866      	ldr	r6, [r4, #4]
 8004fac:	60a6      	str	r6, [r4, #8]
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	bfa2      	ittt	ge
 8004fb2:	6821      	ldrge	r1, [r4, #0]
 8004fb4:	f021 0104 	bicge.w	r1, r1, #4
 8004fb8:	6021      	strge	r1, [r4, #0]
 8004fba:	b90d      	cbnz	r5, 8004fc0 <_printf_i+0x110>
 8004fbc:	2e00      	cmp	r6, #0
 8004fbe:	d04b      	beq.n	8005058 <_printf_i+0x1a8>
 8004fc0:	4616      	mov	r6, r2
 8004fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8004fca:	5dc7      	ldrb	r7, [r0, r7]
 8004fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fd0:	462f      	mov	r7, r5
 8004fd2:	42bb      	cmp	r3, r7
 8004fd4:	460d      	mov	r5, r1
 8004fd6:	d9f4      	bls.n	8004fc2 <_printf_i+0x112>
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d10b      	bne.n	8004ff4 <_printf_i+0x144>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	07df      	lsls	r7, r3, #31
 8004fe0:	d508      	bpl.n	8004ff4 <_printf_i+0x144>
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	6861      	ldr	r1, [r4, #4]
 8004fe6:	4299      	cmp	r1, r3
 8004fe8:	bfde      	ittt	le
 8004fea:	2330      	movle	r3, #48	@ 0x30
 8004fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ff0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ff4:	1b92      	subs	r2, r2, r6
 8004ff6:	6122      	str	r2, [r4, #16]
 8004ff8:	f8cd a000 	str.w	sl, [sp]
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	aa03      	add	r2, sp, #12
 8005000:	4621      	mov	r1, r4
 8005002:	4640      	mov	r0, r8
 8005004:	f7ff fee6 	bl	8004dd4 <_printf_common>
 8005008:	3001      	adds	r0, #1
 800500a:	d14a      	bne.n	80050a2 <_printf_i+0x1f2>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005010:	b004      	add	sp, #16
 8005012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	f043 0320 	orr.w	r3, r3, #32
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	4833      	ldr	r0, [pc, #204]	@ (80050ec <_printf_i+0x23c>)
 8005020:	2778      	movs	r7, #120	@ 0x78
 8005022:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	6831      	ldr	r1, [r6, #0]
 800502a:	061f      	lsls	r7, r3, #24
 800502c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005030:	d402      	bmi.n	8005038 <_printf_i+0x188>
 8005032:	065f      	lsls	r7, r3, #25
 8005034:	bf48      	it	mi
 8005036:	b2ad      	uxthmi	r5, r5
 8005038:	6031      	str	r1, [r6, #0]
 800503a:	07d9      	lsls	r1, r3, #31
 800503c:	bf44      	itt	mi
 800503e:	f043 0320 	orrmi.w	r3, r3, #32
 8005042:	6023      	strmi	r3, [r4, #0]
 8005044:	b11d      	cbz	r5, 800504e <_printf_i+0x19e>
 8005046:	2310      	movs	r3, #16
 8005048:	e7ac      	b.n	8004fa4 <_printf_i+0xf4>
 800504a:	4827      	ldr	r0, [pc, #156]	@ (80050e8 <_printf_i+0x238>)
 800504c:	e7e9      	b.n	8005022 <_printf_i+0x172>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f023 0320 	bic.w	r3, r3, #32
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	e7f6      	b.n	8005046 <_printf_i+0x196>
 8005058:	4616      	mov	r6, r2
 800505a:	e7bd      	b.n	8004fd8 <_printf_i+0x128>
 800505c:	6833      	ldr	r3, [r6, #0]
 800505e:	6825      	ldr	r5, [r4, #0]
 8005060:	6961      	ldr	r1, [r4, #20]
 8005062:	1d18      	adds	r0, r3, #4
 8005064:	6030      	str	r0, [r6, #0]
 8005066:	062e      	lsls	r6, r5, #24
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	d501      	bpl.n	8005070 <_printf_i+0x1c0>
 800506c:	6019      	str	r1, [r3, #0]
 800506e:	e002      	b.n	8005076 <_printf_i+0x1c6>
 8005070:	0668      	lsls	r0, r5, #25
 8005072:	d5fb      	bpl.n	800506c <_printf_i+0x1bc>
 8005074:	8019      	strh	r1, [r3, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	4616      	mov	r6, r2
 800507c:	e7bc      	b.n	8004ff8 <_printf_i+0x148>
 800507e:	6833      	ldr	r3, [r6, #0]
 8005080:	1d1a      	adds	r2, r3, #4
 8005082:	6032      	str	r2, [r6, #0]
 8005084:	681e      	ldr	r6, [r3, #0]
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	2100      	movs	r1, #0
 800508a:	4630      	mov	r0, r6
 800508c:	f7fb f8c0 	bl	8000210 <memchr>
 8005090:	b108      	cbz	r0, 8005096 <_printf_i+0x1e6>
 8005092:	1b80      	subs	r0, r0, r6
 8005094:	6060      	str	r0, [r4, #4]
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	2300      	movs	r3, #0
 800509c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a0:	e7aa      	b.n	8004ff8 <_printf_i+0x148>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	4632      	mov	r2, r6
 80050a6:	4649      	mov	r1, r9
 80050a8:	4640      	mov	r0, r8
 80050aa:	47d0      	blx	sl
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0ad      	beq.n	800500c <_printf_i+0x15c>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	079b      	lsls	r3, r3, #30
 80050b4:	d413      	bmi.n	80050de <_printf_i+0x22e>
 80050b6:	68e0      	ldr	r0, [r4, #12]
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	4298      	cmp	r0, r3
 80050bc:	bfb8      	it	lt
 80050be:	4618      	movlt	r0, r3
 80050c0:	e7a6      	b.n	8005010 <_printf_i+0x160>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4632      	mov	r2, r6
 80050c6:	4649      	mov	r1, r9
 80050c8:	4640      	mov	r0, r8
 80050ca:	47d0      	blx	sl
 80050cc:	3001      	adds	r0, #1
 80050ce:	d09d      	beq.n	800500c <_printf_i+0x15c>
 80050d0:	3501      	adds	r5, #1
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	9903      	ldr	r1, [sp, #12]
 80050d6:	1a5b      	subs	r3, r3, r1
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dcf2      	bgt.n	80050c2 <_printf_i+0x212>
 80050dc:	e7eb      	b.n	80050b6 <_printf_i+0x206>
 80050de:	2500      	movs	r5, #0
 80050e0:	f104 0619 	add.w	r6, r4, #25
 80050e4:	e7f5      	b.n	80050d2 <_printf_i+0x222>
 80050e6:	bf00      	nop
 80050e8:	080056f5 	.word	0x080056f5
 80050ec:	08005706 	.word	0x08005706

080050f0 <__sflush_r>:
 80050f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f8:	0716      	lsls	r6, r2, #28
 80050fa:	4605      	mov	r5, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	d454      	bmi.n	80051aa <__sflush_r+0xba>
 8005100:	684b      	ldr	r3, [r1, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	dc02      	bgt.n	800510c <__sflush_r+0x1c>
 8005106:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	dd48      	ble.n	800519e <__sflush_r+0xae>
 800510c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800510e:	2e00      	cmp	r6, #0
 8005110:	d045      	beq.n	800519e <__sflush_r+0xae>
 8005112:	2300      	movs	r3, #0
 8005114:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005118:	682f      	ldr	r7, [r5, #0]
 800511a:	6a21      	ldr	r1, [r4, #32]
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	d030      	beq.n	8005182 <__sflush_r+0x92>
 8005120:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	0759      	lsls	r1, r3, #29
 8005126:	d505      	bpl.n	8005134 <__sflush_r+0x44>
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800512e:	b10b      	cbz	r3, 8005134 <__sflush_r+0x44>
 8005130:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005138:	6a21      	ldr	r1, [r4, #32]
 800513a:	4628      	mov	r0, r5
 800513c:	47b0      	blx	r6
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	d106      	bne.n	8005152 <__sflush_r+0x62>
 8005144:	6829      	ldr	r1, [r5, #0]
 8005146:	291d      	cmp	r1, #29
 8005148:	d82b      	bhi.n	80051a2 <__sflush_r+0xb2>
 800514a:	4a2a      	ldr	r2, [pc, #168]	@ (80051f4 <__sflush_r+0x104>)
 800514c:	410a      	asrs	r2, r1
 800514e:	07d6      	lsls	r6, r2, #31
 8005150:	d427      	bmi.n	80051a2 <__sflush_r+0xb2>
 8005152:	2200      	movs	r2, #0
 8005154:	6062      	str	r2, [r4, #4]
 8005156:	04d9      	lsls	r1, r3, #19
 8005158:	6922      	ldr	r2, [r4, #16]
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	d504      	bpl.n	8005168 <__sflush_r+0x78>
 800515e:	1c42      	adds	r2, r0, #1
 8005160:	d101      	bne.n	8005166 <__sflush_r+0x76>
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	b903      	cbnz	r3, 8005168 <__sflush_r+0x78>
 8005166:	6560      	str	r0, [r4, #84]	@ 0x54
 8005168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800516a:	602f      	str	r7, [r5, #0]
 800516c:	b1b9      	cbz	r1, 800519e <__sflush_r+0xae>
 800516e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005172:	4299      	cmp	r1, r3
 8005174:	d002      	beq.n	800517c <__sflush_r+0x8c>
 8005176:	4628      	mov	r0, r5
 8005178:	f7ff fca0 	bl	8004abc <_free_r>
 800517c:	2300      	movs	r3, #0
 800517e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005180:	e00d      	b.n	800519e <__sflush_r+0xae>
 8005182:	2301      	movs	r3, #1
 8005184:	4628      	mov	r0, r5
 8005186:	47b0      	blx	r6
 8005188:	4602      	mov	r2, r0
 800518a:	1c50      	adds	r0, r2, #1
 800518c:	d1c9      	bne.n	8005122 <__sflush_r+0x32>
 800518e:	682b      	ldr	r3, [r5, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0c6      	beq.n	8005122 <__sflush_r+0x32>
 8005194:	2b1d      	cmp	r3, #29
 8005196:	d001      	beq.n	800519c <__sflush_r+0xac>
 8005198:	2b16      	cmp	r3, #22
 800519a:	d11e      	bne.n	80051da <__sflush_r+0xea>
 800519c:	602f      	str	r7, [r5, #0]
 800519e:	2000      	movs	r0, #0
 80051a0:	e022      	b.n	80051e8 <__sflush_r+0xf8>
 80051a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a6:	b21b      	sxth	r3, r3
 80051a8:	e01b      	b.n	80051e2 <__sflush_r+0xf2>
 80051aa:	690f      	ldr	r7, [r1, #16]
 80051ac:	2f00      	cmp	r7, #0
 80051ae:	d0f6      	beq.n	800519e <__sflush_r+0xae>
 80051b0:	0793      	lsls	r3, r2, #30
 80051b2:	680e      	ldr	r6, [r1, #0]
 80051b4:	bf08      	it	eq
 80051b6:	694b      	ldreq	r3, [r1, #20]
 80051b8:	600f      	str	r7, [r1, #0]
 80051ba:	bf18      	it	ne
 80051bc:	2300      	movne	r3, #0
 80051be:	eba6 0807 	sub.w	r8, r6, r7
 80051c2:	608b      	str	r3, [r1, #8]
 80051c4:	f1b8 0f00 	cmp.w	r8, #0
 80051c8:	dde9      	ble.n	800519e <__sflush_r+0xae>
 80051ca:	6a21      	ldr	r1, [r4, #32]
 80051cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80051ce:	4643      	mov	r3, r8
 80051d0:	463a      	mov	r2, r7
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b0      	blx	r6
 80051d6:	2800      	cmp	r0, #0
 80051d8:	dc08      	bgt.n	80051ec <__sflush_r+0xfc>
 80051da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051e2:	81a3      	strh	r3, [r4, #12]
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ec:	4407      	add	r7, r0
 80051ee:	eba8 0800 	sub.w	r8, r8, r0
 80051f2:	e7e7      	b.n	80051c4 <__sflush_r+0xd4>
 80051f4:	dfbffffe 	.word	0xdfbffffe

080051f8 <_fflush_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	690b      	ldr	r3, [r1, #16]
 80051fc:	4605      	mov	r5, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	b913      	cbnz	r3, 8005208 <_fflush_r+0x10>
 8005202:	2500      	movs	r5, #0
 8005204:	4628      	mov	r0, r5
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	b118      	cbz	r0, 8005212 <_fflush_r+0x1a>
 800520a:	6a03      	ldr	r3, [r0, #32]
 800520c:	b90b      	cbnz	r3, 8005212 <_fflush_r+0x1a>
 800520e:	f7ff fb69 	bl	80048e4 <__sinit>
 8005212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f3      	beq.n	8005202 <_fflush_r+0xa>
 800521a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800521c:	07d0      	lsls	r0, r2, #31
 800521e:	d404      	bmi.n	800522a <_fflush_r+0x32>
 8005220:	0599      	lsls	r1, r3, #22
 8005222:	d402      	bmi.n	800522a <_fflush_r+0x32>
 8005224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005226:	f7ff fc46 	bl	8004ab6 <__retarget_lock_acquire_recursive>
 800522a:	4628      	mov	r0, r5
 800522c:	4621      	mov	r1, r4
 800522e:	f7ff ff5f 	bl	80050f0 <__sflush_r>
 8005232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005234:	07da      	lsls	r2, r3, #31
 8005236:	4605      	mov	r5, r0
 8005238:	d4e4      	bmi.n	8005204 <_fflush_r+0xc>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	059b      	lsls	r3, r3, #22
 800523e:	d4e1      	bmi.n	8005204 <_fflush_r+0xc>
 8005240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005242:	f7ff fc39 	bl	8004ab8 <__retarget_lock_release_recursive>
 8005246:	e7dd      	b.n	8005204 <_fflush_r+0xc>

08005248 <__sread>:
 8005248:	b510      	push	{r4, lr}
 800524a:	460c      	mov	r4, r1
 800524c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005250:	f000 f978 	bl	8005544 <_read_r>
 8005254:	2800      	cmp	r0, #0
 8005256:	bfab      	itete	ge
 8005258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800525a:	89a3      	ldrhlt	r3, [r4, #12]
 800525c:	181b      	addge	r3, r3, r0
 800525e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005262:	bfac      	ite	ge
 8005264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005266:	81a3      	strhlt	r3, [r4, #12]
 8005268:	bd10      	pop	{r4, pc}

0800526a <__swrite>:
 800526a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526e:	461f      	mov	r7, r3
 8005270:	898b      	ldrh	r3, [r1, #12]
 8005272:	05db      	lsls	r3, r3, #23
 8005274:	4605      	mov	r5, r0
 8005276:	460c      	mov	r4, r1
 8005278:	4616      	mov	r6, r2
 800527a:	d505      	bpl.n	8005288 <__swrite+0x1e>
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	2302      	movs	r3, #2
 8005282:	2200      	movs	r2, #0
 8005284:	f000 f94c 	bl	8005520 <_lseek_r>
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800528e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	4632      	mov	r2, r6
 8005296:	463b      	mov	r3, r7
 8005298:	4628      	mov	r0, r5
 800529a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529e:	f000 b963 	b.w	8005568 <_write_r>

080052a2 <__sseek>:
 80052a2:	b510      	push	{r4, lr}
 80052a4:	460c      	mov	r4, r1
 80052a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052aa:	f000 f939 	bl	8005520 <_lseek_r>
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	bf15      	itete	ne
 80052b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052be:	81a3      	strheq	r3, [r4, #12]
 80052c0:	bf18      	it	ne
 80052c2:	81a3      	strhne	r3, [r4, #12]
 80052c4:	bd10      	pop	{r4, pc}

080052c6 <__sclose>:
 80052c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ca:	f000 b8f7 	b.w	80054bc <_close_r>

080052ce <__swbuf_r>:
 80052ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d0:	460e      	mov	r6, r1
 80052d2:	4614      	mov	r4, r2
 80052d4:	4605      	mov	r5, r0
 80052d6:	b118      	cbz	r0, 80052e0 <__swbuf_r+0x12>
 80052d8:	6a03      	ldr	r3, [r0, #32]
 80052da:	b90b      	cbnz	r3, 80052e0 <__swbuf_r+0x12>
 80052dc:	f7ff fb02 	bl	80048e4 <__sinit>
 80052e0:	69a3      	ldr	r3, [r4, #24]
 80052e2:	60a3      	str	r3, [r4, #8]
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	071a      	lsls	r2, r3, #28
 80052e8:	d501      	bpl.n	80052ee <__swbuf_r+0x20>
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	b943      	cbnz	r3, 8005300 <__swbuf_r+0x32>
 80052ee:	4621      	mov	r1, r4
 80052f0:	4628      	mov	r0, r5
 80052f2:	f000 f82b 	bl	800534c <__swsetup_r>
 80052f6:	b118      	cbz	r0, 8005300 <__swbuf_r+0x32>
 80052f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80052fc:	4638      	mov	r0, r7
 80052fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	6922      	ldr	r2, [r4, #16]
 8005304:	1a98      	subs	r0, r3, r2
 8005306:	6963      	ldr	r3, [r4, #20]
 8005308:	b2f6      	uxtb	r6, r6
 800530a:	4283      	cmp	r3, r0
 800530c:	4637      	mov	r7, r6
 800530e:	dc05      	bgt.n	800531c <__swbuf_r+0x4e>
 8005310:	4621      	mov	r1, r4
 8005312:	4628      	mov	r0, r5
 8005314:	f7ff ff70 	bl	80051f8 <_fflush_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	d1ed      	bne.n	80052f8 <__swbuf_r+0x2a>
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	3b01      	subs	r3, #1
 8005320:	60a3      	str	r3, [r4, #8]
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	701e      	strb	r6, [r3, #0]
 800532a:	6962      	ldr	r2, [r4, #20]
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	429a      	cmp	r2, r3
 8005330:	d004      	beq.n	800533c <__swbuf_r+0x6e>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	07db      	lsls	r3, r3, #31
 8005336:	d5e1      	bpl.n	80052fc <__swbuf_r+0x2e>
 8005338:	2e0a      	cmp	r6, #10
 800533a:	d1df      	bne.n	80052fc <__swbuf_r+0x2e>
 800533c:	4621      	mov	r1, r4
 800533e:	4628      	mov	r0, r5
 8005340:	f7ff ff5a 	bl	80051f8 <_fflush_r>
 8005344:	2800      	cmp	r0, #0
 8005346:	d0d9      	beq.n	80052fc <__swbuf_r+0x2e>
 8005348:	e7d6      	b.n	80052f8 <__swbuf_r+0x2a>
	...

0800534c <__swsetup_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4b29      	ldr	r3, [pc, #164]	@ (80053f4 <__swsetup_r+0xa8>)
 8005350:	4605      	mov	r5, r0
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	460c      	mov	r4, r1
 8005356:	b118      	cbz	r0, 8005360 <__swsetup_r+0x14>
 8005358:	6a03      	ldr	r3, [r0, #32]
 800535a:	b90b      	cbnz	r3, 8005360 <__swsetup_r+0x14>
 800535c:	f7ff fac2 	bl	80048e4 <__sinit>
 8005360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005364:	0719      	lsls	r1, r3, #28
 8005366:	d422      	bmi.n	80053ae <__swsetup_r+0x62>
 8005368:	06da      	lsls	r2, r3, #27
 800536a:	d407      	bmi.n	800537c <__swsetup_r+0x30>
 800536c:	2209      	movs	r2, #9
 800536e:	602a      	str	r2, [r5, #0]
 8005370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800537a:	e033      	b.n	80053e4 <__swsetup_r+0x98>
 800537c:	0758      	lsls	r0, r3, #29
 800537e:	d512      	bpl.n	80053a6 <__swsetup_r+0x5a>
 8005380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005382:	b141      	cbz	r1, 8005396 <__swsetup_r+0x4a>
 8005384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005388:	4299      	cmp	r1, r3
 800538a:	d002      	beq.n	8005392 <__swsetup_r+0x46>
 800538c:	4628      	mov	r0, r5
 800538e:	f7ff fb95 	bl	8004abc <_free_r>
 8005392:	2300      	movs	r3, #0
 8005394:	6363      	str	r3, [r4, #52]	@ 0x34
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	2300      	movs	r3, #0
 80053a0:	6063      	str	r3, [r4, #4]
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f043 0308 	orr.w	r3, r3, #8
 80053ac:	81a3      	strh	r3, [r4, #12]
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	b94b      	cbnz	r3, 80053c6 <__swsetup_r+0x7a>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053bc:	d003      	beq.n	80053c6 <__swsetup_r+0x7a>
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 f83f 	bl	8005444 <__smakebuf_r>
 80053c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ca:	f013 0201 	ands.w	r2, r3, #1
 80053ce:	d00a      	beq.n	80053e6 <__swsetup_r+0x9a>
 80053d0:	2200      	movs	r2, #0
 80053d2:	60a2      	str	r2, [r4, #8]
 80053d4:	6962      	ldr	r2, [r4, #20]
 80053d6:	4252      	negs	r2, r2
 80053d8:	61a2      	str	r2, [r4, #24]
 80053da:	6922      	ldr	r2, [r4, #16]
 80053dc:	b942      	cbnz	r2, 80053f0 <__swsetup_r+0xa4>
 80053de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053e2:	d1c5      	bne.n	8005370 <__swsetup_r+0x24>
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
 80053e6:	0799      	lsls	r1, r3, #30
 80053e8:	bf58      	it	pl
 80053ea:	6962      	ldrpl	r2, [r4, #20]
 80053ec:	60a2      	str	r2, [r4, #8]
 80053ee:	e7f4      	b.n	80053da <__swsetup_r+0x8e>
 80053f0:	2000      	movs	r0, #0
 80053f2:	e7f7      	b.n	80053e4 <__swsetup_r+0x98>
 80053f4:	20000018 	.word	0x20000018

080053f8 <__swhatbuf_r>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	460c      	mov	r4, r1
 80053fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005400:	2900      	cmp	r1, #0
 8005402:	b096      	sub	sp, #88	@ 0x58
 8005404:	4615      	mov	r5, r2
 8005406:	461e      	mov	r6, r3
 8005408:	da0d      	bge.n	8005426 <__swhatbuf_r+0x2e>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	bf14      	ite	ne
 8005416:	2340      	movne	r3, #64	@ 0x40
 8005418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800541c:	2000      	movs	r0, #0
 800541e:	6031      	str	r1, [r6, #0]
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	b016      	add	sp, #88	@ 0x58
 8005424:	bd70      	pop	{r4, r5, r6, pc}
 8005426:	466a      	mov	r2, sp
 8005428:	f000 f858 	bl	80054dc <_fstat_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	dbec      	blt.n	800540a <__swhatbuf_r+0x12>
 8005430:	9901      	ldr	r1, [sp, #4]
 8005432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800543a:	4259      	negs	r1, r3
 800543c:	4159      	adcs	r1, r3
 800543e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005442:	e7eb      	b.n	800541c <__swhatbuf_r+0x24>

08005444 <__smakebuf_r>:
 8005444:	898b      	ldrh	r3, [r1, #12]
 8005446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005448:	079d      	lsls	r5, r3, #30
 800544a:	4606      	mov	r6, r0
 800544c:	460c      	mov	r4, r1
 800544e:	d507      	bpl.n	8005460 <__smakebuf_r+0x1c>
 8005450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	6123      	str	r3, [r4, #16]
 8005458:	2301      	movs	r3, #1
 800545a:	6163      	str	r3, [r4, #20]
 800545c:	b003      	add	sp, #12
 800545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005460:	ab01      	add	r3, sp, #4
 8005462:	466a      	mov	r2, sp
 8005464:	f7ff ffc8 	bl	80053f8 <__swhatbuf_r>
 8005468:	9f00      	ldr	r7, [sp, #0]
 800546a:	4605      	mov	r5, r0
 800546c:	4639      	mov	r1, r7
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff f920 	bl	80046b4 <_malloc_r>
 8005474:	b948      	cbnz	r0, 800548a <__smakebuf_r+0x46>
 8005476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547a:	059a      	lsls	r2, r3, #22
 800547c:	d4ee      	bmi.n	800545c <__smakebuf_r+0x18>
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	f043 0302 	orr.w	r3, r3, #2
 8005486:	81a3      	strh	r3, [r4, #12]
 8005488:	e7e2      	b.n	8005450 <__smakebuf_r+0xc>
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	6020      	str	r0, [r4, #0]
 800548e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800549a:	b15b      	cbz	r3, 80054b4 <__smakebuf_r+0x70>
 800549c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a0:	4630      	mov	r0, r6
 80054a2:	f000 f82d 	bl	8005500 <_isatty_r>
 80054a6:	b128      	cbz	r0, 80054b4 <__smakebuf_r+0x70>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	431d      	orrs	r5, r3
 80054b8:	81a5      	strh	r5, [r4, #12]
 80054ba:	e7cf      	b.n	800545c <__smakebuf_r+0x18>

080054bc <_close_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d06      	ldr	r5, [pc, #24]	@ (80054d8 <_close_r+0x1c>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	602b      	str	r3, [r5, #0]
 80054c8:	f7fb fc7b 	bl	8000dc2 <_close>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d102      	bne.n	80054d6 <_close_r+0x1a>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	b103      	cbz	r3, 80054d6 <_close_r+0x1a>
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	200002e0 	.word	0x200002e0

080054dc <_fstat_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d07      	ldr	r5, [pc, #28]	@ (80054fc <_fstat_r+0x20>)
 80054e0:	2300      	movs	r3, #0
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	f7fb fc76 	bl	8000dda <_fstat>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d102      	bne.n	80054f8 <_fstat_r+0x1c>
 80054f2:	682b      	ldr	r3, [r5, #0]
 80054f4:	b103      	cbz	r3, 80054f8 <_fstat_r+0x1c>
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	200002e0 	.word	0x200002e0

08005500 <_isatty_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d06      	ldr	r5, [pc, #24]	@ (800551c <_isatty_r+0x1c>)
 8005504:	2300      	movs	r3, #0
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fb fc75 	bl	8000dfa <_isatty>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_isatty_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_isatty_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	200002e0 	.word	0x200002e0

08005520 <_lseek_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d07      	ldr	r5, [pc, #28]	@ (8005540 <_lseek_r+0x20>)
 8005524:	4604      	mov	r4, r0
 8005526:	4608      	mov	r0, r1
 8005528:	4611      	mov	r1, r2
 800552a:	2200      	movs	r2, #0
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	f7fb fc6e 	bl	8000e10 <_lseek>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_lseek_r+0x1e>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_lseek_r+0x1e>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	200002e0 	.word	0x200002e0

08005544 <_read_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d07      	ldr	r5, [pc, #28]	@ (8005564 <_read_r+0x20>)
 8005548:	4604      	mov	r4, r0
 800554a:	4608      	mov	r0, r1
 800554c:	4611      	mov	r1, r2
 800554e:	2200      	movs	r2, #0
 8005550:	602a      	str	r2, [r5, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	f7fb fbfc 	bl	8000d50 <_read>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_read_r+0x1e>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_read_r+0x1e>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	200002e0 	.word	0x200002e0

08005568 <_write_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d07      	ldr	r5, [pc, #28]	@ (8005588 <_write_r+0x20>)
 800556c:	4604      	mov	r4, r0
 800556e:	4608      	mov	r0, r1
 8005570:	4611      	mov	r1, r2
 8005572:	2200      	movs	r2, #0
 8005574:	602a      	str	r2, [r5, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	f7fb fc07 	bl	8000d8a <_write>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_write_r+0x1e>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_write_r+0x1e>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	200002e0 	.word	0x200002e0

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
