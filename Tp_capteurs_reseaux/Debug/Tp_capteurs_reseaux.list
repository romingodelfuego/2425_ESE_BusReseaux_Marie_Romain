
Tp_capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f54  08005f54  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f54  08005f54  00006f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f5c  08005f5c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f5c  08005f5c  00006f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f60  08005f60  00006f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005f64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000068  08005fcc  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005fcc  000072fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2f8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ef  00000000  00000000  00016390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00018c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f3  00000000  00000000  00019968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023769  00000000  00000000  0001a35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f5a  00000000  00000000  0003dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf907  00000000  00000000  0004fa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f325  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e2c  00000000  00000000  0011f368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00123194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d28 	.word	0x08005d28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005d28 	.word	0x08005d28

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005c6:	23d0      	movs	r3, #208	@ 0xd0
 80005c8:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005ca:	23ee      	movs	r3, #238	@ 0xee
 80005cc:	4619      	mov	r1, r3
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	481a      	ldr	r0, [pc, #104]	@ (8000644 <BMP280_check+0x84>)
 80005da:	f001 fcfb 	bl	8001fd4 <HAL_I2C_Master_Transmit>
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80005e8:	4817      	ldr	r0, [pc, #92]	@ (8000648 <BMP280_check+0x88>)
 80005ea:	f004 fc31 	bl	8004e50 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80005ee:	23ee      	movs	r3, #238	@ 0xee
 80005f0:	4619      	mov	r1, r3
 80005f2:	2301      	movs	r3, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	1d3a      	adds	r2, r7, #4
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4603      	mov	r3, r0
 8000600:	4810      	ldr	r0, [pc, #64]	@ (8000644 <BMP280_check+0x84>)
 8000602:	f001 fde5 	bl	80021d0 <HAL_I2C_Master_Receive>
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 8000610:	480e      	ldr	r0, [pc, #56]	@ (800064c <BMP280_check+0x8c>)
 8000612:	f004 fc1d 	bl	8004e50 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8000616:	793b      	ldrb	r3, [r7, #4]
 8000618:	4619      	mov	r1, r3
 800061a:	480d      	ldr	r0, [pc, #52]	@ (8000650 <BMP280_check+0x90>)
 800061c:	f004 fbb0 	bl	8004d80 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000620:	793b      	ldrb	r3, [r7, #4]
 8000622:	2258      	movs	r2, #88	@ 0x58
 8000624:	4293      	cmp	r3, r2
 8000626:	d104      	bne.n	8000632 <BMP280_check+0x72>
		printf("Ok\r\n");
 8000628:	480a      	ldr	r0, [pc, #40]	@ (8000654 <BMP280_check+0x94>)
 800062a:	f004 fc11 	bl	8004e50 <puts>
		return 0;
 800062e:	2300      	movs	r3, #0
 8000630:	e003      	b.n	800063a <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 8000632:	4809      	ldr	r0, [pc, #36]	@ (8000658 <BMP280_check+0x98>)
 8000634:	f004 fc0c 	bl	8004e50 <puts>
		return 1;
 8000638:	2301      	movs	r3, #1
	}
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000c4 	.word	0x200000c4
 8000648:	08005d40 	.word	0x08005d40
 800064c:	08005d64 	.word	0x08005d64
 8000650:	08005d88 	.word	0x08005d88
 8000654:	08005d94 	.word	0x08005d94
 8000658:	08005d98 	.word	0x08005d98

0800065c <get_coef_temperature>:


uint8_t get_coef_temperature(){
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
	uint8_t coeff_TEMP[3*2];
	uint8_t reg_trimming_TEMP=0x88;
 8000662:	2388      	movs	r3, #136	@ 0x88
 8000664:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_TEMP, 1,1000);
 8000666:	23ee      	movs	r3, #238	@ 0xee
 8000668:	4619      	mov	r1, r3
 800066a:	1dfa      	adds	r2, r7, #7
 800066c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <get_coef_temperature+0x78>)
 8000676:	f001 fcad 	bl	8001fd4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(BMP280_ADDR), coeff_TEMP, 3*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 800067a:	23ee      	movs	r3, #238	@ 0xee
 800067c:	4619      	mov	r1, r3
 800067e:	f107 0208 	add.w	r2, r7, #8
 8000682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2306      	movs	r3, #6
 800068a:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <get_coef_temperature+0x78>)
 800068c:	f001 fda0 	bl	80021d0 <HAL_I2C_Master_Receive>

	dig_T1 = coeff_TEMP[0];
 8000690:	7a3b      	ldrb	r3, [r7, #8]
 8000692:	461a      	mov	r2, r3
 8000694:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <get_coef_temperature+0x7c>)
 8000696:	801a      	strh	r2, [r3, #0]
	dig_T2 = coeff_TEMP[1];
 8000698:	7a7b      	ldrb	r3, [r7, #9]
 800069a:	b21a      	sxth	r2, r3
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <get_coef_temperature+0x80>)
 800069e:	801a      	strh	r2, [r3, #0]
	dig_T3 = coeff_TEMP[3];
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <get_coef_temperature+0x84>)
 80006a6:	801a      	strh	r2, [r3, #0]
	printf("temperature coefficient: %d, %d, %d \r\n", dig_T1, dig_T2, dig_T3);
 80006a8:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <get_coef_temperature+0x7c>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <get_coef_temperature+0x80>)
 80006b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <get_coef_temperature+0x84>)
 80006b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <get_coef_temperature+0x88>)
 80006be:	f004 fb5f 	bl	8004d80 <iprintf>
	return dig_T1, dig_T2, dig_T3;
 80006c2:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <get_coef_temperature+0x84>)
 80006c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c8:	b2db      	uxtb	r3, r3
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000c4 	.word	0x200000c4
 80006d8:	20000084 	.word	0x20000084
 80006dc:	20000086 	.word	0x20000086
 80006e0:	20000088 	.word	0x20000088
 80006e4:	08005da4 	.word	0x08005da4

080006e8 <get_coef_pressure>:

uint8_t get_coef_pressure(){
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	b08d      	sub	sp, #52	@ 0x34
 80006ec:	af06      	add	r7, sp, #24
	uint8_t coeff_PRESS[9*2];
	uint8_t reg_trimming_PRESS=0x8E;
 80006ee:	238e      	movs	r3, #142	@ 0x8e
 80006f0:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit( &hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_PRESS, 1,1000);
 80006f2:	23ee      	movs	r3, #238	@ 0xee
 80006f4:	4619      	mov	r1, r3
 80006f6:	1cfa      	adds	r2, r7, #3
 80006f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2301      	movs	r3, #1
 8000700:	4833      	ldr	r0, [pc, #204]	@ (80007d0 <get_coef_pressure+0xe8>)
 8000702:	f001 fc67 	bl	8001fd4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1,(uint16_t)(BMP280_ADDR), coeff_PRESS, 9*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 8000706:	23ee      	movs	r3, #238	@ 0xee
 8000708:	4619      	mov	r1, r3
 800070a:	1d3a      	adds	r2, r7, #4
 800070c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2312      	movs	r3, #18
 8000714:	482e      	ldr	r0, [pc, #184]	@ (80007d0 <get_coef_pressure+0xe8>)
 8000716:	f001 fd5b 	bl	80021d0 <HAL_I2C_Master_Receive>

	dig_P1 =coeff_PRESS[0];
 800071a:	793b      	ldrb	r3, [r7, #4]
 800071c:	461a      	mov	r2, r3
 800071e:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <get_coef_pressure+0xec>)
 8000720:	801a      	strh	r2, [r3, #0]
	dig_P2 =coeff_PRESS[1];
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	b21a      	sxth	r2, r3
 8000726:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <get_coef_pressure+0xf0>)
 8000728:	801a      	strh	r2, [r3, #0]
	dig_P3 =coeff_PRESS[2];
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	b21a      	sxth	r2, r3
 800072e:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <get_coef_pressure+0xf4>)
 8000730:	801a      	strh	r2, [r3, #0]
	dig_P4 =coeff_PRESS[3];
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <get_coef_pressure+0xf8>)
 8000738:	801a      	strh	r2, [r3, #0]
	dig_P5 =coeff_PRESS[4];
 800073a:	7a3b      	ldrb	r3, [r7, #8]
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <get_coef_pressure+0xfc>)
 8000740:	801a      	strh	r2, [r3, #0]
	dig_P6 =coeff_PRESS[5];
 8000742:	7a7b      	ldrb	r3, [r7, #9]
 8000744:	b21a      	sxth	r2, r3
 8000746:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <get_coef_pressure+0x100>)
 8000748:	801a      	strh	r2, [r3, #0]
	dig_P7 =coeff_PRESS[6];
 800074a:	7abb      	ldrb	r3, [r7, #10]
 800074c:	b21a      	sxth	r2, r3
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <get_coef_pressure+0x104>)
 8000750:	801a      	strh	r2, [r3, #0]
	dig_P8 =coeff_PRESS[7];
 8000752:	7afb      	ldrb	r3, [r7, #11]
 8000754:	b21a      	sxth	r2, r3
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <get_coef_pressure+0x108>)
 8000758:	801a      	strh	r2, [r3, #0]
	dig_P9 =coeff_PRESS[8];
 800075a:	7b3b      	ldrb	r3, [r7, #12]
 800075c:	b21a      	sxth	r2, r3
 800075e:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <get_coef_pressure+0x10c>)
 8000760:	801a      	strh	r2, [r3, #0]

	printf("pressure coefficient: %d, %d, %d, %d,%d,%d,%d, %d,%d \r\n", dig_P1, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9);
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <get_coef_pressure+0xec>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	461e      	mov	r6, r3
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <get_coef_pressure+0xf0>)
 800076a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076e:	469c      	mov	ip, r3
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <get_coef_pressure+0xf4>)
 8000772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000776:	469e      	mov	lr, r3
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <get_coef_pressure+0xf8>)
 800077a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077e:	461a      	mov	r2, r3
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <get_coef_pressure+0xfc>)
 8000782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000786:	4619      	mov	r1, r3
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <get_coef_pressure+0x100>)
 800078a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078e:	4618      	mov	r0, r3
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <get_coef_pressure+0x104>)
 8000792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000796:	461c      	mov	r4, r3
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <get_coef_pressure+0x108>)
 800079a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079e:	461d      	mov	r5, r3
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <get_coef_pressure+0x10c>)
 80007a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a6:	9305      	str	r3, [sp, #20]
 80007a8:	9504      	str	r5, [sp, #16]
 80007aa:	9403      	str	r4, [sp, #12]
 80007ac:	9002      	str	r0, [sp, #8]
 80007ae:	9101      	str	r1, [sp, #4]
 80007b0:	9200      	str	r2, [sp, #0]
 80007b2:	4673      	mov	r3, lr
 80007b4:	4662      	mov	r2, ip
 80007b6:	4631      	mov	r1, r6
 80007b8:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <get_coef_pressure+0x110>)
 80007ba:	f004 fae1 	bl	8004d80 <iprintf>

	return dig_P1, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <get_coef_pressure+0x10c>)
 80007c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c4:	b2db      	uxtb	r3, r3

}
 80007c6:	4618      	mov	r0, r3
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000c4 	.word	0x200000c4
 80007d4:	2000008a 	.word	0x2000008a
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	2000008e 	.word	0x2000008e
 80007e0:	20000090 	.word	0x20000090
 80007e4:	20000092 	.word	0x20000092
 80007e8:	20000094 	.word	0x20000094
 80007ec:	20000096 	.word	0x20000096
 80007f0:	20000098 	.word	0x20000098
 80007f4:	2000009a 	.word	0x2000009a
 80007f8:	08005dcc 	.word	0x08005dcc

080007fc <BMP280_init>:


int BMP280_init() {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000802:	2357      	movs	r3, #87	@ 0x57
 8000804:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8000806:	480f      	ldr	r0, [pc, #60]	@ (8000844 <BMP280_init+0x48>)
 8000808:	f004 fb22 	bl	8004e50 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 800080c:	22f4      	movs	r2, #244	@ 0xf4
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4619      	mov	r1, r3
 8000812:	4610      	mov	r0, r2
 8000814:	f000 f81c 	bl	8000850 <BMP280_Write_Reg>
 8000818:	4603      	mov	r3, r0
 800081a:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d108      	bne.n	8000834 <BMP280_init+0x38>
		printf("Config Ok\r\n");
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <BMP280_init+0x4c>)
 8000824:	f004 fb14 	bl	8004e50 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	get_coef_pressure();
 8000828:	f7ff ff5e 	bl	80006e8 <get_coef_pressure>
	get_coef_temperature();
 800082c:	f7ff ff16 	bl	800065c <get_coef_temperature>
	return 0;
 8000830:	2300      	movs	r3, #0
 8000832:	e003      	b.n	800083c <BMP280_init+0x40>
		printf("Config not Ok!\r\n");
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <BMP280_init+0x50>)
 8000836:	f004 fb0b 	bl	8004e50 <puts>
		return 1;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08005e04 	.word	0x08005e04
 8000848:	08005e14 	.word	0x08005e14
 800084c:	08005e20 	.word	0x08005e20

08000850 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000868:	23ee      	movs	r3, #238	@ 0xee
 800086a:	4619      	mov	r1, r3
 800086c:	f107 020c 	add.w	r2, r7, #12
 8000870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2302      	movs	r3, #2
 8000878:	4814      	ldr	r0, [pc, #80]	@ (80008cc <BMP280_Write_Reg+0x7c>)
 800087a:	f001 fbab 	bl	8001fd4 <HAL_I2C_Master_Transmit>
 800087e:	4603      	mov	r3, r0
 8000880:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <BMP280_Write_Reg+0x3e>
		printf("xErreur with I2C Transmit\r\n");
 8000888:	4811      	ldr	r0, [pc, #68]	@ (80008d0 <BMP280_Write_Reg+0x80>)
 800088a:	f004 fae1 	bl	8004e50 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800088e:	23ee      	movs	r3, #238	@ 0xee
 8000890:	4619      	mov	r1, r3
 8000892:	f107 020c 	add.w	r2, r7, #12
 8000896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <BMP280_Write_Reg+0x7c>)
 80008a0:	f001 fc96 	bl	80021d0 <HAL_I2C_Master_Receive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <BMP280_Write_Reg+0x64>
		printf("xErreur with I2C Receive\r\n");
 80008ae:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <BMP280_Write_Reg+0x84>)
 80008b0:	f004 face 	bl	8004e50 <puts>
	}

	if (buf[0] == value) {
 80008b4:	7b3b      	ldrb	r3, [r7, #12]
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d101      	bne.n	80008c0 <BMP280_Write_Reg+0x70>
		return 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	e000      	b.n	80008c2 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 80008c0:	2301      	movs	r3, #1
	}
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000c4 	.word	0x200000c4
 80008d0:	08005e30 	.word	0x08005e30
 80008d4:	08005e4c 	.word	0x08005e4c

080008d8 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af02      	add	r7, sp, #8
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	4613      	mov	r3, r2
 80008e6:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80008e8:	23ee      	movs	r3, #238	@ 0xee
 80008ea:	4619      	mov	r1, r3
 80008ec:	1dfa      	adds	r2, r7, #7
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2301      	movs	r3, #1
 80008f6:	4814      	ldr	r0, [pc, #80]	@ (8000948 <BMP280_Read_Reg+0x70>)
 80008f8:	f001 fb6c 	bl	8001fd4 <HAL_I2C_Master_Transmit>
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d002      	beq.n	800090c <BMP280_Read_Reg+0x34>
		printf("xErreur with I2C Transmit\r\n");
 8000906:	4811      	ldr	r0, [pc, #68]	@ (800094c <BMP280_Read_Reg+0x74>)
 8000908:	f004 faa2 	bl	8004e50 <puts>
	}

	buf = (uint8_t*) malloc(length);
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	4618      	mov	r0, r3
 8000910:	f004 f896 	bl	8004a40 <malloc>
 8000914:	4603      	mov	r3, r0
 8000916:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000918:	23ee      	movs	r3, #238	@ 0xee
 800091a:	4619      	mov	r1, r3
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	b29b      	uxth	r3, r3
 8000920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <BMP280_Read_Reg+0x70>)
 800092a:	f001 fc51 	bl	80021d0 <HAL_I2C_Master_Receive>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <BMP280_Read_Reg+0x66>
		printf("xErreur with I2C Receive\r\n");
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <BMP280_Read_Reg+0x78>)
 800093a:	f004 fa89 	bl	8004e50 <puts>
	}

	return buf;
 800093e:	68bb      	ldr	r3, [r7, #8]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000c4 	.word	0x200000c4
 800094c:	08005e30 	.word	0x08005e30
 8000950:	08005e4c 	.word	0x08005e4c

08000954 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 800095a:	23fa      	movs	r3, #250	@ 0xfa
 800095c:	2203      	movs	r2, #3
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ffb9 	bl	80008d8 <BMP280_Read_Reg>
 8000966:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	031a      	lsls	r2, r3, #12
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3301      	adds	r3, #1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	3202      	adds	r2, #2
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	0912      	lsrs	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000982:	4313      	orrs	r3, r2
 8000984:	603b      	str	r3, [r7, #0]

	free(buf);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f004 f862 	bl	8004a50 <free>

	printf("Temperature: ");
 800098c:	4807      	ldr	r0, [pc, #28]	@ (80009ac <BMP280_get_temperature+0x58>)
 800098e:	f004 f9f7 	bl	8004d80 <iprintf>
	printf("%d", adc_T);
 8000992:	6839      	ldr	r1, [r7, #0]
 8000994:	4806      	ldr	r0, [pc, #24]	@ (80009b0 <BMP280_get_temperature+0x5c>)
 8000996:	f004 f9f3 	bl	8004d80 <iprintf>
	printf("\r\n");
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <BMP280_get_temperature+0x60>)
 800099c:	f004 fa58 	bl	8004e50 <puts>

	return adc_T;
 80009a0:	683b      	ldr	r3, [r7, #0]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08005e68 	.word	0x08005e68
 80009b0:	08005e78 	.word	0x08005e78
 80009b4:	08005e7c 	.word	0x08005e7c

080009b8 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 80009be:	23f7      	movs	r3, #247	@ 0xf7
 80009c0:	2203      	movs	r2, #3
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff87 	bl	80008d8 <BMP280_Read_Reg>
 80009ca:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	031a      	lsls	r2, r3, #12
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3301      	adds	r3, #1
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	3202      	adds	r2, #2
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	0912      	lsrs	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80009e6:	4313      	orrs	r3, r2
 80009e8:	603b      	str	r3, [r7, #0]

	free(buf);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f004 f830 	bl	8004a50 <free>

	printf("Pressure:    0x");
 80009f0:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <BMP280_get_pressure+0x58>)
 80009f2:	f004 f9c5 	bl	8004d80 <iprintf>
	//printf("%05lX", adc_P);
	printf("%u", adc_P);
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <BMP280_get_pressure+0x5c>)
 80009fa:	f004 f9c1 	bl	8004d80 <iprintf>
	printf("\r\n");
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <BMP280_get_pressure+0x60>)
 8000a00:	f004 fa26 	bl	8004e50 <puts>

	return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08005e80 	.word	0x08005e80
 8000a14:	08005e90 	.word	0x08005e90
 8000a18:	08005e7c 	.word	0x08005e7c

08000a1c <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <MX_CAN2_Init+0x64>)
 8000a24:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a28:	2210      	movs	r2, #16
 8000a2a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a38:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_CAN2_Init+0x60>)
 8000a6a:	f000 fd21 	bl	80014b0 <HAL_CAN_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 fa78 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000009c 	.word	0x2000009c
 8000a80:	40006800 	.word	0x40006800

08000a84 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	@ (8000b24 <HAL_CAN_MspInit+0xa0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d13a      	bne.n	8000b1c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a1e      	ldr	r2, [pc, #120]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000ab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000acc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_CAN_MspInit+0xa4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000afa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_CAN_MspInit+0xa8>)
 8000b18:	f000 ff6a 	bl	80019f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40006800 	.word	0x40006800
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a25      	ldr	r2, [pc, #148]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a1e      	ldr	r2, [pc, #120]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a17      	ldr	r2, [pc, #92]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_GPIO_Init+0xd0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4812      	ldr	r0, [pc, #72]	@ (8000c04 <MX_GPIO_Init+0xd4>)
 8000bbc:	f001 f8ac 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <MX_GPIO_Init+0xd8>)
 8000bd8:	f000 ff0a 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <MX_GPIO_Init+0xd4>)
 8000bf4:	f000 fefc 	bl	80019f0 <HAL_GPIO_Init>

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020800 	.word	0x40020800

08000c0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c12:	4a13      	ldr	r2, [pc, #76]	@ (8000c60 <MX_I2C1_Init+0x54>)
 8000c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c18:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <MX_I2C1_Init+0x58>)
 8000c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c4a:	f001 f87f 	bl	8001d4c <HAL_I2C_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f000 f988 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000c4 	.word	0x200000c4
 8000c60:	40005400 	.word	0x40005400
 8000c64:	000186a0 	.word	0x000186a0

08000c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	@ 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <HAL_I2C_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12c      	bne.n	8000ce4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <HAL_I2C_MspInit+0x8c>)
 8000cc4:	f000 fe94 	bl	80019f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	4a07      	ldr	r2, [pc, #28]	@ (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_I2C_MspInit+0x88>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	@ 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0aa      	sub	sp, #168	@ 0xa8
 8000cfc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cfe:	f000 fb65 	bl	80013cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d02:	f000 f8c3 	bl	8000e8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d06:	f7ff ff13 	bl	8000b30 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d0a:	f000 fa87 	bl	800121c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000d0e:	f7ff ff7d 	bl	8000c0c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000d12:	f000 fa59 	bl	80011c8 <MX_USART1_UART_Init>
	MX_CAN2_Init();
 8000d16:	f7ff fe81 	bl	8000a1c <MX_CAN2_Init>
	*/




	printf("\r\nChecking for BMP280\r\n");
 8000d1a:	4852      	ldr	r0, [pc, #328]	@ (8000e64 <main+0x16c>)
 8000d1c:	f004 f898 	bl	8004e50 <puts>
	BMP280_check();
 8000d20:	f7ff fc4e 	bl	80005c0 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 8000d24:	4850      	ldr	r0, [pc, #320]	@ (8000e68 <main+0x170>)
 8000d26:	f004 f893 	bl	8004e50 <puts>
	BMP280_init();
 8000d2a:	f7ff fd67 	bl	80007fc <BMP280_init>


	uint8_t Rx_data;
	char Rx_Buffer[100];
	uint8_t Rx_index = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		//printf("pression compensée :%d \r\n",p);
		//printf("temperature compensée :%d \r\n",t);



		HAL_UART_Receive(&huart1,  (uint8_t*)&Rx_data, 1, 1000);
 8000d34:	f107 0193 	add.w	r1, r7, #147	@ 0x93
 8000d38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	484b      	ldr	r0, [pc, #300]	@ (8000e6c <main+0x174>)
 8000d40:	f002 fec1 	bl	8003ac6 <HAL_UART_Receive>
		printf("receive %d\r\n", Rx_data);
 8000d44:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4849      	ldr	r0, [pc, #292]	@ (8000e70 <main+0x178>)
 8000d4c:	f004 f818 	bl	8004d80 <iprintf>
		Rx_Buffer[Rx_index++] = Rx_data;
 8000d50:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 8000d5a:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8000d5e:	33a8      	adds	r3, #168	@ 0xa8
 8000d60:	443b      	add	r3, r7
 8000d62:	f803 2c7c 	strb.w	r2, [r3, #-124]
		printf("Buffer: %s\r\n", Rx_Buffer);
 8000d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4841      	ldr	r0, [pc, #260]	@ (8000e74 <main+0x17c>)
 8000d6e:	f004 f807 	bl	8004d80 <iprintf>


		if (Rx_data == '\r' || Rx_data == '\n')
 8000d72:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000d76:	2b0d      	cmp	r3, #13
 8000d78:	d003      	beq.n	8000d82 <main+0x8a>
 8000d7a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d15f      	bne.n	8000e42 <main+0x14a>
		{
			if (strcmp(Rx_Buffer, "get_t\r") == 0 || strcmp(Rx_Buffer, "get_t\n") == 0)
 8000d82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d86:	493c      	ldr	r1, [pc, #240]	@ (8000e78 <main+0x180>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fa41 	bl	8000210 <strcmp>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <main+0xae>
 8000d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d98:	4938      	ldr	r1, [pc, #224]	@ (8000e7c <main+0x184>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa38 	bl	8000210 <strcmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d119      	bne.n	8000dda <main+0xe2>
			{
				int32_t get_t;
				get_t = BMP280_get_temperature();
 8000da6:	f7ff fdd5 	bl	8000954 <BMP280_get_temperature>
 8000daa:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
				char value[20];
				int size = sprintf(value, "\r\n%ld\r\n", get_t);
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000db6:	4932      	ldr	r1, [pc, #200]	@ (8000e80 <main+0x188>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 feff 	bl	8004bbc <siprintf>
 8000dbe:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
				HAL_UART_Transmit(&huart1, (uint8_t*)value, size - 1, 1000);
 8000dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	f107 0118 	add.w	r1, r7, #24
 8000dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd4:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <main+0x174>)
 8000dd6:	f002 fdeb 	bl	80039b0 <HAL_UART_Transmit>

			}

			if (strcmp(Rx_Buffer, "get_p\r") == 0 || strcmp(Rx_Buffer, "get_p\n") == 0)
 8000dda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dde:	4929      	ldr	r1, [pc, #164]	@ (8000e84 <main+0x18c>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fa15 	bl	8000210 <strcmp>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <main+0x106>
 8000dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df0:	4925      	ldr	r1, [pc, #148]	@ (8000e88 <main+0x190>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fa0c 	bl	8000210 <strcmp>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d117      	bne.n	8000e2e <main+0x136>
			{
				int32_t get_p;
				get_p = BMP280_get_pressure();
 8000dfe:	f7ff fddb 	bl	80009b8 <BMP280_get_pressure>
 8000e02:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				char value[20];
				int size = sprintf(value, "\r\n%ld\r\n", get_p);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000e0c:	491c      	ldr	r1, [pc, #112]	@ (8000e80 <main+0x188>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fed4 	bl	8004bbc <siprintf>
 8000e14:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				HAL_UART_Transmit(&huart1, (uint8_t*)value, size - 1, 1000);
 8000e18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	1d39      	adds	r1, r7, #4
 8000e24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e28:	4810      	ldr	r0, [pc, #64]	@ (8000e6c <main+0x174>)
 8000e2a:	f002 fdc1 	bl	80039b0 <HAL_UART_Transmit>


			}
			Rx_index = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8000e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e38:	2264      	movs	r2, #100	@ 0x64
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 f80f 	bl	8004e60 <memset>
		}

		if (Rx_index >= sizeof(Rx_Buffer) - 1)
 8000e42:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000e46:	2b62      	cmp	r3, #98	@ 0x62
 8000e48:	f67f af74 	bls.w	8000d34 <main+0x3c>
		{
			Rx_index = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8000e52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e56:	2264      	movs	r2, #100	@ 0x64
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 f800 	bl	8004e60 <memset>
		HAL_UART_Receive(&huart1,  (uint8_t*)&Rx_data, 1, 1000);
 8000e60:	e768      	b.n	8000d34 <main+0x3c>
 8000e62:	bf00      	nop
 8000e64:	08005e94 	.word	0x08005e94
 8000e68:	08005eac 	.word	0x08005eac
 8000e6c:	2000011c 	.word	0x2000011c
 8000e70:	08005ec0 	.word	0x08005ec0
 8000e74:	08005ed0 	.word	0x08005ed0
 8000e78:	08005ee0 	.word	0x08005ee0
 8000e7c:	08005ee8 	.word	0x08005ee8
 8000e80:	08005ef0 	.word	0x08005ef0
 8000e84:	08005ef8 	.word	0x08005ef8
 8000e88:	08005f00 	.word	0x08005f00

08000e8c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	@ 0x50
 8000e90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2234      	movs	r2, #52	@ 0x34
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 ffe0 	bl	8004e60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	4a29      	ldr	r2, [pc, #164]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec0:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <SystemClock_Config+0xd8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed8:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <SystemClock_Config+0xd8>)
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <SystemClock_Config+0xd8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000efe:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000f00:	2308      	movs	r3, #8
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000f04:	23b4      	movs	r3, #180	@ 0xb4
 8000f06:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fa5b 	bl	80033d4 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000f24:	f000 f820 	bl	8000f68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f38:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fefa 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000f52:	f000 f809 	bl	8000f68 <Error_Handler>
	}
}
 8000f56:	bf00      	nop
 8000f58:	3750      	adds	r7, #80	@ 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <Error_Handler+0x8>

08000f74 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f7c:	1d39      	adds	r1, r7, #4
 8000f7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f82:	2201      	movs	r2, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <__io_putchar+0x20>)
 8000f86:	f002 fd13 	bl	80039b0 <HAL_UART_Transmit>

  return ch;
 8000f8a:	687b      	ldr	r3, [r7, #4]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000164 	.word	0x20000164

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_MspInit+0x4c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f000 fc36 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 fa17 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <USART1_IRQHandler+0x10>)
 800104e:	f002 fdd1 	bl	8003bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000011c 	.word	0x2000011c

0800105c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e00a      	b.n	8001084 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800106e:	f3af 8000 	nop.w
 8001072:	4601      	mov	r1, r0
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	b2ca      	uxtb	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf0      	blt.n	800106e <_read+0x12>
  }

  return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e009      	b.n	80010bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	60ba      	str	r2, [r7, #8]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5f 	bl	8000f74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf1      	blt.n	80010a8 <_write+0x12>
  }
  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_close>:

int _close(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010f6:	605a      	str	r2, [r3, #4]
  return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_isatty>:

int _isatty(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f003 fe92 	bl	8004e90 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20020000 	.word	0x20020000
 8001198:	00000400 	.word	0x00000400
 800119c:	20000118 	.word	0x20000118
 80011a0:	20000300 	.word	0x20000300

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_USART1_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 8001200:	f002 fb86 	bl	8003910 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f7ff fead 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000011c 	.word	0x2000011c
 8001218:	40011000 	.word	0x40011000

0800121c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_USART2_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_USART2_UART_Init+0x4c>)
 8001254:	f002 fb5c 	bl	8003910 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f7ff fe83 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000164 	.word	0x20000164
 800126c:	40004400 	.word	0x40004400

08001270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a36      	ldr	r2, [pc, #216]	@ (8001368 <HAL_UART_MspInit+0xf8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d135      	bne.n	80012fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b35      	ldr	r3, [pc, #212]	@ (800136c <HAL_UART_MspInit+0xfc>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a34      	ldr	r2, [pc, #208]	@ (800136c <HAL_UART_MspInit+0xfc>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b32      	ldr	r3, [pc, #200]	@ (800136c <HAL_UART_MspInit+0xfc>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <HAL_UART_MspInit+0xfc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a2d      	ldr	r2, [pc, #180]	@ (800136c <HAL_UART_MspInit+0xfc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <HAL_UART_MspInit+0xfc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012dc:	2307      	movs	r3, #7
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4822      	ldr	r0, [pc, #136]	@ (8001370 <HAL_UART_MspInit+0x100>)
 80012e8:	f000 fb82 	bl	80019f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2025      	movs	r0, #37	@ 0x25
 80012f2:	f000 fab4 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012f6:	2025      	movs	r0, #37	@ 0x25
 80012f8:	f000 facd 	bl	8001896 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012fc:	e030      	b.n	8001360 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1c      	ldr	r2, [pc, #112]	@ (8001374 <HAL_UART_MspInit+0x104>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d12b      	bne.n	8001360 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <HAL_UART_MspInit+0xfc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a16      	ldr	r2, [pc, #88]	@ (800136c <HAL_UART_MspInit+0xfc>)
 8001312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_UART_MspInit+0xfc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_UART_MspInit+0xfc>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_UART_MspInit+0xfc>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6313      	str	r3, [r2, #48]	@ 0x30
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_UART_MspInit+0xfc>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001340:	230c      	movs	r3, #12
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001350:	2307      	movs	r3, #7
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <HAL_UART_MspInit+0x100>)
 800135c:	f000 fb48 	bl	80019f0 <HAL_GPIO_Init>
}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	@ 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40011000 	.word	0x40011000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	40004400 	.word	0x40004400

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800137c:	f7ff ff12 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	@ (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f003 fd79 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fca5 	bl	8000cf8 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013bc:	08005f64 	.word	0x08005f64
  ldr r2, =_sbss
 80013c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013c4:	200002fc 	.word	0x200002fc

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <HAL_Init+0x40>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <HAL_Init+0x40>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_Init+0x40>)
 80013ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 fa27 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fdca 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fa3f 	bl	80018b2 <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800144c:	f000 fa07 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	20000008 	.word	0x20000008
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008
 8001494:	200001ac 	.word	0x200001ac

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200001ac 	.word	0x200001ac

080014b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0ed      	b.n	800169e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fad8 	bl	8000a84 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e4:	f7ff ffd8 	bl	8001498 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ea:	e012      	b.n	8001512 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ec:	f7ff ffd4 	bl	8001498 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d90b      	bls.n	8001512 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2205      	movs	r2, #5
 800150a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0c5      	b.n	800169e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0e5      	beq.n	80014ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0202 	bic.w	r2, r2, #2
 800152e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001530:	f7ff ffb2 	bl	8001498 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001536:	e012      	b.n	800155e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001538:	f7ff ffae 	bl	8001498 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d90b      	bls.n	800155e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2205      	movs	r2, #5
 8001556:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e09f      	b.n	800169e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e5      	bne.n	8001538 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e1b      	ldrb	r3, [r3, #24]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d108      	bne.n	8001586 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	e007      	b.n	8001596 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7e5b      	ldrb	r3, [r3, #25]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d108      	bne.n	80015b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e007      	b.n	80015c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7e9b      	ldrb	r3, [r3, #26]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d108      	bne.n	80015da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0220 	orr.w	r2, r2, #32
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e007      	b.n	80015ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0220 	bic.w	r2, r2, #32
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7edb      	ldrb	r3, [r3, #27]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d108      	bne.n	8001604 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0210 	bic.w	r2, r2, #16
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e007      	b.n	8001614 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0210 	orr.w	r2, r2, #16
 8001612:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7f1b      	ldrb	r3, [r3, #28]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e007      	b.n	800163e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0208 	bic.w	r2, r2, #8
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7f5b      	ldrb	r3, [r3, #29]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0204 	orr.w	r2, r2, #4
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e007      	b.n	8001668 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0204 	bic.w	r2, r2, #4
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	ea42 0103 	orr.w	r1, r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff29 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff3e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff31 	bl	800170c <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff fdde 	bl	8001498 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d008      	beq.n	80018fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2280      	movs	r2, #128	@ 0x80
 80018ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e052      	b.n	80019a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0216 	bic.w	r2, r2, #22
 800190a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800191a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <HAL_DMA_Abort+0x62>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0208 	bic.w	r2, r2, #8
 800193a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194c:	e013      	b.n	8001976 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194e:	f7ff fda3 	bl	8001498 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b05      	cmp	r3, #5
 800195a:	d90c      	bls.n	8001976 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e015      	b.n	80019a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e4      	bne.n	800194e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	223f      	movs	r2, #63	@ 0x3f
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d004      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e00c      	b.n	80019e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2205      	movs	r2, #5
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e165      	b.n	8001cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8154 	bne.w	8001cd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d005      	beq.n	8001a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d017      	beq.n	8001ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d123      	bne.n	8001b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80ae 	beq.w	8001cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b92:	4a58      	ldr	r2, [pc, #352]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf8 <HAL_GPIO_Init+0x308>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x21a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cfc <HAL_GPIO_Init+0x30c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x216>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d00 <HAL_GPIO_Init+0x310>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x212>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d04 <HAL_GPIO_Init+0x314>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d08 <HAL_GPIO_Init+0x318>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x20a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <HAL_GPIO_Init+0x31c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a49      	ldr	r2, [pc, #292]	@ (8001d10 <HAL_GPIO_Init+0x320>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x202>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a31      	ldr	r2, [pc, #196]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ccc:	4a11      	ldr	r2, [pc, #68]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	f67f ae96 	bls.w	8001a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40021400 	.word	0x40021400
 8001d10:	40021800 	.word	0x40021800
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12b      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe ff78 	bl	8000c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	@ 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db0:	f001 f8b8 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8001db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a81      	ldr	r2, [pc, #516]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d807      	bhi.n	8001dd0 <HAL_I2C_Init+0x84>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a80      	ldr	r2, [pc, #512]	@ (8001fc4 <HAL_I2C_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x92>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fc8 <HAL_I2C_Init+0x27c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a78      	ldr	r2, [pc, #480]	@ (8001fcc <HAL_I2C_Init+0x280>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d802      	bhi.n	8001e20 <HAL_I2C_Init+0xd4>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e009      	b.n	8001e34 <HAL_I2C_Init+0xe8>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a69      	ldr	r2, [pc, #420]	@ (8001fd0 <HAL_I2C_Init+0x284>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	495c      	ldr	r1, [pc, #368]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d819      	bhi.n	8001e88 <HAL_I2C_Init+0x13c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e59      	subs	r1, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e68:	400b      	ands	r3, r1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_Init+0x138>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e59      	subs	r1, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	e051      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e04f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_I2C_Init+0x168>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Init+0x18e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	0099      	lsls	r1, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x196>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e022      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_I2C_Init+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e58      	subs	r0, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	0099      	lsls	r1, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6911      	ldr	r1, [r2, #16]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	000186a0 	.word	0x000186a0
 8001fc4:	001e847f 	.word	0x001e847f
 8001fc8:	003d08ff 	.word	0x003d08ff
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	817b      	strh	r3, [r7, #10]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff fa56 	bl	8001498 <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	f040 80e0 	bne.w	80021bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2319      	movs	r3, #25
 8002002:	2201      	movs	r2, #1
 8002004:	4970      	ldr	r1, [pc, #448]	@ (80021c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fc64 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	e0d3      	b.n	80021be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_I2C_Master_Transmit+0x50>
 8002020:	2302      	movs	r3, #2
 8002022:	e0cc      	b.n	80021be <HAL_I2C_Master_Transmit+0x1ea>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d007      	beq.n	800204a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002058:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2221      	movs	r2, #33	@ 0x21
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2210      	movs	r2, #16
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	893a      	ldrh	r2, [r7, #8]
 800207a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4a50      	ldr	r2, [pc, #320]	@ (80021cc <HAL_I2C_Master_Transmit+0x1f8>)
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800208c:	8979      	ldrh	r1, [r7, #10]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	6a3a      	ldr	r2, [r7, #32]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 face 	bl	8002634 <I2C_MasterRequestWrite>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e08d      	b.n	80021be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020b8:	e066      	b.n	8002188 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	6a39      	ldr	r1, [r7, #32]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fd22 	bl	8002b08 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d107      	bne.n	80020e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e06b      	b.n	80021be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b04      	cmp	r3, #4
 8002122:	d11b      	bne.n	800215c <HAL_I2C_Master_Transmit+0x188>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d017      	beq.n	800215c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6a39      	ldr	r1, [r7, #32]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fd19 	bl	8002b98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2b04      	cmp	r3, #4
 8002172:	d107      	bne.n	8002184 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002182:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e01a      	b.n	80021be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d194      	bne.n	80020ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800219e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	00100002 	.word	0x00100002
 80021cc:	ffff0000 	.word	0xffff0000

080021d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	@ 0x30
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	461a      	mov	r2, r3
 80021dc:	460b      	mov	r3, r1
 80021de:	817b      	strh	r3, [r7, #10]
 80021e0:	4613      	mov	r3, r2
 80021e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff f958 	bl	8001498 <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	f040 8217 	bne.w	8002626 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2319      	movs	r3, #25
 80021fe:	2201      	movs	r2, #1
 8002200:	497c      	ldr	r1, [pc, #496]	@ (80023f4 <HAL_I2C_Master_Receive+0x224>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb66 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800220e:	2302      	movs	r3, #2
 8002210:	e20a      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_I2C_Master_Receive+0x50>
 800221c:	2302      	movs	r3, #2
 800221e:	e203      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d007      	beq.n	8002246 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002254:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2222      	movs	r2, #34	@ 0x22
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2210      	movs	r2, #16
 8002262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	893a      	ldrh	r2, [r7, #8]
 8002276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a5c      	ldr	r2, [pc, #368]	@ (80023f8 <HAL_I2C_Master_Receive+0x228>)
 8002286:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002288:	8979      	ldrh	r1, [r7, #10]
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa52 	bl	8002738 <I2C_MasterRequestRead>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1c4      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e198      	b.n	8002600 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d11b      	bne.n	800230e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e178      	b.n	8002600 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002312:	2b02      	cmp	r3, #2
 8002314:	d11b      	bne.n	800234e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002324:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	e158      	b.n	8002600 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800235c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002374:	e144      	b.n	8002600 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237a:	2b03      	cmp	r3, #3
 800237c:	f200 80f1 	bhi.w	8002562 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002384:	2b01      	cmp	r3, #1
 8002386:	d123      	bne.n	80023d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800238a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fc4b 	bl	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e145      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023ce:	e117      	b.n	8002600 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d14e      	bne.n	8002476 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	2200      	movs	r2, #0
 80023e0:	4906      	ldr	r1, [pc, #24]	@ (80023fc <HAL_I2C_Master_Receive+0x22c>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fa76 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e11a      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
 80023f2:	bf00      	nop
 80023f4:	00100002 	.word	0x00100002
 80023f8:	ffff0000 	.word	0xffff0000
 80023fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002474:	e0c4      	b.n	8002600 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	2200      	movs	r2, #0
 800247e:	496c      	ldr	r1, [pc, #432]	@ (8002630 <HAL_I2C_Master_Receive+0x460>)
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fa27 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0cb      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800249e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	2200      	movs	r2, #0
 80024da:	4955      	ldr	r1, [pc, #340]	@ (8002630 <HAL_I2C_Master_Receive+0x460>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f9f9 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e09d      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002560:	e04e      	b.n	8002600 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002564:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fb5e 	bl	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e058      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d124      	bne.n	8002600 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f aeb6 	bne.w	8002376 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3728      	adds	r7, #40	@ 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	00010004 	.word	0x00010004

08002634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	460b      	mov	r3, r1
 8002642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d006      	beq.n	800265e <I2C_MasterRequestWrite+0x2a>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d003      	beq.n	800265e <I2C_MasterRequestWrite+0x2a>
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800265c:	d108      	bne.n	8002670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e00b      	b.n	8002688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	2b12      	cmp	r3, #18
 8002676:	d107      	bne.n	8002688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f91d 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00d      	beq.n	80026bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ae:	d103      	bne.n	80026b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e035      	b.n	8002728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026c4:	d108      	bne.n	80026d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026d4:	611a      	str	r2, [r3, #16]
 80026d6:	e01b      	b.n	8002710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	11db      	asrs	r3, r3, #7
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0306 	and.w	r3, r3, #6
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f063 030f 	orn	r3, r3, #15
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	490e      	ldr	r1, [pc, #56]	@ (8002730 <I2C_MasterRequestWrite+0xfc>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f966 	bl	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e010      	b.n	8002728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4907      	ldr	r1, [pc, #28]	@ (8002734 <I2C_MasterRequestWrite+0x100>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f956 	bl	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	00010008 	.word	0x00010008
 8002734:	00010002 	.word	0x00010002

08002738 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	460b      	mov	r3, r1
 8002746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800275c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d006      	beq.n	8002772 <I2C_MasterRequestRead+0x3a>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d003      	beq.n	8002772 <I2C_MasterRequestRead+0x3a>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002770:	d108      	bne.n	8002784 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e00b      	b.n	800279c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	2b11      	cmp	r3, #17
 800278a:	d107      	bne.n	800279c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800279a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f893 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c2:	d103      	bne.n	80027cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e079      	b.n	80028c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027d8:	d108      	bne.n	80027ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e05f      	b.n	80028ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027ec:	897b      	ldrh	r3, [r7, #10]
 80027ee:	11db      	asrs	r3, r3, #7
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 0306 	and.w	r3, r3, #6
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f063 030f 	orn	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4930      	ldr	r1, [pc, #192]	@ (80028cc <I2C_MasterRequestRead+0x194>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f8dc 	bl	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e054      	b.n	80028c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800281a:	897b      	ldrh	r3, [r7, #10]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4929      	ldr	r1, [pc, #164]	@ (80028d0 <I2C_MasterRequestRead+0x198>)
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f8cc 	bl	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e044      	b.n	80028c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800285e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f831 	bl	80028d4 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002886:	d103      	bne.n	8002890 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e017      	b.n	80028c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002894:	897b      	ldrh	r3, [r7, #10]
 8002896:	11db      	asrs	r3, r3, #7
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0306 	and.w	r3, r3, #6
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f063 030e 	orn	r3, r3, #14
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4907      	ldr	r1, [pc, #28]	@ (80028d0 <I2C_MasterRequestRead+0x198>)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f888 	bl	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	00010008 	.word	0x00010008
 80028d0:	00010002 	.word	0x00010002

080028d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e4:	e048      	b.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028ec:	d044      	beq.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7fe fdd3 	bl	8001498 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d139      	bne.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10d      	bne.n	800292a <I2C_WaitOnFlagUntilTimeout+0x56>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	43da      	mvns	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4013      	ands	r3, r2
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	e00c      	b.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x70>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	43da      	mvns	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	429a      	cmp	r2, r3
 8002948:	d116      	bne.n	8002978 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e023      	b.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d10d      	bne.n	800299e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	43da      	mvns	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	e00c      	b.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d093      	beq.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d6:	e071      	b.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e6:	d123      	bne.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	f043 0204 	orr.w	r2, r3, #4
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e067      	b.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a36:	d041      	beq.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7fe fd2e 	bl	8001498 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d136      	bne.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10c      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e00b      	b.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e021      	b.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	0c1b      	lsrs	r3, r3, #16
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10c      	bne.n	8002ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e00b      	b.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4013      	ands	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f af6d 	bne.w	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b14:	e034      	b.n	8002b80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f8e3 	bl	8002ce2 <I2C_IsAcknowledgeFailed>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e034      	b.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b2c:	d028      	beq.n	8002b80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7fe fcb3 	bl	8001498 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11d      	bne.n	8002b80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4e:	2b80      	cmp	r3, #128	@ 0x80
 8002b50:	d016      	beq.n	8002b80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e007      	b.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	2b80      	cmp	r3, #128	@ 0x80
 8002b8c:	d1c3      	bne.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba4:	e034      	b.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f89b 	bl	8002ce2 <I2C_IsAcknowledgeFailed>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e034      	b.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bbc:	d028      	beq.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fc6b 	bl	8001498 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11d      	bne.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d016      	beq.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e007      	b.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d1c3      	bne.n	8002ba6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c34:	e049      	b.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d119      	bne.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0210 	mvn.w	r2, #16
 8002c4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e030      	b.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c78:	f7fe fc0e 	bl	8001498 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11d      	bne.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c98:	2b40      	cmp	r3, #64	@ 0x40
 8002c9a:	d016      	beq.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e007      	b.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd4:	2b40      	cmp	r3, #64	@ 0x40
 8002cd6:	d1ae      	bne.n	8002c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf8:	d11b      	bne.n	8002d32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f043 0204 	orr.w	r2, r3, #4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0cc      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b68      	ldr	r3, [pc, #416]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d90c      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b65      	ldr	r3, [pc, #404]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b63      	ldr	r3, [pc, #396]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0b8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a58      	ldr	r2, [pc, #352]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dac:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a52      	ldr	r2, [pc, #328]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b50      	ldr	r3, [pc, #320]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	494d      	ldr	r1, [pc, #308]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d044      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d119      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e067      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1e:	4b37      	ldr	r3, [pc, #220]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4934      	ldr	r1, [pc, #208]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e30:	f7fe fb32 	bl	8001498 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7fe fb2e 	bl	8001498 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e04f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 020c 	and.w	r2, r3, #12
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d20c      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e032      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4916      	ldr	r1, [pc, #88]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb2:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	490e      	ldr	r1, [pc, #56]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec6:	f000 f855 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490a      	ldr	r1, [pc, #40]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a09      	ldr	r2, [pc, #36]	@ (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fa92 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023c00 	.word	0x40023c00
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08005f08 	.word	0x08005f08
 8002f04:	20000000 	.word	0x20000000
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f10:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f28:	f7ff fff0 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0a9b      	lsrs	r3, r3, #10
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	@ (8002f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08005f18 	.word	0x08005f18

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f50:	f7ff ffdc 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0b5b      	lsrs	r3, r3, #13
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	@ (8002f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	08005f18 	.word	0x08005f18

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b0ae      	sub	sp, #184	@ 0xb8
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9a:	4bcb      	ldr	r3, [pc, #812]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	f200 8206 	bhi.w	80033b4 <HAL_RCC_GetSysClockFreq+0x440>
 8002fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	080033b5 	.word	0x080033b5
 8002fb8:	080033b5 	.word	0x080033b5
 8002fbc:	080033b5 	.word	0x080033b5
 8002fc0:	08002fed 	.word	0x08002fed
 8002fc4:	080033b5 	.word	0x080033b5
 8002fc8:	080033b5 	.word	0x080033b5
 8002fcc:	080033b5 	.word	0x080033b5
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	080033b5 	.word	0x080033b5
 8002fd8:	080033b5 	.word	0x080033b5
 8002fdc:	080033b5 	.word	0x080033b5
 8002fe0:	080031e5 	.word	0x080031e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4bb9      	ldr	r3, [pc, #740]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fea:	e1e7      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fec:	4bb8      	ldr	r3, [pc, #736]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ff2:	e1e3      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff4:	4bb4      	ldr	r3, [pc, #720]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003000:	4bb1      	ldr	r3, [pc, #708]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d071      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300c:	4bae      	ldr	r3, [pc, #696]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003018:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800301c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800302e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003032:	4622      	mov	r2, r4
 8003034:	462b      	mov	r3, r5
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	0159      	lsls	r1, r3, #5
 8003040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003044:	0150      	lsls	r0, r2, #5
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4621      	mov	r1, r4
 800304c:	1a51      	subs	r1, r2, r1
 800304e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003050:	4629      	mov	r1, r5
 8003052:	eb63 0301 	sbc.w	r3, r3, r1
 8003056:	647b      	str	r3, [r7, #68]	@ 0x44
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003064:	4649      	mov	r1, r9
 8003066:	018b      	lsls	r3, r1, #6
 8003068:	4641      	mov	r1, r8
 800306a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800306e:	4641      	mov	r1, r8
 8003070:	018a      	lsls	r2, r1, #6
 8003072:	4641      	mov	r1, r8
 8003074:	1a51      	subs	r1, r2, r1
 8003076:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003078:	4649      	mov	r1, r9
 800307a:	eb63 0301 	sbc.w	r3, r3, r1
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800308c:	4649      	mov	r1, r9
 800308e:	00cb      	lsls	r3, r1, #3
 8003090:	4641      	mov	r1, r8
 8003092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003096:	4641      	mov	r1, r8
 8003098:	00ca      	lsls	r2, r1, #3
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	4622      	mov	r2, r4
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a6:	462b      	mov	r3, r5
 80030a8:	460a      	mov	r2, r1
 80030aa:	eb42 0303 	adc.w	r3, r2, r3
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030bc:	4629      	mov	r1, r5
 80030be:	024b      	lsls	r3, r1, #9
 80030c0:	4621      	mov	r1, r4
 80030c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c6:	4621      	mov	r1, r4
 80030c8:	024a      	lsls	r2, r1, #9
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80030e0:	f7fd f8f6 	bl	80002d0 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4613      	mov	r3, r2
 80030ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030ee:	e067      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f0:	4b75      	ldr	r3, [pc, #468]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800310a:	2300      	movs	r3, #0
 800310c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800310e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003112:	4622      	mov	r2, r4
 8003114:	462b      	mov	r3, r5
 8003116:	f04f 0000 	mov.w	r0, #0
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	0159      	lsls	r1, r3, #5
 8003120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003124:	0150      	lsls	r0, r2, #5
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4621      	mov	r1, r4
 800312c:	1a51      	subs	r1, r2, r1
 800312e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003130:	4629      	mov	r1, r5
 8003132:	eb63 0301 	sbc.w	r3, r3, r1
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003144:	4649      	mov	r1, r9
 8003146:	018b      	lsls	r3, r1, #6
 8003148:	4641      	mov	r1, r8
 800314a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800314e:	4641      	mov	r1, r8
 8003150:	018a      	lsls	r2, r1, #6
 8003152:	4641      	mov	r1, r8
 8003154:	ebb2 0a01 	subs.w	sl, r2, r1
 8003158:	4649      	mov	r1, r9
 800315a:	eb63 0b01 	sbc.w	fp, r3, r1
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800316a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800316e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003172:	4692      	mov	sl, r2
 8003174:	469b      	mov	fp, r3
 8003176:	4623      	mov	r3, r4
 8003178:	eb1a 0303 	adds.w	r3, sl, r3
 800317c:	623b      	str	r3, [r7, #32]
 800317e:	462b      	mov	r3, r5
 8003180:	eb4b 0303 	adc.w	r3, fp, r3
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003192:	4629      	mov	r1, r5
 8003194:	028b      	lsls	r3, r1, #10
 8003196:	4621      	mov	r1, r4
 8003198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800319c:	4621      	mov	r1, r4
 800319e:	028a      	lsls	r2, r1, #10
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031a8:	2200      	movs	r2, #0
 80031aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80031ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80031ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80031b2:	f7fd f88d 	bl	80002d0 <__aeabi_uldivmod>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4613      	mov	r3, r2
 80031bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031c0:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	3301      	adds	r3, #1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80031d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031e2:	e0eb      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e4:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031f0:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d06b      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fc:	4b32      	ldr	r3, [pc, #200]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	2200      	movs	r2, #0
 8003204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003206:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800320a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003210:	2300      	movs	r3, #0
 8003212:	667b      	str	r3, [r7, #100]	@ 0x64
 8003214:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003218:	4622      	mov	r2, r4
 800321a:	462b      	mov	r3, r5
 800321c:	f04f 0000 	mov.w	r0, #0
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	0159      	lsls	r1, r3, #5
 8003226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322a:	0150      	lsls	r0, r2, #5
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4621      	mov	r1, r4
 8003232:	1a51      	subs	r1, r2, r1
 8003234:	61b9      	str	r1, [r7, #24]
 8003236:	4629      	mov	r1, r5
 8003238:	eb63 0301 	sbc.w	r3, r3, r1
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800324a:	4659      	mov	r1, fp
 800324c:	018b      	lsls	r3, r1, #6
 800324e:	4651      	mov	r1, sl
 8003250:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003254:	4651      	mov	r1, sl
 8003256:	018a      	lsls	r2, r1, #6
 8003258:	4651      	mov	r1, sl
 800325a:	ebb2 0801 	subs.w	r8, r2, r1
 800325e:	4659      	mov	r1, fp
 8003260:	eb63 0901 	sbc.w	r9, r3, r1
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003270:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003274:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003278:	4690      	mov	r8, r2
 800327a:	4699      	mov	r9, r3
 800327c:	4623      	mov	r3, r4
 800327e:	eb18 0303 	adds.w	r3, r8, r3
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	462b      	mov	r3, r5
 8003286:	eb49 0303 	adc.w	r3, r9, r3
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003298:	4629      	mov	r1, r5
 800329a:	024b      	lsls	r3, r1, #9
 800329c:	4621      	mov	r1, r4
 800329e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032a2:	4621      	mov	r1, r4
 80032a4:	024a      	lsls	r2, r1, #9
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032ae:	2200      	movs	r2, #0
 80032b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032b8:	f7fd f80a 	bl	80002d0 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032c6:	e065      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x420>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d4:	4b3d      	ldr	r3, [pc, #244]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x458>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	2200      	movs	r2, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	4611      	mov	r1, r2
 80032e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e6:	2300      	movs	r3, #0
 80032e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80032ee:	4642      	mov	r2, r8
 80032f0:	464b      	mov	r3, r9
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	0159      	lsls	r1, r3, #5
 80032fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003300:	0150      	lsls	r0, r2, #5
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4641      	mov	r1, r8
 8003308:	1a51      	subs	r1, r2, r1
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	4649      	mov	r1, r9
 800330e:	eb63 0301 	sbc.w	r3, r3, r1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003320:	4659      	mov	r1, fp
 8003322:	018b      	lsls	r3, r1, #6
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800332a:	4651      	mov	r1, sl
 800332c:	018a      	lsls	r2, r1, #6
 800332e:	4651      	mov	r1, sl
 8003330:	1a54      	subs	r4, r2, r1
 8003332:	4659      	mov	r1, fp
 8003334:	eb63 0501 	sbc.w	r5, r3, r1
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	00eb      	lsls	r3, r5, #3
 8003342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003346:	00e2      	lsls	r2, r4, #3
 8003348:	4614      	mov	r4, r2
 800334a:	461d      	mov	r5, r3
 800334c:	4643      	mov	r3, r8
 800334e:	18e3      	adds	r3, r4, r3
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	464b      	mov	r3, r9
 8003354:	eb45 0303 	adc.w	r3, r5, r3
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003366:	4629      	mov	r1, r5
 8003368:	028b      	lsls	r3, r1, #10
 800336a:	4621      	mov	r1, r4
 800336c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003370:	4621      	mov	r1, r4
 8003372:	028a      	lsls	r2, r1, #10
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800337c:	2200      	movs	r2, #0
 800337e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003380:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003382:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003386:	f7fc ffa3 	bl	80002d0 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4613      	mov	r3, r2
 8003390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003394:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	0f1b      	lsrs	r3, r3, #28
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80033a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033b2:	e003      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80033b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	37b8      	adds	r7, #184	@ 0xb8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	00f42400 	.word	0x00f42400

080033d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e28d      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8083 	beq.w	80034fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033f4:	4b94      	ldr	r3, [pc, #592]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d019      	beq.n	8003434 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003400:	4b91      	ldr	r3, [pc, #580]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
        || \
 8003408:	2b08      	cmp	r3, #8
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800340c:	4b8e      	ldr	r3, [pc, #568]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003418:	d00c      	beq.n	8003434 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b8b      	ldr	r3, [pc, #556]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d112      	bne.n	800344c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003426:	4b88      	ldr	r3, [pc, #544]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003432:	d10b      	bne.n	800344c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	4b84      	ldr	r3, [pc, #528]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x124>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d157      	bne.n	80034f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e25a      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003454:	d106      	bne.n	8003464 <HAL_RCC_OscConfig+0x90>
 8003456:	4b7c      	ldr	r3, [pc, #496]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7b      	ldr	r2, [pc, #492]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e01d      	b.n	80034a0 <HAL_RCC_OscConfig+0xcc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0xb4>
 800346e:	4b76      	ldr	r3, [pc, #472]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a75      	ldr	r2, [pc, #468]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b73      	ldr	r3, [pc, #460]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a72      	ldr	r2, [pc, #456]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0xcc>
 8003488:	4b6f      	ldr	r3, [pc, #444]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6e      	ldr	r2, [pc, #440]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800348e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b6c      	ldr	r3, [pc, #432]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6b      	ldr	r2, [pc, #428]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800349a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800349e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fd fff6 	bl	8001498 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fd fff2 	bl	8001498 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	@ 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e21f      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b61      	ldr	r3, [pc, #388]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0xdc>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd ffe2 	bl	8001498 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fd ffde 	bl	8001498 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	@ 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e20b      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	4b57      	ldr	r3, [pc, #348]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x104>
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06f      	beq.n	80035e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003506:	4b50      	ldr	r3, [pc, #320]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003512:	4b4d      	ldr	r3, [pc, #308]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
        || \
 800351a:	2b08      	cmp	r3, #8
 800351c:	d105      	bne.n	800352a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800351e:	4b4a      	ldr	r3, [pc, #296]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352a:	4b47      	ldr	r3, [pc, #284]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d11c      	bne.n	8003570 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003536:	4b44      	ldr	r3, [pc, #272]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d116      	bne.n	8003570 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	4b41      	ldr	r3, [pc, #260]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_RCC_OscConfig+0x186>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e1d3      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355a:	4b3b      	ldr	r3, [pc, #236]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4937      	ldr	r1, [pc, #220]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	e03a      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003578:	4b34      	ldr	r3, [pc, #208]	@ (800364c <HAL_RCC_OscConfig+0x278>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fd ff8b 	bl	8001498 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003586:	f7fd ff87 	bl	8001498 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1b4      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	4b2b      	ldr	r3, [pc, #172]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b28      	ldr	r3, [pc, #160]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4925      	ldr	r1, [pc, #148]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]
 80035b8:	e015      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ba:	4b24      	ldr	r3, [pc, #144]	@ (800364c <HAL_RCC_OscConfig+0x278>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd ff6a 	bl	8001498 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c8:	f7fd ff66 	bl	8001498 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e193      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d036      	beq.n	8003660 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fa:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd ff4a 	bl	8001498 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003608:	f7fd ff46 	bl	8001498 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e173      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <HAL_RCC_OscConfig+0x274>)
 800361c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x234>
 8003626:	e01b      	b.n	8003660 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_RCC_OscConfig+0x27c>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fd ff33 	bl	8001498 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	e00e      	b.n	8003654 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003636:	f7fd ff2f 	bl	8001498 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d907      	bls.n	8003654 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e15c      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
 8003648:	40023800 	.word	0x40023800
 800364c:	42470000 	.word	0x42470000
 8003650:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	4b8a      	ldr	r3, [pc, #552]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ea      	bne.n	8003636 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8097 	beq.w	800379c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b83      	ldr	r3, [pc, #524]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	4b7f      	ldr	r3, [pc, #508]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	4a7e      	ldr	r2, [pc, #504]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	@ 0x40
 800368e:	4b7c      	ldr	r3, [pc, #496]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b79      	ldr	r3, [pc, #484]	@ (8003884 <HAL_RCC_OscConfig+0x4b0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036aa:	4b76      	ldr	r3, [pc, #472]	@ (8003884 <HAL_RCC_OscConfig+0x4b0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x4b0>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b6:	f7fd feef 	bl	8001498 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7fd feeb 	bl	8001498 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e118      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003884 <HAL_RCC_OscConfig+0x4b0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x31e>
 80036e4:	4b66      	ldr	r3, [pc, #408]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e8:	4a65      	ldr	r2, [pc, #404]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f0:	e01c      	b.n	800372c <HAL_RCC_OscConfig+0x358>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b05      	cmp	r3, #5
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x340>
 80036fa:	4b61      	ldr	r3, [pc, #388]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fe:	4a60      	ldr	r2, [pc, #384]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6713      	str	r3, [r2, #112]	@ 0x70
 8003706:	4b5e      	ldr	r3, [pc, #376]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	4a5d      	ldr	r2, [pc, #372]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6713      	str	r3, [r2, #112]	@ 0x70
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0x358>
 8003714:	4b5a      	ldr	r3, [pc, #360]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003718:	4a59      	ldr	r2, [pc, #356]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003720:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003724:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003726:	f023 0304 	bic.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fd feb0 	bl	8001498 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fd feac 	bl	8001498 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0d7      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003752:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0ee      	beq.n	800373c <HAL_RCC_OscConfig+0x368>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fd fe9a 	bl	8001498 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003766:	e00a      	b.n	800377e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7fd fe96 	bl	8001498 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0c1      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377e:	4b40      	ldr	r3, [pc, #256]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ee      	bne.n	8003768 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003790:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	4a3a      	ldr	r2, [pc, #232]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800379a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80ad 	beq.w	8003900 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a6:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d060      	beq.n	8003874 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d145      	bne.n	8003846 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b33      	ldr	r3, [pc, #204]	@ (8003888 <HAL_RCC_OscConfig+0x4b4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd fe6a 	bl	8001498 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fd fe66 	bl	8001498 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e093      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	3b01      	subs	r3, #1
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	071b      	lsls	r3, r3, #28
 8003812:	491b      	ldr	r1, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCC_OscConfig+0x4b4>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd fe3b 	bl	8001498 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fd fe37 	bl	8001498 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e064      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x452>
 8003844:	e05c      	b.n	8003900 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <HAL_RCC_OscConfig+0x4b4>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fd fe24 	bl	8001498 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fd fe20 	bl	8001498 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e04d      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_OscConfig+0x4ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x480>
 8003872:	e045      	b.n	8003900 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e040      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
 8003880:	40023800 	.word	0x40023800
 8003884:	40007000 	.word	0x40007000
 8003888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800388c:	4b1f      	ldr	r3, [pc, #124]	@ (800390c <HAL_RCC_OscConfig+0x538>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d030      	beq.n	80038fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d129      	bne.n	80038fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d122      	bne.n	80038fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d119      	bne.n	80038fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d10f      	bne.n	80038fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800

08003910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e042      	b.n	80039a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fc9a 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	@ 0x24
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fdff 	bl	8004558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d175      	bne.n	8003abc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Transmit+0x2c>
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e06e      	b.n	8003abe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2221      	movs	r2, #33	@ 0x21
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fd53 	bl	8001498 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a08:	d108      	bne.n	8003a1c <HAL_UART_Transmit+0x6c>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e003      	b.n	8003a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a24:	e02e      	b.n	8003a84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2180      	movs	r1, #128	@ 0x80
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fb9b 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e03a      	b.n	8003abe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	3302      	adds	r3, #2
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	e007      	b.n	8003a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	3301      	adds	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1cb      	bne.n	8003a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2140      	movs	r1, #64	@ 0x40
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fb67 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e006      	b.n	8003abe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b08a      	sub	sp, #40	@ 0x28
 8003aca:	af02      	add	r7, sp, #8
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	f040 8081 	bne.w	8003bea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_Receive+0x2e>
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e079      	b.n	8003bec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2222      	movs	r2, #34	@ 0x22
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fcc4 	bl	8001498 <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	88fa      	ldrh	r2, [r7, #6]
 8003b16:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b26:	d108      	bne.n	8003b3a <HAL_UART_Receive+0x74>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e003      	b.n	8003b42 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b42:	e047      	b.n	8003bd4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2120      	movs	r1, #32
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fb0c 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e042      	b.n	8003bec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10c      	bne.n	8003b86 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	3302      	adds	r3, #2
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	e01f      	b.n	8003bc6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b8e:	d007      	beq.n	8003ba0 <HAL_UART_Receive+0xda>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <HAL_UART_Receive+0xe8>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e008      	b.n	8003bc0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1b2      	bne.n	8003b44 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b0ba      	sub	sp, #232	@ 0xe8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10f      	bne.n	8003c5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_UART_IRQHandler+0x66>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fbc2 	bl	80043dc <UART_Receive_IT>
      return;
 8003c58:	e25b      	b.n	8004112 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80de 	beq.w	8003e20 <HAL_UART_IRQHandler+0x22c>
 8003c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80d1 	beq.w	8003e20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xae>
 8003c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xd2>
 8003cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f043 0202 	orr.w	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_UART_IRQHandler+0xf6>
 8003cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d011      	beq.n	8003d1a <HAL_UART_IRQHandler+0x126>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	f043 0208 	orr.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 81f2 	beq.w	8004108 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_UART_IRQHandler+0x14e>
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fb4d 	bl	80043dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_UART_IRQHandler+0x17a>
 8003d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d04f      	beq.n	8003e0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fa55 	bl	800421e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d141      	bne.n	8003e06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3314      	adds	r3, #20
 8003d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1d9      	bne.n	8003d82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d013      	beq.n	8003dfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	4a7e      	ldr	r2, [pc, #504]	@ (8003fd4 <HAL_UART_IRQHandler+0x3e0>)
 8003ddc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fde1 	bl	80019aa <HAL_DMA_Abort_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	e00e      	b.n	8003e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f99e 	bl	8004140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e00a      	b.n	8003e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f99a 	bl	8004140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e006      	b.n	8003e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f996 	bl	8004140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e1a:	e175      	b.n	8004108 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	bf00      	nop
    return;
 8003e1e:	e173      	b.n	8004108 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 814f 	bne.w	80040c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8148 	beq.w	80040c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8141 	beq.w	80040c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e66:	2b40      	cmp	r3, #64	@ 0x40
 8003e68:	f040 80b6 	bne.w	8003fd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8145 	beq.w	800410c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	f080 813e 	bcs.w	800410c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea2:	f000 8088 	beq.w	8003fb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1d9      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e1      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e3      	bne.n	8003f74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fd fc8a 	bl	80018ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8c1 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fd2:	e09b      	b.n	800410c <HAL_UART_IRQHandler+0x518>
 8003fd4:	080042e5 	.word	0x080042e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 808e 	beq.w	8004110 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8089 	beq.w	8004110 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800400e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004014:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004022:	647a      	str	r2, [r7, #68]	@ 0x44
 8004024:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e3      	bne.n	8003ffe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	623b      	str	r3, [r7, #32]
   return(result);
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3314      	adds	r3, #20
 8004056:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800405a:	633a      	str	r2, [r7, #48]	@ 0x30
 800405c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e3      	bne.n	8004036 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	60fb      	str	r3, [r7, #12]
   return(result);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040a0:	61fa      	str	r2, [r7, #28]
 80040a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	617b      	str	r3, [r7, #20]
   return(result);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e3      	bne.n	800407c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f847 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040c6:	e023      	b.n	8004110 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <HAL_UART_IRQHandler+0x4f4>
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f913 	bl	800430c <UART_Transmit_IT>
    return;
 80040e6:	e014      	b.n	8004112 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <HAL_UART_IRQHandler+0x51e>
 80040f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f953 	bl	80043ac <UART_EndTransmit_IT>
    return;
 8004106:	e004      	b.n	8004112 <HAL_UART_IRQHandler+0x51e>
    return;
 8004108:	bf00      	nop
 800410a:	e002      	b.n	8004112 <HAL_UART_IRQHandler+0x51e>
      return;
 800410c:	bf00      	nop
 800410e:	e000      	b.n	8004112 <HAL_UART_IRQHandler+0x51e>
      return;
 8004110:	bf00      	nop
  }
}
 8004112:	37e8      	adds	r7, #232	@ 0xe8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	e03b      	b.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004184:	d037      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fd f987 	bl	8001498 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	6a3a      	ldr	r2, [r7, #32]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <UART_WaitOnFlagUntilTimeout+0x30>
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e03a      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d023      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b80      	cmp	r3, #128	@ 0x80
 80041b2:	d020      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b40      	cmp	r3, #64	@ 0x40
 80041b8:	d01d      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d116      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f81d 	bl	800421e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2208      	movs	r2, #8
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e00f      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4013      	ands	r3, r2
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	429a      	cmp	r2, r3
 8004212:	d0b4      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800421e:	b480      	push	{r7}
 8004220:	b095      	sub	sp, #84	@ 0x54
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800423c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004246:	643a      	str	r2, [r7, #64]	@ 0x40
 8004248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800424c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	61fb      	str	r3, [r7, #28]
   return(result);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800427a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	2b01      	cmp	r3, #1
 8004294:	d119      	bne.n	80042ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 0310 	bic.w	r3, r3, #16
 80042ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b6:	61ba      	str	r2, [r7, #24]
 80042b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6979      	ldr	r1, [r7, #20]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	613b      	str	r3, [r7, #16]
   return(result);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e5      	bne.n	8004296 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042d8:	bf00      	nop
 80042da:	3754      	adds	r7, #84	@ 0x54
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff ff1e 	bl	8004140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b21      	cmp	r3, #33	@ 0x21
 800431e:	d13e      	bne.n	800439e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004328:	d114      	bne.n	8004354 <UART_Transmit_IT+0x48>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d110      	bne.n	8004354 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004346:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]
 8004352:	e008      	b.n	8004366 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	1c59      	adds	r1, r3, #1
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6211      	str	r1, [r2, #32]
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4619      	mov	r1, r3
 8004374:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10f      	bne.n	800439a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004388:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004398:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff fea3 	bl	8004118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08c      	sub	sp, #48	@ 0x30
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b22      	cmp	r3, #34	@ 0x22
 80043ee:	f040 80ae 	bne.w	800454e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fa:	d117      	bne.n	800442c <UART_Receive_IT+0x50>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d113      	bne.n	800442c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	b29a      	uxth	r2, r3
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	1c9a      	adds	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	629a      	str	r2, [r3, #40]	@ 0x28
 800442a:	e026      	b.n	800447a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443e:	d007      	beq.n	8004450 <UART_Receive_IT+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <UART_Receive_IT+0x82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	b2da      	uxtb	r2, r3
 8004458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e008      	b.n	8004470 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800446a:	b2da      	uxtb	r2, r3
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29b      	uxth	r3, r3
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4619      	mov	r1, r3
 8004488:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800448a:	2b00      	cmp	r3, #0
 800448c:	d15d      	bne.n	800454a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0220 	bic.w	r2, r2, #32
 800449c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d135      	bne.n	8004540 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f023 0310 	bic.w	r3, r3, #16
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fa:	623a      	str	r2, [r7, #32]
 80044fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	69f9      	ldr	r1, [r7, #28]
 8004500:	6a3a      	ldr	r2, [r7, #32]
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	61bb      	str	r3, [r7, #24]
   return(result);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b10      	cmp	r3, #16
 800451a:	d10a      	bne.n	8004532 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fe0b 	bl	8004154 <HAL_UARTEx_RxEventCallback>
 800453e:	e002      	b.n	8004546 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fdf3 	bl	800412c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e002      	b.n	8004550 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3730      	adds	r7, #48	@ 0x30
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800455c:	b0c0      	sub	sp, #256	@ 0x100
 800455e:	af00      	add	r7, sp, #0
 8004560:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	68d9      	ldr	r1, [r3, #12]
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	ea40 0301 	orr.w	r3, r0, r1
 8004580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	431a      	orrs	r2, r3
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045b0:	f021 010c 	bic.w	r1, r1, #12
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045be:	430b      	orrs	r3, r1
 80045c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	6999      	ldr	r1, [r3, #24]
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	ea40 0301 	orr.w	r3, r0, r1
 80045de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004824 <UART_SetConfig+0x2cc>)
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d005      	beq.n	80045f8 <UART_SetConfig+0xa0>
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004828 <UART_SetConfig+0x2d0>)
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d104      	bne.n	8004602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f8:	f7fe fca8 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 80045fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004600:	e003      	b.n	800460a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004602:	f7fe fc8f 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8004606:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004614:	f040 810c 	bne.w	8004830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004622:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
 800462e:	1891      	adds	r1, r2, r2
 8004630:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004632:	415b      	adcs	r3, r3
 8004634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800463a:	4621      	mov	r1, r4
 800463c:	eb12 0801 	adds.w	r8, r2, r1
 8004640:	4629      	mov	r1, r5
 8004642:	eb43 0901 	adc.w	r9, r3, r1
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465a:	4690      	mov	r8, r2
 800465c:	4699      	mov	r9, r3
 800465e:	4623      	mov	r3, r4
 8004660:	eb18 0303 	adds.w	r3, r8, r3
 8004664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004668:	462b      	mov	r3, r5
 800466a:	eb49 0303 	adc.w	r3, r9, r3
 800466e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800467e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004686:	460b      	mov	r3, r1
 8004688:	18db      	adds	r3, r3, r3
 800468a:	653b      	str	r3, [r7, #80]	@ 0x50
 800468c:	4613      	mov	r3, r2
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	657b      	str	r3, [r7, #84]	@ 0x54
 8004694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800469c:	f7fb fe18 	bl	80002d0 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4b61      	ldr	r3, [pc, #388]	@ (800482c <UART_SetConfig+0x2d4>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	011c      	lsls	r4, r3, #4
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046c8:	415b      	adcs	r3, r3
 80046ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046d0:	4641      	mov	r1, r8
 80046d2:	eb12 0a01 	adds.w	sl, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb43 0b01 	adc.w	fp, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f0:	4692      	mov	sl, r2
 80046f2:	469b      	mov	fp, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	eb1a 0303 	adds.w	r3, sl, r3
 80046fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046fe:	464b      	mov	r3, r9
 8004700:	eb4b 0303 	adc.w	r3, fp, r3
 8004704:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004714:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800471c:	460b      	mov	r3, r1
 800471e:	18db      	adds	r3, r3, r3
 8004720:	643b      	str	r3, [r7, #64]	@ 0x40
 8004722:	4613      	mov	r3, r2
 8004724:	eb42 0303 	adc.w	r3, r2, r3
 8004728:	647b      	str	r3, [r7, #68]	@ 0x44
 800472a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800472e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004732:	f7fb fdcd 	bl	80002d0 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4611      	mov	r1, r2
 800473c:	4b3b      	ldr	r3, [pc, #236]	@ (800482c <UART_SetConfig+0x2d4>)
 800473e:	fba3 2301 	umull	r2, r3, r3, r1
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2264      	movs	r2, #100	@ 0x64
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	1acb      	subs	r3, r1, r3
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004752:	4b36      	ldr	r3, [pc, #216]	@ (800482c <UART_SetConfig+0x2d4>)
 8004754:	fba3 2302 	umull	r2, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004760:	441c      	add	r4, r3
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800476c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	1891      	adds	r1, r2, r2
 800477a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800477c:	415b      	adcs	r3, r3
 800477e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004784:	4641      	mov	r1, r8
 8004786:	1851      	adds	r1, r2, r1
 8004788:	6339      	str	r1, [r7, #48]	@ 0x30
 800478a:	4649      	mov	r1, r9
 800478c:	414b      	adcs	r3, r1
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800479c:	4659      	mov	r1, fp
 800479e:	00cb      	lsls	r3, r1, #3
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a6:	4651      	mov	r1, sl
 80047a8:	00ca      	lsls	r2, r1, #3
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	4642      	mov	r2, r8
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b8:	464b      	mov	r3, r9
 80047ba:	460a      	mov	r2, r1
 80047bc:	eb42 0303 	adc.w	r3, r2, r3
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047d8:	460b      	mov	r3, r1
 80047da:	18db      	adds	r3, r3, r3
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047de:	4613      	mov	r3, r2
 80047e0:	eb42 0303 	adc.w	r3, r2, r3
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047ee:	f7fb fd6f 	bl	80002d0 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <UART_SetConfig+0x2d4>)
 80047f8:	fba3 1302 	umull	r1, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	2164      	movs	r1, #100	@ 0x64
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	3332      	adds	r3, #50	@ 0x32
 800480a:	4a08      	ldr	r2, [pc, #32]	@ (800482c <UART_SetConfig+0x2d4>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	f003 0207 	and.w	r2, r3, #7
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4422      	add	r2, r4
 800481e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004820:	e106      	b.n	8004a30 <UART_SetConfig+0x4d8>
 8004822:	bf00      	nop
 8004824:	40011000 	.word	0x40011000
 8004828:	40011400 	.word	0x40011400
 800482c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800483a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800483e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004842:	4642      	mov	r2, r8
 8004844:	464b      	mov	r3, r9
 8004846:	1891      	adds	r1, r2, r2
 8004848:	6239      	str	r1, [r7, #32]
 800484a:	415b      	adcs	r3, r3
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
 800484e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004852:	4641      	mov	r1, r8
 8004854:	1854      	adds	r4, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0501 	adc.w	r5, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	00eb      	lsls	r3, r5, #3
 8004866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486a:	00e2      	lsls	r2, r4, #3
 800486c:	4614      	mov	r4, r2
 800486e:	461d      	mov	r5, r3
 8004870:	4643      	mov	r3, r8
 8004872:	18e3      	adds	r3, r4, r3
 8004874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004878:	464b      	mov	r3, r9
 800487a:	eb45 0303 	adc.w	r3, r5, r3
 800487e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800488e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800489e:	4629      	mov	r1, r5
 80048a0:	008b      	lsls	r3, r1, #2
 80048a2:	4621      	mov	r1, r4
 80048a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a8:	4621      	mov	r1, r4
 80048aa:	008a      	lsls	r2, r1, #2
 80048ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048b0:	f7fb fd0e 	bl	80002d0 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4b60      	ldr	r3, [pc, #384]	@ (8004a3c <UART_SetConfig+0x4e4>)
 80048ba:	fba3 2302 	umull	r2, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	011c      	lsls	r4, r3, #4
 80048c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	61b9      	str	r1, [r7, #24]
 80048dc:	415b      	adcs	r3, r3
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e4:	4641      	mov	r1, r8
 80048e6:	1851      	adds	r1, r2, r1
 80048e8:	6139      	str	r1, [r7, #16]
 80048ea:	4649      	mov	r1, r9
 80048ec:	414b      	adcs	r3, r1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048fc:	4659      	mov	r1, fp
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4651      	mov	r1, sl
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4651      	mov	r1, sl
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4642      	mov	r2, r8
 8004912:	189b      	adds	r3, r3, r2
 8004914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004918:	464b      	mov	r3, r9
 800491a:	460a      	mov	r2, r1
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800492e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800493c:	4649      	mov	r1, r9
 800493e:	008b      	lsls	r3, r1, #2
 8004940:	4641      	mov	r1, r8
 8004942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004946:	4641      	mov	r1, r8
 8004948:	008a      	lsls	r2, r1, #2
 800494a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800494e:	f7fb fcbf 	bl	80002d0 <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4611      	mov	r1, r2
 8004958:	4b38      	ldr	r3, [pc, #224]	@ (8004a3c <UART_SetConfig+0x4e4>)
 800495a:	fba3 2301 	umull	r2, r3, r3, r1
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2264      	movs	r2, #100	@ 0x64
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	1acb      	subs	r3, r1, r3
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	3332      	adds	r3, #50	@ 0x32
 800496c:	4a33      	ldr	r2, [pc, #204]	@ (8004a3c <UART_SetConfig+0x4e4>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004978:	441c      	add	r4, r3
 800497a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800497e:	2200      	movs	r2, #0
 8004980:	673b      	str	r3, [r7, #112]	@ 0x70
 8004982:	677a      	str	r2, [r7, #116]	@ 0x74
 8004984:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	1891      	adds	r1, r2, r2
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	415b      	adcs	r3, r3
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004998:	4641      	mov	r1, r8
 800499a:	1851      	adds	r1, r2, r1
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	4649      	mov	r1, r9
 80049a0:	414b      	adcs	r3, r1
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b0:	4659      	mov	r1, fp
 80049b2:	00cb      	lsls	r3, r1, #3
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ba:	4651      	mov	r1, sl
 80049bc:	00ca      	lsls	r2, r1, #3
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	4642      	mov	r2, r8
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ca:	464b      	mov	r3, r9
 80049cc:	460a      	mov	r2, r1
 80049ce:	eb42 0303 	adc.w	r3, r2, r3
 80049d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80049de:	667a      	str	r2, [r7, #100]	@ 0x64
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049ec:	4649      	mov	r1, r9
 80049ee:	008b      	lsls	r3, r1, #2
 80049f0:	4641      	mov	r1, r8
 80049f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f6:	4641      	mov	r1, r8
 80049f8:	008a      	lsls	r2, r1, #2
 80049fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049fe:	f7fb fc67 	bl	80002d0 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <UART_SetConfig+0x4e4>)
 8004a08:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2164      	movs	r1, #100	@ 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	3332      	adds	r3, #50	@ 0x32
 8004a1a:	4a08      	ldr	r2, [pc, #32]	@ (8004a3c <UART_SetConfig+0x4e4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4422      	add	r2, r4
 8004a2e:	609a      	str	r2, [r3, #8]
}
 8004a30:	bf00      	nop
 8004a32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a36:	46bd      	mov	sp, r7
 8004a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3c:	51eb851f 	.word	0x51eb851f

08004a40 <malloc>:
 8004a40:	4b02      	ldr	r3, [pc, #8]	@ (8004a4c <malloc+0xc>)
 8004a42:	4601      	mov	r1, r0
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	f000 b82d 	b.w	8004aa4 <_malloc_r>
 8004a4a:	bf00      	nop
 8004a4c:	20000018 	.word	0x20000018

08004a50 <free>:
 8004a50:	4b02      	ldr	r3, [pc, #8]	@ (8004a5c <free+0xc>)
 8004a52:	4601      	mov	r1, r0
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f000 ba49 	b.w	8004eec <_free_r>
 8004a5a:	bf00      	nop
 8004a5c:	20000018 	.word	0x20000018

08004a60 <sbrk_aligned>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4e0f      	ldr	r6, [pc, #60]	@ (8004aa0 <sbrk_aligned+0x40>)
 8004a64:	460c      	mov	r4, r1
 8004a66:	6831      	ldr	r1, [r6, #0]
 8004a68:	4605      	mov	r5, r0
 8004a6a:	b911      	cbnz	r1, 8004a72 <sbrk_aligned+0x12>
 8004a6c:	f000 fa00 	bl	8004e70 <_sbrk_r>
 8004a70:	6030      	str	r0, [r6, #0]
 8004a72:	4621      	mov	r1, r4
 8004a74:	4628      	mov	r0, r5
 8004a76:	f000 f9fb 	bl	8004e70 <_sbrk_r>
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	d103      	bne.n	8004a86 <sbrk_aligned+0x26>
 8004a7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004a82:	4620      	mov	r0, r4
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	1cc4      	adds	r4, r0, #3
 8004a88:	f024 0403 	bic.w	r4, r4, #3
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d0f8      	beq.n	8004a82 <sbrk_aligned+0x22>
 8004a90:	1a21      	subs	r1, r4, r0
 8004a92:	4628      	mov	r0, r5
 8004a94:	f000 f9ec 	bl	8004e70 <_sbrk_r>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d1f2      	bne.n	8004a82 <sbrk_aligned+0x22>
 8004a9c:	e7ef      	b.n	8004a7e <sbrk_aligned+0x1e>
 8004a9e:	bf00      	nop
 8004aa0:	200001b0 	.word	0x200001b0

08004aa4 <_malloc_r>:
 8004aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	1ccd      	adds	r5, r1, #3
 8004aaa:	f025 0503 	bic.w	r5, r5, #3
 8004aae:	3508      	adds	r5, #8
 8004ab0:	2d0c      	cmp	r5, #12
 8004ab2:	bf38      	it	cc
 8004ab4:	250c      	movcc	r5, #12
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	4606      	mov	r6, r0
 8004aba:	db01      	blt.n	8004ac0 <_malloc_r+0x1c>
 8004abc:	42a9      	cmp	r1, r5
 8004abe:	d904      	bls.n	8004aca <_malloc_r+0x26>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	6033      	str	r3, [r6, #0]
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ba0 <_malloc_r+0xfc>
 8004ace:	f000 f869 	bl	8004ba4 <__malloc_lock>
 8004ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad6:	461c      	mov	r4, r3
 8004ad8:	bb44      	cbnz	r4, 8004b2c <_malloc_r+0x88>
 8004ada:	4629      	mov	r1, r5
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7ff ffbf 	bl	8004a60 <sbrk_aligned>
 8004ae2:	1c43      	adds	r3, r0, #1
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	d158      	bne.n	8004b9a <_malloc_r+0xf6>
 8004ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8004aec:	4627      	mov	r7, r4
 8004aee:	2f00      	cmp	r7, #0
 8004af0:	d143      	bne.n	8004b7a <_malloc_r+0xd6>
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	d04b      	beq.n	8004b8e <_malloc_r+0xea>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	4639      	mov	r1, r7
 8004afa:	4630      	mov	r0, r6
 8004afc:	eb04 0903 	add.w	r9, r4, r3
 8004b00:	f000 f9b6 	bl	8004e70 <_sbrk_r>
 8004b04:	4581      	cmp	r9, r0
 8004b06:	d142      	bne.n	8004b8e <_malloc_r+0xea>
 8004b08:	6821      	ldr	r1, [r4, #0]
 8004b0a:	1a6d      	subs	r5, r5, r1
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f7ff ffa6 	bl	8004a60 <sbrk_aligned>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d03a      	beq.n	8004b8e <_malloc_r+0xea>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	442b      	add	r3, r5
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	bb62      	cbnz	r2, 8004b80 <_malloc_r+0xdc>
 8004b26:	f8c8 7000 	str.w	r7, [r8]
 8004b2a:	e00f      	b.n	8004b4c <_malloc_r+0xa8>
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	1b52      	subs	r2, r2, r5
 8004b30:	d420      	bmi.n	8004b74 <_malloc_r+0xd0>
 8004b32:	2a0b      	cmp	r2, #11
 8004b34:	d917      	bls.n	8004b66 <_malloc_r+0xc2>
 8004b36:	1961      	adds	r1, r4, r5
 8004b38:	42a3      	cmp	r3, r4
 8004b3a:	6025      	str	r5, [r4, #0]
 8004b3c:	bf18      	it	ne
 8004b3e:	6059      	strne	r1, [r3, #4]
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	bf08      	it	eq
 8004b44:	f8c8 1000 	streq.w	r1, [r8]
 8004b48:	5162      	str	r2, [r4, r5]
 8004b4a:	604b      	str	r3, [r1, #4]
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 f82f 	bl	8004bb0 <__malloc_unlock>
 8004b52:	f104 000b 	add.w	r0, r4, #11
 8004b56:	1d23      	adds	r3, r4, #4
 8004b58:	f020 0007 	bic.w	r0, r0, #7
 8004b5c:	1ac2      	subs	r2, r0, r3
 8004b5e:	bf1c      	itt	ne
 8004b60:	1a1b      	subne	r3, r3, r0
 8004b62:	50a3      	strne	r3, [r4, r2]
 8004b64:	e7af      	b.n	8004ac6 <_malloc_r+0x22>
 8004b66:	6862      	ldr	r2, [r4, #4]
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	bf0c      	ite	eq
 8004b6c:	f8c8 2000 	streq.w	r2, [r8]
 8004b70:	605a      	strne	r2, [r3, #4]
 8004b72:	e7eb      	b.n	8004b4c <_malloc_r+0xa8>
 8004b74:	4623      	mov	r3, r4
 8004b76:	6864      	ldr	r4, [r4, #4]
 8004b78:	e7ae      	b.n	8004ad8 <_malloc_r+0x34>
 8004b7a:	463c      	mov	r4, r7
 8004b7c:	687f      	ldr	r7, [r7, #4]
 8004b7e:	e7b6      	b.n	8004aee <_malloc_r+0x4a>
 8004b80:	461a      	mov	r2, r3
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	d1fb      	bne.n	8004b80 <_malloc_r+0xdc>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6053      	str	r3, [r2, #4]
 8004b8c:	e7de      	b.n	8004b4c <_malloc_r+0xa8>
 8004b8e:	230c      	movs	r3, #12
 8004b90:	6033      	str	r3, [r6, #0]
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 f80c 	bl	8004bb0 <__malloc_unlock>
 8004b98:	e794      	b.n	8004ac4 <_malloc_r+0x20>
 8004b9a:	6005      	str	r5, [r0, #0]
 8004b9c:	e7d6      	b.n	8004b4c <_malloc_r+0xa8>
 8004b9e:	bf00      	nop
 8004ba0:	200001b4 	.word	0x200001b4

08004ba4 <__malloc_lock>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	@ (8004bac <__malloc_lock+0x8>)
 8004ba6:	f000 b99e 	b.w	8004ee6 <__retarget_lock_acquire_recursive>
 8004baa:	bf00      	nop
 8004bac:	200002f4 	.word	0x200002f4

08004bb0 <__malloc_unlock>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	@ (8004bb8 <__malloc_unlock+0x8>)
 8004bb2:	f000 b999 	b.w	8004ee8 <__retarget_lock_release_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	200002f4 	.word	0x200002f4

08004bbc <siprintf>:
 8004bbc:	b40e      	push	{r1, r2, r3}
 8004bbe:	b500      	push	{lr}
 8004bc0:	b09c      	sub	sp, #112	@ 0x70
 8004bc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bc4:	9002      	str	r0, [sp, #8]
 8004bc6:	9006      	str	r0, [sp, #24]
 8004bc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bcc:	4809      	ldr	r0, [pc, #36]	@ (8004bf4 <siprintf+0x38>)
 8004bce:	9107      	str	r1, [sp, #28]
 8004bd0:	9104      	str	r1, [sp, #16]
 8004bd2:	4909      	ldr	r1, [pc, #36]	@ (8004bf8 <siprintf+0x3c>)
 8004bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd8:	9105      	str	r1, [sp, #20]
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	a902      	add	r1, sp, #8
 8004be0:	f000 fa2a 	bl	8005038 <_svfiprintf_r>
 8004be4:	9b02      	ldr	r3, [sp, #8]
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	b01c      	add	sp, #112	@ 0x70
 8004bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf0:	b003      	add	sp, #12
 8004bf2:	4770      	bx	lr
 8004bf4:	20000018 	.word	0x20000018
 8004bf8:	ffff0208 	.word	0xffff0208

08004bfc <std>:
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	4604      	mov	r4, r0
 8004c02:	e9c0 3300 	strd	r3, r3, [r0]
 8004c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c0a:	6083      	str	r3, [r0, #8]
 8004c0c:	8181      	strh	r1, [r0, #12]
 8004c0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c10:	81c2      	strh	r2, [r0, #14]
 8004c12:	6183      	str	r3, [r0, #24]
 8004c14:	4619      	mov	r1, r3
 8004c16:	2208      	movs	r2, #8
 8004c18:	305c      	adds	r0, #92	@ 0x5c
 8004c1a:	f000 f921 	bl	8004e60 <memset>
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <std+0x58>)
 8004c20:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c22:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <std+0x5c>)
 8004c24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <std+0x60>)
 8004c28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <std+0x64>)
 8004c2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <std+0x68>)
 8004c30:	6224      	str	r4, [r4, #32]
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d006      	beq.n	8004c44 <std+0x48>
 8004c36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c3a:	4294      	cmp	r4, r2
 8004c3c:	d002      	beq.n	8004c44 <std+0x48>
 8004c3e:	33d0      	adds	r3, #208	@ 0xd0
 8004c40:	429c      	cmp	r4, r3
 8004c42:	d105      	bne.n	8004c50 <std+0x54>
 8004c44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c4c:	f000 b94a 	b.w	8004ee4 <__retarget_lock_init_recursive>
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	bf00      	nop
 8004c54:	08005929 	.word	0x08005929
 8004c58:	0800594b 	.word	0x0800594b
 8004c5c:	08005983 	.word	0x08005983
 8004c60:	080059a7 	.word	0x080059a7
 8004c64:	200001b8 	.word	0x200001b8

08004c68 <stdio_exit_handler>:
 8004c68:	4a02      	ldr	r2, [pc, #8]	@ (8004c74 <stdio_exit_handler+0xc>)
 8004c6a:	4903      	ldr	r1, [pc, #12]	@ (8004c78 <stdio_exit_handler+0x10>)
 8004c6c:	4803      	ldr	r0, [pc, #12]	@ (8004c7c <stdio_exit_handler+0x14>)
 8004c6e:	f000 b869 	b.w	8004d44 <_fwalk_sglue>
 8004c72:	bf00      	nop
 8004c74:	2000000c 	.word	0x2000000c
 8004c78:	080058d9 	.word	0x080058d9
 8004c7c:	2000001c 	.word	0x2000001c

08004c80 <cleanup_stdio>:
 8004c80:	6841      	ldr	r1, [r0, #4]
 8004c82:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <cleanup_stdio+0x34>)
 8004c84:	4299      	cmp	r1, r3
 8004c86:	b510      	push	{r4, lr}
 8004c88:	4604      	mov	r4, r0
 8004c8a:	d001      	beq.n	8004c90 <cleanup_stdio+0x10>
 8004c8c:	f000 fe24 	bl	80058d8 <_fflush_r>
 8004c90:	68a1      	ldr	r1, [r4, #8]
 8004c92:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <cleanup_stdio+0x38>)
 8004c94:	4299      	cmp	r1, r3
 8004c96:	d002      	beq.n	8004c9e <cleanup_stdio+0x1e>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 fe1d 	bl	80058d8 <_fflush_r>
 8004c9e:	68e1      	ldr	r1, [r4, #12]
 8004ca0:	4b06      	ldr	r3, [pc, #24]	@ (8004cbc <cleanup_stdio+0x3c>)
 8004ca2:	4299      	cmp	r1, r3
 8004ca4:	d004      	beq.n	8004cb0 <cleanup_stdio+0x30>
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cac:	f000 be14 	b.w	80058d8 <_fflush_r>
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200001b8 	.word	0x200001b8
 8004cb8:	20000220 	.word	0x20000220
 8004cbc:	20000288 	.word	0x20000288

08004cc0 <global_stdio_init.part.0>:
 8004cc0:	b510      	push	{r4, lr}
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <global_stdio_init.part.0+0x30>)
 8004cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8004cf4 <global_stdio_init.part.0+0x34>)
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf8 <global_stdio_init.part.0+0x38>)
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	4620      	mov	r0, r4
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2104      	movs	r1, #4
 8004cd0:	f7ff ff94 	bl	8004bfc <std>
 8004cd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cd8:	2201      	movs	r2, #1
 8004cda:	2109      	movs	r1, #9
 8004cdc:	f7ff ff8e 	bl	8004bfc <std>
 8004ce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cea:	2112      	movs	r1, #18
 8004cec:	f7ff bf86 	b.w	8004bfc <std>
 8004cf0:	200002f0 	.word	0x200002f0
 8004cf4:	200001b8 	.word	0x200001b8
 8004cf8:	08004c69 	.word	0x08004c69

08004cfc <__sfp_lock_acquire>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	@ (8004d04 <__sfp_lock_acquire+0x8>)
 8004cfe:	f000 b8f2 	b.w	8004ee6 <__retarget_lock_acquire_recursive>
 8004d02:	bf00      	nop
 8004d04:	200002f5 	.word	0x200002f5

08004d08 <__sfp_lock_release>:
 8004d08:	4801      	ldr	r0, [pc, #4]	@ (8004d10 <__sfp_lock_release+0x8>)
 8004d0a:	f000 b8ed 	b.w	8004ee8 <__retarget_lock_release_recursive>
 8004d0e:	bf00      	nop
 8004d10:	200002f5 	.word	0x200002f5

08004d14 <__sinit>:
 8004d14:	b510      	push	{r4, lr}
 8004d16:	4604      	mov	r4, r0
 8004d18:	f7ff fff0 	bl	8004cfc <__sfp_lock_acquire>
 8004d1c:	6a23      	ldr	r3, [r4, #32]
 8004d1e:	b11b      	cbz	r3, 8004d28 <__sinit+0x14>
 8004d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d24:	f7ff bff0 	b.w	8004d08 <__sfp_lock_release>
 8004d28:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <__sinit+0x28>)
 8004d2a:	6223      	str	r3, [r4, #32]
 8004d2c:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <__sinit+0x2c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f5      	bne.n	8004d20 <__sinit+0xc>
 8004d34:	f7ff ffc4 	bl	8004cc0 <global_stdio_init.part.0>
 8004d38:	e7f2      	b.n	8004d20 <__sinit+0xc>
 8004d3a:	bf00      	nop
 8004d3c:	08004c81 	.word	0x08004c81
 8004d40:	200002f0 	.word	0x200002f0

08004d44 <_fwalk_sglue>:
 8004d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d48:	4607      	mov	r7, r0
 8004d4a:	4688      	mov	r8, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	2600      	movs	r6, #0
 8004d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d54:	f1b9 0901 	subs.w	r9, r9, #1
 8004d58:	d505      	bpl.n	8004d66 <_fwalk_sglue+0x22>
 8004d5a:	6824      	ldr	r4, [r4, #0]
 8004d5c:	2c00      	cmp	r4, #0
 8004d5e:	d1f7      	bne.n	8004d50 <_fwalk_sglue+0xc>
 8004d60:	4630      	mov	r0, r6
 8004d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d66:	89ab      	ldrh	r3, [r5, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d907      	bls.n	8004d7c <_fwalk_sglue+0x38>
 8004d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d70:	3301      	adds	r3, #1
 8004d72:	d003      	beq.n	8004d7c <_fwalk_sglue+0x38>
 8004d74:	4629      	mov	r1, r5
 8004d76:	4638      	mov	r0, r7
 8004d78:	47c0      	blx	r8
 8004d7a:	4306      	orrs	r6, r0
 8004d7c:	3568      	adds	r5, #104	@ 0x68
 8004d7e:	e7e9      	b.n	8004d54 <_fwalk_sglue+0x10>

08004d80 <iprintf>:
 8004d80:	b40f      	push	{r0, r1, r2, r3}
 8004d82:	b507      	push	{r0, r1, r2, lr}
 8004d84:	4906      	ldr	r1, [pc, #24]	@ (8004da0 <iprintf+0x20>)
 8004d86:	ab04      	add	r3, sp, #16
 8004d88:	6808      	ldr	r0, [r1, #0]
 8004d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8e:	6881      	ldr	r1, [r0, #8]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	f000 fa77 	bl	8005284 <_vfiprintf_r>
 8004d96:	b003      	add	sp, #12
 8004d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d9c:	b004      	add	sp, #16
 8004d9e:	4770      	bx	lr
 8004da0:	20000018 	.word	0x20000018

08004da4 <_puts_r>:
 8004da4:	6a03      	ldr	r3, [r0, #32]
 8004da6:	b570      	push	{r4, r5, r6, lr}
 8004da8:	6884      	ldr	r4, [r0, #8]
 8004daa:	4605      	mov	r5, r0
 8004dac:	460e      	mov	r6, r1
 8004dae:	b90b      	cbnz	r3, 8004db4 <_puts_r+0x10>
 8004db0:	f7ff ffb0 	bl	8004d14 <__sinit>
 8004db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004db6:	07db      	lsls	r3, r3, #31
 8004db8:	d405      	bmi.n	8004dc6 <_puts_r+0x22>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	0598      	lsls	r0, r3, #22
 8004dbe:	d402      	bmi.n	8004dc6 <_puts_r+0x22>
 8004dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dc2:	f000 f890 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	0719      	lsls	r1, r3, #28
 8004dca:	d502      	bpl.n	8004dd2 <_puts_r+0x2e>
 8004dcc:	6923      	ldr	r3, [r4, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d135      	bne.n	8004e3e <_puts_r+0x9a>
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 fe57 	bl	8005a88 <__swsetup_r>
 8004dda:	b380      	cbz	r0, 8004e3e <_puts_r+0x9a>
 8004ddc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004de0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004de2:	07da      	lsls	r2, r3, #31
 8004de4:	d405      	bmi.n	8004df2 <_puts_r+0x4e>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	059b      	lsls	r3, r3, #22
 8004dea:	d402      	bmi.n	8004df2 <_puts_r+0x4e>
 8004dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dee:	f000 f87b 	bl	8004ee8 <__retarget_lock_release_recursive>
 8004df2:	4628      	mov	r0, r5
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da04      	bge.n	8004e04 <_puts_r+0x60>
 8004dfa:	69a2      	ldr	r2, [r4, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	dc17      	bgt.n	8004e30 <_puts_r+0x8c>
 8004e00:	290a      	cmp	r1, #10
 8004e02:	d015      	beq.n	8004e30 <_puts_r+0x8c>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	6022      	str	r2, [r4, #0]
 8004e0a:	7019      	strb	r1, [r3, #0]
 8004e0c:	68a3      	ldr	r3, [r4, #8]
 8004e0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e12:	3b01      	subs	r3, #1
 8004e14:	60a3      	str	r3, [r4, #8]
 8004e16:	2900      	cmp	r1, #0
 8004e18:	d1ed      	bne.n	8004df6 <_puts_r+0x52>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da11      	bge.n	8004e42 <_puts_r+0x9e>
 8004e1e:	4622      	mov	r2, r4
 8004e20:	210a      	movs	r1, #10
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 fdf1 	bl	8005a0a <__swbuf_r>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d0d7      	beq.n	8004ddc <_puts_r+0x38>
 8004e2c:	250a      	movs	r5, #10
 8004e2e:	e7d7      	b.n	8004de0 <_puts_r+0x3c>
 8004e30:	4622      	mov	r2, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 fde9 	bl	8005a0a <__swbuf_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d1e7      	bne.n	8004e0c <_puts_r+0x68>
 8004e3c:	e7ce      	b.n	8004ddc <_puts_r+0x38>
 8004e3e:	3e01      	subs	r6, #1
 8004e40:	e7e4      	b.n	8004e0c <_puts_r+0x68>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	6022      	str	r2, [r4, #0]
 8004e48:	220a      	movs	r2, #10
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	e7ee      	b.n	8004e2c <_puts_r+0x88>
	...

08004e50 <puts>:
 8004e50:	4b02      	ldr	r3, [pc, #8]	@ (8004e5c <puts+0xc>)
 8004e52:	4601      	mov	r1, r0
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	f7ff bfa5 	b.w	8004da4 <_puts_r>
 8004e5a:	bf00      	nop
 8004e5c:	20000018 	.word	0x20000018

08004e60 <memset>:
 8004e60:	4402      	add	r2, r0
 8004e62:	4603      	mov	r3, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d100      	bne.n	8004e6a <memset+0xa>
 8004e68:	4770      	bx	lr
 8004e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6e:	e7f9      	b.n	8004e64 <memset+0x4>

08004e70 <_sbrk_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d06      	ldr	r5, [pc, #24]	@ (8004e8c <_sbrk_r+0x1c>)
 8004e74:	2300      	movs	r3, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	602b      	str	r3, [r5, #0]
 8004e7c:	f7fc f95c 	bl	8001138 <_sbrk>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_sbrk_r+0x1a>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_sbrk_r+0x1a>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	200002f8 	.word	0x200002f8

08004e90 <__errno>:
 8004e90:	4b01      	ldr	r3, [pc, #4]	@ (8004e98 <__errno+0x8>)
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000018 	.word	0x20000018

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	4d0b      	ldr	r5, [pc, #44]	@ (8004edc <__libc_init_array+0x40>)
 8004eae:	4c0c      	ldr	r4, [pc, #48]	@ (8004ee0 <__libc_init_array+0x44>)
 8004eb0:	f000 ff3a 	bl	8005d28 <_init>
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08005f5c 	.word	0x08005f5c
 8004ed8:	08005f5c 	.word	0x08005f5c
 8004edc:	08005f5c 	.word	0x08005f5c
 8004ee0:	08005f60 	.word	0x08005f60

08004ee4 <__retarget_lock_init_recursive>:
 8004ee4:	4770      	bx	lr

08004ee6 <__retarget_lock_acquire_recursive>:
 8004ee6:	4770      	bx	lr

08004ee8 <__retarget_lock_release_recursive>:
 8004ee8:	4770      	bx	lr
	...

08004eec <_free_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4605      	mov	r5, r0
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d041      	beq.n	8004f78 <_free_r+0x8c>
 8004ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef8:	1f0c      	subs	r4, r1, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfb8      	it	lt
 8004efe:	18e4      	addlt	r4, r4, r3
 8004f00:	f7ff fe50 	bl	8004ba4 <__malloc_lock>
 8004f04:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <_free_r+0x90>)
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	b933      	cbnz	r3, 8004f18 <_free_r+0x2c>
 8004f0a:	6063      	str	r3, [r4, #4]
 8004f0c:	6014      	str	r4, [r2, #0]
 8004f0e:	4628      	mov	r0, r5
 8004f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f14:	f7ff be4c 	b.w	8004bb0 <__malloc_unlock>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d908      	bls.n	8004f2e <_free_r+0x42>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	1821      	adds	r1, r4, r0
 8004f20:	428b      	cmp	r3, r1
 8004f22:	bf01      	itttt	eq
 8004f24:	6819      	ldreq	r1, [r3, #0]
 8004f26:	685b      	ldreq	r3, [r3, #4]
 8004f28:	1809      	addeq	r1, r1, r0
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	e7ed      	b.n	8004f0a <_free_r+0x1e>
 8004f2e:	461a      	mov	r2, r3
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	b10b      	cbz	r3, 8004f38 <_free_r+0x4c>
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d9fa      	bls.n	8004f2e <_free_r+0x42>
 8004f38:	6811      	ldr	r1, [r2, #0]
 8004f3a:	1850      	adds	r0, r2, r1
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d10b      	bne.n	8004f58 <_free_r+0x6c>
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	4401      	add	r1, r0
 8004f44:	1850      	adds	r0, r2, r1
 8004f46:	4283      	cmp	r3, r0
 8004f48:	6011      	str	r1, [r2, #0]
 8004f4a:	d1e0      	bne.n	8004f0e <_free_r+0x22>
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	6053      	str	r3, [r2, #4]
 8004f52:	4408      	add	r0, r1
 8004f54:	6010      	str	r0, [r2, #0]
 8004f56:	e7da      	b.n	8004f0e <_free_r+0x22>
 8004f58:	d902      	bls.n	8004f60 <_free_r+0x74>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	602b      	str	r3, [r5, #0]
 8004f5e:	e7d6      	b.n	8004f0e <_free_r+0x22>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	1821      	adds	r1, r4, r0
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf04      	itt	eq
 8004f68:	6819      	ldreq	r1, [r3, #0]
 8004f6a:	685b      	ldreq	r3, [r3, #4]
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	bf04      	itt	eq
 8004f70:	1809      	addeq	r1, r1, r0
 8004f72:	6021      	streq	r1, [r4, #0]
 8004f74:	6054      	str	r4, [r2, #4]
 8004f76:	e7ca      	b.n	8004f0e <_free_r+0x22>
 8004f78:	bd38      	pop	{r3, r4, r5, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200001b4 	.word	0x200001b4

08004f80 <__ssputs_r>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	688e      	ldr	r6, [r1, #8]
 8004f86:	461f      	mov	r7, r3
 8004f88:	42be      	cmp	r6, r7
 8004f8a:	680b      	ldr	r3, [r1, #0]
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	4690      	mov	r8, r2
 8004f92:	d82d      	bhi.n	8004ff0 <__ssputs_r+0x70>
 8004f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f9c:	d026      	beq.n	8004fec <__ssputs_r+0x6c>
 8004f9e:	6965      	ldr	r5, [r4, #20]
 8004fa0:	6909      	ldr	r1, [r1, #16]
 8004fa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fa6:	eba3 0901 	sub.w	r9, r3, r1
 8004faa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fae:	1c7b      	adds	r3, r7, #1
 8004fb0:	444b      	add	r3, r9
 8004fb2:	106d      	asrs	r5, r5, #1
 8004fb4:	429d      	cmp	r5, r3
 8004fb6:	bf38      	it	cc
 8004fb8:	461d      	movcc	r5, r3
 8004fba:	0553      	lsls	r3, r2, #21
 8004fbc:	d527      	bpl.n	800500e <__ssputs_r+0x8e>
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	f7ff fd70 	bl	8004aa4 <_malloc_r>
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	b360      	cbz	r0, 8005022 <__ssputs_r+0xa2>
 8004fc8:	6921      	ldr	r1, [r4, #16]
 8004fca:	464a      	mov	r2, r9
 8004fcc:	f000 fe96 	bl	8005cfc <memcpy>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	6126      	str	r6, [r4, #16]
 8004fde:	6165      	str	r5, [r4, #20]
 8004fe0:	444e      	add	r6, r9
 8004fe2:	eba5 0509 	sub.w	r5, r5, r9
 8004fe6:	6026      	str	r6, [r4, #0]
 8004fe8:	60a5      	str	r5, [r4, #8]
 8004fea:	463e      	mov	r6, r7
 8004fec:	42be      	cmp	r6, r7
 8004fee:	d900      	bls.n	8004ff2 <__ssputs_r+0x72>
 8004ff0:	463e      	mov	r6, r7
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	4632      	mov	r2, r6
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	f000 fdfe 	bl	8005bf8 <memmove>
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	1b9b      	subs	r3, r3, r6
 8005000:	60a3      	str	r3, [r4, #8]
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	4433      	add	r3, r6
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	2000      	movs	r0, #0
 800500a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500e:	462a      	mov	r2, r5
 8005010:	f000 fccd 	bl	80059ae <_realloc_r>
 8005014:	4606      	mov	r6, r0
 8005016:	2800      	cmp	r0, #0
 8005018:	d1e0      	bne.n	8004fdc <__ssputs_r+0x5c>
 800501a:	6921      	ldr	r1, [r4, #16]
 800501c:	4650      	mov	r0, sl
 800501e:	f7ff ff65 	bl	8004eec <_free_r>
 8005022:	230c      	movs	r3, #12
 8005024:	f8ca 3000 	str.w	r3, [sl]
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005034:	e7e9      	b.n	800500a <__ssputs_r+0x8a>
	...

08005038 <_svfiprintf_r>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	4698      	mov	r8, r3
 800503e:	898b      	ldrh	r3, [r1, #12]
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	b09d      	sub	sp, #116	@ 0x74
 8005044:	4607      	mov	r7, r0
 8005046:	460d      	mov	r5, r1
 8005048:	4614      	mov	r4, r2
 800504a:	d510      	bpl.n	800506e <_svfiprintf_r+0x36>
 800504c:	690b      	ldr	r3, [r1, #16]
 800504e:	b973      	cbnz	r3, 800506e <_svfiprintf_r+0x36>
 8005050:	2140      	movs	r1, #64	@ 0x40
 8005052:	f7ff fd27 	bl	8004aa4 <_malloc_r>
 8005056:	6028      	str	r0, [r5, #0]
 8005058:	6128      	str	r0, [r5, #16]
 800505a:	b930      	cbnz	r0, 800506a <_svfiprintf_r+0x32>
 800505c:	230c      	movs	r3, #12
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005064:	b01d      	add	sp, #116	@ 0x74
 8005066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506a:	2340      	movs	r3, #64	@ 0x40
 800506c:	616b      	str	r3, [r5, #20]
 800506e:	2300      	movs	r3, #0
 8005070:	9309      	str	r3, [sp, #36]	@ 0x24
 8005072:	2320      	movs	r3, #32
 8005074:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005078:	f8cd 800c 	str.w	r8, [sp, #12]
 800507c:	2330      	movs	r3, #48	@ 0x30
 800507e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800521c <_svfiprintf_r+0x1e4>
 8005082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005086:	f04f 0901 	mov.w	r9, #1
 800508a:	4623      	mov	r3, r4
 800508c:	469a      	mov	sl, r3
 800508e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005092:	b10a      	cbz	r2, 8005098 <_svfiprintf_r+0x60>
 8005094:	2a25      	cmp	r2, #37	@ 0x25
 8005096:	d1f9      	bne.n	800508c <_svfiprintf_r+0x54>
 8005098:	ebba 0b04 	subs.w	fp, sl, r4
 800509c:	d00b      	beq.n	80050b6 <_svfiprintf_r+0x7e>
 800509e:	465b      	mov	r3, fp
 80050a0:	4622      	mov	r2, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ff6b 	bl	8004f80 <__ssputs_r>
 80050aa:	3001      	adds	r0, #1
 80050ac:	f000 80a7 	beq.w	80051fe <_svfiprintf_r+0x1c6>
 80050b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050b2:	445a      	add	r2, fp
 80050b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80050b6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 809f 	beq.w	80051fe <_svfiprintf_r+0x1c6>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ca:	f10a 0a01 	add.w	sl, sl, #1
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	9307      	str	r3, [sp, #28]
 80050d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80050d8:	4654      	mov	r4, sl
 80050da:	2205      	movs	r2, #5
 80050dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e0:	484e      	ldr	r0, [pc, #312]	@ (800521c <_svfiprintf_r+0x1e4>)
 80050e2:	f7fb f8a5 	bl	8000230 <memchr>
 80050e6:	9a04      	ldr	r2, [sp, #16]
 80050e8:	b9d8      	cbnz	r0, 8005122 <_svfiprintf_r+0xea>
 80050ea:	06d0      	lsls	r0, r2, #27
 80050ec:	bf44      	itt	mi
 80050ee:	2320      	movmi	r3, #32
 80050f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f4:	0711      	lsls	r1, r2, #28
 80050f6:	bf44      	itt	mi
 80050f8:	232b      	movmi	r3, #43	@ 0x2b
 80050fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005102:	2b2a      	cmp	r3, #42	@ 0x2a
 8005104:	d015      	beq.n	8005132 <_svfiprintf_r+0xfa>
 8005106:	9a07      	ldr	r2, [sp, #28]
 8005108:	4654      	mov	r4, sl
 800510a:	2000      	movs	r0, #0
 800510c:	f04f 0c0a 	mov.w	ip, #10
 8005110:	4621      	mov	r1, r4
 8005112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005116:	3b30      	subs	r3, #48	@ 0x30
 8005118:	2b09      	cmp	r3, #9
 800511a:	d94b      	bls.n	80051b4 <_svfiprintf_r+0x17c>
 800511c:	b1b0      	cbz	r0, 800514c <_svfiprintf_r+0x114>
 800511e:	9207      	str	r2, [sp, #28]
 8005120:	e014      	b.n	800514c <_svfiprintf_r+0x114>
 8005122:	eba0 0308 	sub.w	r3, r0, r8
 8005126:	fa09 f303 	lsl.w	r3, r9, r3
 800512a:	4313      	orrs	r3, r2
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	46a2      	mov	sl, r4
 8005130:	e7d2      	b.n	80050d8 <_svfiprintf_r+0xa0>
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	1d19      	adds	r1, r3, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	9103      	str	r1, [sp, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	bfbb      	ittet	lt
 800513e:	425b      	neglt	r3, r3
 8005140:	f042 0202 	orrlt.w	r2, r2, #2
 8005144:	9307      	strge	r3, [sp, #28]
 8005146:	9307      	strlt	r3, [sp, #28]
 8005148:	bfb8      	it	lt
 800514a:	9204      	strlt	r2, [sp, #16]
 800514c:	7823      	ldrb	r3, [r4, #0]
 800514e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005150:	d10a      	bne.n	8005168 <_svfiprintf_r+0x130>
 8005152:	7863      	ldrb	r3, [r4, #1]
 8005154:	2b2a      	cmp	r3, #42	@ 0x2a
 8005156:	d132      	bne.n	80051be <_svfiprintf_r+0x186>
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	1d1a      	adds	r2, r3, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	9203      	str	r2, [sp, #12]
 8005160:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005164:	3402      	adds	r4, #2
 8005166:	9305      	str	r3, [sp, #20]
 8005168:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800522c <_svfiprintf_r+0x1f4>
 800516c:	7821      	ldrb	r1, [r4, #0]
 800516e:	2203      	movs	r2, #3
 8005170:	4650      	mov	r0, sl
 8005172:	f7fb f85d 	bl	8000230 <memchr>
 8005176:	b138      	cbz	r0, 8005188 <_svfiprintf_r+0x150>
 8005178:	9b04      	ldr	r3, [sp, #16]
 800517a:	eba0 000a 	sub.w	r0, r0, sl
 800517e:	2240      	movs	r2, #64	@ 0x40
 8005180:	4082      	lsls	r2, r0
 8005182:	4313      	orrs	r3, r2
 8005184:	3401      	adds	r4, #1
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518c:	4824      	ldr	r0, [pc, #144]	@ (8005220 <_svfiprintf_r+0x1e8>)
 800518e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005192:	2206      	movs	r2, #6
 8005194:	f7fb f84c 	bl	8000230 <memchr>
 8005198:	2800      	cmp	r0, #0
 800519a:	d036      	beq.n	800520a <_svfiprintf_r+0x1d2>
 800519c:	4b21      	ldr	r3, [pc, #132]	@ (8005224 <_svfiprintf_r+0x1ec>)
 800519e:	bb1b      	cbnz	r3, 80051e8 <_svfiprintf_r+0x1b0>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	3307      	adds	r3, #7
 80051a4:	f023 0307 	bic.w	r3, r3, #7
 80051a8:	3308      	adds	r3, #8
 80051aa:	9303      	str	r3, [sp, #12]
 80051ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ae:	4433      	add	r3, r6
 80051b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80051b2:	e76a      	b.n	800508a <_svfiprintf_r+0x52>
 80051b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051b8:	460c      	mov	r4, r1
 80051ba:	2001      	movs	r0, #1
 80051bc:	e7a8      	b.n	8005110 <_svfiprintf_r+0xd8>
 80051be:	2300      	movs	r3, #0
 80051c0:	3401      	adds	r4, #1
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	4619      	mov	r1, r3
 80051c6:	f04f 0c0a 	mov.w	ip, #10
 80051ca:	4620      	mov	r0, r4
 80051cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d0:	3a30      	subs	r2, #48	@ 0x30
 80051d2:	2a09      	cmp	r2, #9
 80051d4:	d903      	bls.n	80051de <_svfiprintf_r+0x1a6>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0c6      	beq.n	8005168 <_svfiprintf_r+0x130>
 80051da:	9105      	str	r1, [sp, #20]
 80051dc:	e7c4      	b.n	8005168 <_svfiprintf_r+0x130>
 80051de:	fb0c 2101 	mla	r1, ip, r1, r2
 80051e2:	4604      	mov	r4, r0
 80051e4:	2301      	movs	r3, #1
 80051e6:	e7f0      	b.n	80051ca <_svfiprintf_r+0x192>
 80051e8:	ab03      	add	r3, sp, #12
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	462a      	mov	r2, r5
 80051ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005228 <_svfiprintf_r+0x1f0>)
 80051f0:	a904      	add	r1, sp, #16
 80051f2:	4638      	mov	r0, r7
 80051f4:	f3af 8000 	nop.w
 80051f8:	1c42      	adds	r2, r0, #1
 80051fa:	4606      	mov	r6, r0
 80051fc:	d1d6      	bne.n	80051ac <_svfiprintf_r+0x174>
 80051fe:	89ab      	ldrh	r3, [r5, #12]
 8005200:	065b      	lsls	r3, r3, #25
 8005202:	f53f af2d 	bmi.w	8005060 <_svfiprintf_r+0x28>
 8005206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005208:	e72c      	b.n	8005064 <_svfiprintf_r+0x2c>
 800520a:	ab03      	add	r3, sp, #12
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	462a      	mov	r2, r5
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <_svfiprintf_r+0x1f0>)
 8005212:	a904      	add	r1, sp, #16
 8005214:	4638      	mov	r0, r7
 8005216:	f000 f9bb 	bl	8005590 <_printf_i>
 800521a:	e7ed      	b.n	80051f8 <_svfiprintf_r+0x1c0>
 800521c:	08005f20 	.word	0x08005f20
 8005220:	08005f2a 	.word	0x08005f2a
 8005224:	00000000 	.word	0x00000000
 8005228:	08004f81 	.word	0x08004f81
 800522c:	08005f26 	.word	0x08005f26

08005230 <__sfputc_r>:
 8005230:	6893      	ldr	r3, [r2, #8]
 8005232:	3b01      	subs	r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	b410      	push	{r4}
 8005238:	6093      	str	r3, [r2, #8]
 800523a:	da08      	bge.n	800524e <__sfputc_r+0x1e>
 800523c:	6994      	ldr	r4, [r2, #24]
 800523e:	42a3      	cmp	r3, r4
 8005240:	db01      	blt.n	8005246 <__sfputc_r+0x16>
 8005242:	290a      	cmp	r1, #10
 8005244:	d103      	bne.n	800524e <__sfputc_r+0x1e>
 8005246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800524a:	f000 bbde 	b.w	8005a0a <__swbuf_r>
 800524e:	6813      	ldr	r3, [r2, #0]
 8005250:	1c58      	adds	r0, r3, #1
 8005252:	6010      	str	r0, [r2, #0]
 8005254:	7019      	strb	r1, [r3, #0]
 8005256:	4608      	mov	r0, r1
 8005258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800525c:	4770      	bx	lr

0800525e <__sfputs_r>:
 800525e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005260:	4606      	mov	r6, r0
 8005262:	460f      	mov	r7, r1
 8005264:	4614      	mov	r4, r2
 8005266:	18d5      	adds	r5, r2, r3
 8005268:	42ac      	cmp	r4, r5
 800526a:	d101      	bne.n	8005270 <__sfputs_r+0x12>
 800526c:	2000      	movs	r0, #0
 800526e:	e007      	b.n	8005280 <__sfputs_r+0x22>
 8005270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005274:	463a      	mov	r2, r7
 8005276:	4630      	mov	r0, r6
 8005278:	f7ff ffda 	bl	8005230 <__sfputc_r>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d1f3      	bne.n	8005268 <__sfputs_r+0xa>
 8005280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005284 <_vfiprintf_r>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	460d      	mov	r5, r1
 800528a:	b09d      	sub	sp, #116	@ 0x74
 800528c:	4614      	mov	r4, r2
 800528e:	4698      	mov	r8, r3
 8005290:	4606      	mov	r6, r0
 8005292:	b118      	cbz	r0, 800529c <_vfiprintf_r+0x18>
 8005294:	6a03      	ldr	r3, [r0, #32]
 8005296:	b90b      	cbnz	r3, 800529c <_vfiprintf_r+0x18>
 8005298:	f7ff fd3c 	bl	8004d14 <__sinit>
 800529c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800529e:	07d9      	lsls	r1, r3, #31
 80052a0:	d405      	bmi.n	80052ae <_vfiprintf_r+0x2a>
 80052a2:	89ab      	ldrh	r3, [r5, #12]
 80052a4:	059a      	lsls	r2, r3, #22
 80052a6:	d402      	bmi.n	80052ae <_vfiprintf_r+0x2a>
 80052a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052aa:	f7ff fe1c 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 80052ae:	89ab      	ldrh	r3, [r5, #12]
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	d501      	bpl.n	80052b8 <_vfiprintf_r+0x34>
 80052b4:	692b      	ldr	r3, [r5, #16]
 80052b6:	b99b      	cbnz	r3, 80052e0 <_vfiprintf_r+0x5c>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4630      	mov	r0, r6
 80052bc:	f000 fbe4 	bl	8005a88 <__swsetup_r>
 80052c0:	b170      	cbz	r0, 80052e0 <_vfiprintf_r+0x5c>
 80052c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052c4:	07dc      	lsls	r4, r3, #31
 80052c6:	d504      	bpl.n	80052d2 <_vfiprintf_r+0x4e>
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052cc:	b01d      	add	sp, #116	@ 0x74
 80052ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d2:	89ab      	ldrh	r3, [r5, #12]
 80052d4:	0598      	lsls	r0, r3, #22
 80052d6:	d4f7      	bmi.n	80052c8 <_vfiprintf_r+0x44>
 80052d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052da:	f7ff fe05 	bl	8004ee8 <__retarget_lock_release_recursive>
 80052de:	e7f3      	b.n	80052c8 <_vfiprintf_r+0x44>
 80052e0:	2300      	movs	r3, #0
 80052e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80052e4:	2320      	movs	r3, #32
 80052e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ee:	2330      	movs	r3, #48	@ 0x30
 80052f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80054a0 <_vfiprintf_r+0x21c>
 80052f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052f8:	f04f 0901 	mov.w	r9, #1
 80052fc:	4623      	mov	r3, r4
 80052fe:	469a      	mov	sl, r3
 8005300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005304:	b10a      	cbz	r2, 800530a <_vfiprintf_r+0x86>
 8005306:	2a25      	cmp	r2, #37	@ 0x25
 8005308:	d1f9      	bne.n	80052fe <_vfiprintf_r+0x7a>
 800530a:	ebba 0b04 	subs.w	fp, sl, r4
 800530e:	d00b      	beq.n	8005328 <_vfiprintf_r+0xa4>
 8005310:	465b      	mov	r3, fp
 8005312:	4622      	mov	r2, r4
 8005314:	4629      	mov	r1, r5
 8005316:	4630      	mov	r0, r6
 8005318:	f7ff ffa1 	bl	800525e <__sfputs_r>
 800531c:	3001      	adds	r0, #1
 800531e:	f000 80a7 	beq.w	8005470 <_vfiprintf_r+0x1ec>
 8005322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005324:	445a      	add	r2, fp
 8005326:	9209      	str	r2, [sp, #36]	@ 0x24
 8005328:	f89a 3000 	ldrb.w	r3, [sl]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 809f 	beq.w	8005470 <_vfiprintf_r+0x1ec>
 8005332:	2300      	movs	r3, #0
 8005334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800533c:	f10a 0a01 	add.w	sl, sl, #1
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	9307      	str	r3, [sp, #28]
 8005344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005348:	931a      	str	r3, [sp, #104]	@ 0x68
 800534a:	4654      	mov	r4, sl
 800534c:	2205      	movs	r2, #5
 800534e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005352:	4853      	ldr	r0, [pc, #332]	@ (80054a0 <_vfiprintf_r+0x21c>)
 8005354:	f7fa ff6c 	bl	8000230 <memchr>
 8005358:	9a04      	ldr	r2, [sp, #16]
 800535a:	b9d8      	cbnz	r0, 8005394 <_vfiprintf_r+0x110>
 800535c:	06d1      	lsls	r1, r2, #27
 800535e:	bf44      	itt	mi
 8005360:	2320      	movmi	r3, #32
 8005362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005366:	0713      	lsls	r3, r2, #28
 8005368:	bf44      	itt	mi
 800536a:	232b      	movmi	r3, #43	@ 0x2b
 800536c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005370:	f89a 3000 	ldrb.w	r3, [sl]
 8005374:	2b2a      	cmp	r3, #42	@ 0x2a
 8005376:	d015      	beq.n	80053a4 <_vfiprintf_r+0x120>
 8005378:	9a07      	ldr	r2, [sp, #28]
 800537a:	4654      	mov	r4, sl
 800537c:	2000      	movs	r0, #0
 800537e:	f04f 0c0a 	mov.w	ip, #10
 8005382:	4621      	mov	r1, r4
 8005384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005388:	3b30      	subs	r3, #48	@ 0x30
 800538a:	2b09      	cmp	r3, #9
 800538c:	d94b      	bls.n	8005426 <_vfiprintf_r+0x1a2>
 800538e:	b1b0      	cbz	r0, 80053be <_vfiprintf_r+0x13a>
 8005390:	9207      	str	r2, [sp, #28]
 8005392:	e014      	b.n	80053be <_vfiprintf_r+0x13a>
 8005394:	eba0 0308 	sub.w	r3, r0, r8
 8005398:	fa09 f303 	lsl.w	r3, r9, r3
 800539c:	4313      	orrs	r3, r2
 800539e:	9304      	str	r3, [sp, #16]
 80053a0:	46a2      	mov	sl, r4
 80053a2:	e7d2      	b.n	800534a <_vfiprintf_r+0xc6>
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	1d19      	adds	r1, r3, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	9103      	str	r1, [sp, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bfbb      	ittet	lt
 80053b0:	425b      	neglt	r3, r3
 80053b2:	f042 0202 	orrlt.w	r2, r2, #2
 80053b6:	9307      	strge	r3, [sp, #28]
 80053b8:	9307      	strlt	r3, [sp, #28]
 80053ba:	bfb8      	it	lt
 80053bc:	9204      	strlt	r2, [sp, #16]
 80053be:	7823      	ldrb	r3, [r4, #0]
 80053c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80053c2:	d10a      	bne.n	80053da <_vfiprintf_r+0x156>
 80053c4:	7863      	ldrb	r3, [r4, #1]
 80053c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80053c8:	d132      	bne.n	8005430 <_vfiprintf_r+0x1ac>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	9203      	str	r2, [sp, #12]
 80053d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053d6:	3402      	adds	r4, #2
 80053d8:	9305      	str	r3, [sp, #20]
 80053da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80054b0 <_vfiprintf_r+0x22c>
 80053de:	7821      	ldrb	r1, [r4, #0]
 80053e0:	2203      	movs	r2, #3
 80053e2:	4650      	mov	r0, sl
 80053e4:	f7fa ff24 	bl	8000230 <memchr>
 80053e8:	b138      	cbz	r0, 80053fa <_vfiprintf_r+0x176>
 80053ea:	9b04      	ldr	r3, [sp, #16]
 80053ec:	eba0 000a 	sub.w	r0, r0, sl
 80053f0:	2240      	movs	r2, #64	@ 0x40
 80053f2:	4082      	lsls	r2, r0
 80053f4:	4313      	orrs	r3, r2
 80053f6:	3401      	adds	r4, #1
 80053f8:	9304      	str	r3, [sp, #16]
 80053fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fe:	4829      	ldr	r0, [pc, #164]	@ (80054a4 <_vfiprintf_r+0x220>)
 8005400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005404:	2206      	movs	r2, #6
 8005406:	f7fa ff13 	bl	8000230 <memchr>
 800540a:	2800      	cmp	r0, #0
 800540c:	d03f      	beq.n	800548e <_vfiprintf_r+0x20a>
 800540e:	4b26      	ldr	r3, [pc, #152]	@ (80054a8 <_vfiprintf_r+0x224>)
 8005410:	bb1b      	cbnz	r3, 800545a <_vfiprintf_r+0x1d6>
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	3307      	adds	r3, #7
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	3308      	adds	r3, #8
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005420:	443b      	add	r3, r7
 8005422:	9309      	str	r3, [sp, #36]	@ 0x24
 8005424:	e76a      	b.n	80052fc <_vfiprintf_r+0x78>
 8005426:	fb0c 3202 	mla	r2, ip, r2, r3
 800542a:	460c      	mov	r4, r1
 800542c:	2001      	movs	r0, #1
 800542e:	e7a8      	b.n	8005382 <_vfiprintf_r+0xfe>
 8005430:	2300      	movs	r3, #0
 8005432:	3401      	adds	r4, #1
 8005434:	9305      	str	r3, [sp, #20]
 8005436:	4619      	mov	r1, r3
 8005438:	f04f 0c0a 	mov.w	ip, #10
 800543c:	4620      	mov	r0, r4
 800543e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005442:	3a30      	subs	r2, #48	@ 0x30
 8005444:	2a09      	cmp	r2, #9
 8005446:	d903      	bls.n	8005450 <_vfiprintf_r+0x1cc>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0c6      	beq.n	80053da <_vfiprintf_r+0x156>
 800544c:	9105      	str	r1, [sp, #20]
 800544e:	e7c4      	b.n	80053da <_vfiprintf_r+0x156>
 8005450:	fb0c 2101 	mla	r1, ip, r1, r2
 8005454:	4604      	mov	r4, r0
 8005456:	2301      	movs	r3, #1
 8005458:	e7f0      	b.n	800543c <_vfiprintf_r+0x1b8>
 800545a:	ab03      	add	r3, sp, #12
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	462a      	mov	r2, r5
 8005460:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <_vfiprintf_r+0x228>)
 8005462:	a904      	add	r1, sp, #16
 8005464:	4630      	mov	r0, r6
 8005466:	f3af 8000 	nop.w
 800546a:	4607      	mov	r7, r0
 800546c:	1c78      	adds	r0, r7, #1
 800546e:	d1d6      	bne.n	800541e <_vfiprintf_r+0x19a>
 8005470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	d405      	bmi.n	8005482 <_vfiprintf_r+0x1fe>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	059a      	lsls	r2, r3, #22
 800547a:	d402      	bmi.n	8005482 <_vfiprintf_r+0x1fe>
 800547c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800547e:	f7ff fd33 	bl	8004ee8 <__retarget_lock_release_recursive>
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	065b      	lsls	r3, r3, #25
 8005486:	f53f af1f 	bmi.w	80052c8 <_vfiprintf_r+0x44>
 800548a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800548c:	e71e      	b.n	80052cc <_vfiprintf_r+0x48>
 800548e:	ab03      	add	r3, sp, #12
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	462a      	mov	r2, r5
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <_vfiprintf_r+0x228>)
 8005496:	a904      	add	r1, sp, #16
 8005498:	4630      	mov	r0, r6
 800549a:	f000 f879 	bl	8005590 <_printf_i>
 800549e:	e7e4      	b.n	800546a <_vfiprintf_r+0x1e6>
 80054a0:	08005f20 	.word	0x08005f20
 80054a4:	08005f2a 	.word	0x08005f2a
 80054a8:	00000000 	.word	0x00000000
 80054ac:	0800525f 	.word	0x0800525f
 80054b0:	08005f26 	.word	0x08005f26

080054b4 <_printf_common>:
 80054b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b8:	4616      	mov	r6, r2
 80054ba:	4698      	mov	r8, r3
 80054bc:	688a      	ldr	r2, [r1, #8]
 80054be:	690b      	ldr	r3, [r1, #16]
 80054c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	bfb8      	it	lt
 80054c8:	4613      	movlt	r3, r2
 80054ca:	6033      	str	r3, [r6, #0]
 80054cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054d0:	4607      	mov	r7, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	b10a      	cbz	r2, 80054da <_printf_common+0x26>
 80054d6:	3301      	adds	r3, #1
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	0699      	lsls	r1, r3, #26
 80054de:	bf42      	ittt	mi
 80054e0:	6833      	ldrmi	r3, [r6, #0]
 80054e2:	3302      	addmi	r3, #2
 80054e4:	6033      	strmi	r3, [r6, #0]
 80054e6:	6825      	ldr	r5, [r4, #0]
 80054e8:	f015 0506 	ands.w	r5, r5, #6
 80054ec:	d106      	bne.n	80054fc <_printf_common+0x48>
 80054ee:	f104 0a19 	add.w	sl, r4, #25
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	6832      	ldr	r2, [r6, #0]
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dc26      	bgt.n	800554a <_printf_common+0x96>
 80054fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	3b00      	subs	r3, #0
 8005504:	bf18      	it	ne
 8005506:	2301      	movne	r3, #1
 8005508:	0692      	lsls	r2, r2, #26
 800550a:	d42b      	bmi.n	8005564 <_printf_common+0xb0>
 800550c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005510:	4641      	mov	r1, r8
 8005512:	4638      	mov	r0, r7
 8005514:	47c8      	blx	r9
 8005516:	3001      	adds	r0, #1
 8005518:	d01e      	beq.n	8005558 <_printf_common+0xa4>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	6922      	ldr	r2, [r4, #16]
 800551e:	f003 0306 	and.w	r3, r3, #6
 8005522:	2b04      	cmp	r3, #4
 8005524:	bf02      	ittt	eq
 8005526:	68e5      	ldreq	r5, [r4, #12]
 8005528:	6833      	ldreq	r3, [r6, #0]
 800552a:	1aed      	subeq	r5, r5, r3
 800552c:	68a3      	ldr	r3, [r4, #8]
 800552e:	bf0c      	ite	eq
 8005530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005534:	2500      	movne	r5, #0
 8005536:	4293      	cmp	r3, r2
 8005538:	bfc4      	itt	gt
 800553a:	1a9b      	subgt	r3, r3, r2
 800553c:	18ed      	addgt	r5, r5, r3
 800553e:	2600      	movs	r6, #0
 8005540:	341a      	adds	r4, #26
 8005542:	42b5      	cmp	r5, r6
 8005544:	d11a      	bne.n	800557c <_printf_common+0xc8>
 8005546:	2000      	movs	r0, #0
 8005548:	e008      	b.n	800555c <_printf_common+0xa8>
 800554a:	2301      	movs	r3, #1
 800554c:	4652      	mov	r2, sl
 800554e:	4641      	mov	r1, r8
 8005550:	4638      	mov	r0, r7
 8005552:	47c8      	blx	r9
 8005554:	3001      	adds	r0, #1
 8005556:	d103      	bne.n	8005560 <_printf_common+0xac>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800555c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005560:	3501      	adds	r5, #1
 8005562:	e7c6      	b.n	80054f2 <_printf_common+0x3e>
 8005564:	18e1      	adds	r1, r4, r3
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	2030      	movs	r0, #48	@ 0x30
 800556a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800556e:	4422      	add	r2, r4
 8005570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005578:	3302      	adds	r3, #2
 800557a:	e7c7      	b.n	800550c <_printf_common+0x58>
 800557c:	2301      	movs	r3, #1
 800557e:	4622      	mov	r2, r4
 8005580:	4641      	mov	r1, r8
 8005582:	4638      	mov	r0, r7
 8005584:	47c8      	blx	r9
 8005586:	3001      	adds	r0, #1
 8005588:	d0e6      	beq.n	8005558 <_printf_common+0xa4>
 800558a:	3601      	adds	r6, #1
 800558c:	e7d9      	b.n	8005542 <_printf_common+0x8e>
	...

08005590 <_printf_i>:
 8005590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	7e0f      	ldrb	r7, [r1, #24]
 8005596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005598:	2f78      	cmp	r7, #120	@ 0x78
 800559a:	4691      	mov	r9, r2
 800559c:	4680      	mov	r8, r0
 800559e:	460c      	mov	r4, r1
 80055a0:	469a      	mov	sl, r3
 80055a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055a6:	d807      	bhi.n	80055b8 <_printf_i+0x28>
 80055a8:	2f62      	cmp	r7, #98	@ 0x62
 80055aa:	d80a      	bhi.n	80055c2 <_printf_i+0x32>
 80055ac:	2f00      	cmp	r7, #0
 80055ae:	f000 80d2 	beq.w	8005756 <_printf_i+0x1c6>
 80055b2:	2f58      	cmp	r7, #88	@ 0x58
 80055b4:	f000 80b9 	beq.w	800572a <_printf_i+0x19a>
 80055b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055c0:	e03a      	b.n	8005638 <_printf_i+0xa8>
 80055c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055c6:	2b15      	cmp	r3, #21
 80055c8:	d8f6      	bhi.n	80055b8 <_printf_i+0x28>
 80055ca:	a101      	add	r1, pc, #4	@ (adr r1, 80055d0 <_printf_i+0x40>)
 80055cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d0:	08005629 	.word	0x08005629
 80055d4:	0800563d 	.word	0x0800563d
 80055d8:	080055b9 	.word	0x080055b9
 80055dc:	080055b9 	.word	0x080055b9
 80055e0:	080055b9 	.word	0x080055b9
 80055e4:	080055b9 	.word	0x080055b9
 80055e8:	0800563d 	.word	0x0800563d
 80055ec:	080055b9 	.word	0x080055b9
 80055f0:	080055b9 	.word	0x080055b9
 80055f4:	080055b9 	.word	0x080055b9
 80055f8:	080055b9 	.word	0x080055b9
 80055fc:	0800573d 	.word	0x0800573d
 8005600:	08005667 	.word	0x08005667
 8005604:	080056f7 	.word	0x080056f7
 8005608:	080055b9 	.word	0x080055b9
 800560c:	080055b9 	.word	0x080055b9
 8005610:	0800575f 	.word	0x0800575f
 8005614:	080055b9 	.word	0x080055b9
 8005618:	08005667 	.word	0x08005667
 800561c:	080055b9 	.word	0x080055b9
 8005620:	080055b9 	.word	0x080055b9
 8005624:	080056ff 	.word	0x080056ff
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	1d1a      	adds	r2, r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6032      	str	r2, [r6, #0]
 8005630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005638:	2301      	movs	r3, #1
 800563a:	e09d      	b.n	8005778 <_printf_i+0x1e8>
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	1d19      	adds	r1, r3, #4
 8005642:	6031      	str	r1, [r6, #0]
 8005644:	0606      	lsls	r6, r0, #24
 8005646:	d501      	bpl.n	800564c <_printf_i+0xbc>
 8005648:	681d      	ldr	r5, [r3, #0]
 800564a:	e003      	b.n	8005654 <_printf_i+0xc4>
 800564c:	0645      	lsls	r5, r0, #25
 800564e:	d5fb      	bpl.n	8005648 <_printf_i+0xb8>
 8005650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005654:	2d00      	cmp	r5, #0
 8005656:	da03      	bge.n	8005660 <_printf_i+0xd0>
 8005658:	232d      	movs	r3, #45	@ 0x2d
 800565a:	426d      	negs	r5, r5
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005660:	4859      	ldr	r0, [pc, #356]	@ (80057c8 <_printf_i+0x238>)
 8005662:	230a      	movs	r3, #10
 8005664:	e011      	b.n	800568a <_printf_i+0xfa>
 8005666:	6821      	ldr	r1, [r4, #0]
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	0608      	lsls	r0, r1, #24
 800566c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005670:	d402      	bmi.n	8005678 <_printf_i+0xe8>
 8005672:	0649      	lsls	r1, r1, #25
 8005674:	bf48      	it	mi
 8005676:	b2ad      	uxthmi	r5, r5
 8005678:	2f6f      	cmp	r7, #111	@ 0x6f
 800567a:	4853      	ldr	r0, [pc, #332]	@ (80057c8 <_printf_i+0x238>)
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	bf14      	ite	ne
 8005680:	230a      	movne	r3, #10
 8005682:	2308      	moveq	r3, #8
 8005684:	2100      	movs	r1, #0
 8005686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800568a:	6866      	ldr	r6, [r4, #4]
 800568c:	60a6      	str	r6, [r4, #8]
 800568e:	2e00      	cmp	r6, #0
 8005690:	bfa2      	ittt	ge
 8005692:	6821      	ldrge	r1, [r4, #0]
 8005694:	f021 0104 	bicge.w	r1, r1, #4
 8005698:	6021      	strge	r1, [r4, #0]
 800569a:	b90d      	cbnz	r5, 80056a0 <_printf_i+0x110>
 800569c:	2e00      	cmp	r6, #0
 800569e:	d04b      	beq.n	8005738 <_printf_i+0x1a8>
 80056a0:	4616      	mov	r6, r2
 80056a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80056a6:	fb03 5711 	mls	r7, r3, r1, r5
 80056aa:	5dc7      	ldrb	r7, [r0, r7]
 80056ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b0:	462f      	mov	r7, r5
 80056b2:	42bb      	cmp	r3, r7
 80056b4:	460d      	mov	r5, r1
 80056b6:	d9f4      	bls.n	80056a2 <_printf_i+0x112>
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d10b      	bne.n	80056d4 <_printf_i+0x144>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07df      	lsls	r7, r3, #31
 80056c0:	d508      	bpl.n	80056d4 <_printf_i+0x144>
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	6861      	ldr	r1, [r4, #4]
 80056c6:	4299      	cmp	r1, r3
 80056c8:	bfde      	ittt	le
 80056ca:	2330      	movle	r3, #48	@ 0x30
 80056cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80056d4:	1b92      	subs	r2, r2, r6
 80056d6:	6122      	str	r2, [r4, #16]
 80056d8:	f8cd a000 	str.w	sl, [sp]
 80056dc:	464b      	mov	r3, r9
 80056de:	aa03      	add	r2, sp, #12
 80056e0:	4621      	mov	r1, r4
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff fee6 	bl	80054b4 <_printf_common>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d14a      	bne.n	8005782 <_printf_i+0x1f2>
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056f0:	b004      	add	sp, #16
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f043 0320 	orr.w	r3, r3, #32
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	4833      	ldr	r0, [pc, #204]	@ (80057cc <_printf_i+0x23c>)
 8005700:	2778      	movs	r7, #120	@ 0x78
 8005702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	6831      	ldr	r1, [r6, #0]
 800570a:	061f      	lsls	r7, r3, #24
 800570c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005710:	d402      	bmi.n	8005718 <_printf_i+0x188>
 8005712:	065f      	lsls	r7, r3, #25
 8005714:	bf48      	it	mi
 8005716:	b2ad      	uxthmi	r5, r5
 8005718:	6031      	str	r1, [r6, #0]
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	bf44      	itt	mi
 800571e:	f043 0320 	orrmi.w	r3, r3, #32
 8005722:	6023      	strmi	r3, [r4, #0]
 8005724:	b11d      	cbz	r5, 800572e <_printf_i+0x19e>
 8005726:	2310      	movs	r3, #16
 8005728:	e7ac      	b.n	8005684 <_printf_i+0xf4>
 800572a:	4827      	ldr	r0, [pc, #156]	@ (80057c8 <_printf_i+0x238>)
 800572c:	e7e9      	b.n	8005702 <_printf_i+0x172>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	f023 0320 	bic.w	r3, r3, #32
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	e7f6      	b.n	8005726 <_printf_i+0x196>
 8005738:	4616      	mov	r6, r2
 800573a:	e7bd      	b.n	80056b8 <_printf_i+0x128>
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	6961      	ldr	r1, [r4, #20]
 8005742:	1d18      	adds	r0, r3, #4
 8005744:	6030      	str	r0, [r6, #0]
 8005746:	062e      	lsls	r6, r5, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1c0>
 800574c:	6019      	str	r1, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1c6>
 8005750:	0668      	lsls	r0, r5, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1bc>
 8005754:	8019      	strh	r1, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4616      	mov	r6, r2
 800575c:	e7bc      	b.n	80056d8 <_printf_i+0x148>
 800575e:	6833      	ldr	r3, [r6, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	6032      	str	r2, [r6, #0]
 8005764:	681e      	ldr	r6, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4630      	mov	r0, r6
 800576c:	f7fa fd60 	bl	8000230 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1e6>
 8005772:	1b80      	subs	r0, r0, r6
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005780:	e7aa      	b.n	80056d8 <_printf_i+0x148>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	4632      	mov	r2, r6
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ad      	beq.n	80056ec <_printf_i+0x15c>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x22e>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a6      	b.n	80056f0 <_printf_i+0x160>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09d      	beq.n	80056ec <_printf_i+0x15c>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x212>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x206>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x222>
 80057c6:	bf00      	nop
 80057c8:	08005f31 	.word	0x08005f31
 80057cc:	08005f42 	.word	0x08005f42

080057d0 <__sflush_r>:
 80057d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d8:	0716      	lsls	r6, r2, #28
 80057da:	4605      	mov	r5, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	d454      	bmi.n	800588a <__sflush_r+0xba>
 80057e0:	684b      	ldr	r3, [r1, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dc02      	bgt.n	80057ec <__sflush_r+0x1c>
 80057e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dd48      	ble.n	800587e <__sflush_r+0xae>
 80057ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	d045      	beq.n	800587e <__sflush_r+0xae>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80057f8:	682f      	ldr	r7, [r5, #0]
 80057fa:	6a21      	ldr	r1, [r4, #32]
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	d030      	beq.n	8005862 <__sflush_r+0x92>
 8005800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	0759      	lsls	r1, r3, #29
 8005806:	d505      	bpl.n	8005814 <__sflush_r+0x44>
 8005808:	6863      	ldr	r3, [r4, #4]
 800580a:	1ad2      	subs	r2, r2, r3
 800580c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800580e:	b10b      	cbz	r3, 8005814 <__sflush_r+0x44>
 8005810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005818:	6a21      	ldr	r1, [r4, #32]
 800581a:	4628      	mov	r0, r5
 800581c:	47b0      	blx	r6
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	d106      	bne.n	8005832 <__sflush_r+0x62>
 8005824:	6829      	ldr	r1, [r5, #0]
 8005826:	291d      	cmp	r1, #29
 8005828:	d82b      	bhi.n	8005882 <__sflush_r+0xb2>
 800582a:	4a2a      	ldr	r2, [pc, #168]	@ (80058d4 <__sflush_r+0x104>)
 800582c:	410a      	asrs	r2, r1
 800582e:	07d6      	lsls	r6, r2, #31
 8005830:	d427      	bmi.n	8005882 <__sflush_r+0xb2>
 8005832:	2200      	movs	r2, #0
 8005834:	6062      	str	r2, [r4, #4]
 8005836:	04d9      	lsls	r1, r3, #19
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	d504      	bpl.n	8005848 <__sflush_r+0x78>
 800583e:	1c42      	adds	r2, r0, #1
 8005840:	d101      	bne.n	8005846 <__sflush_r+0x76>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	b903      	cbnz	r3, 8005848 <__sflush_r+0x78>
 8005846:	6560      	str	r0, [r4, #84]	@ 0x54
 8005848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800584a:	602f      	str	r7, [r5, #0]
 800584c:	b1b9      	cbz	r1, 800587e <__sflush_r+0xae>
 800584e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005852:	4299      	cmp	r1, r3
 8005854:	d002      	beq.n	800585c <__sflush_r+0x8c>
 8005856:	4628      	mov	r0, r5
 8005858:	f7ff fb48 	bl	8004eec <_free_r>
 800585c:	2300      	movs	r3, #0
 800585e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005860:	e00d      	b.n	800587e <__sflush_r+0xae>
 8005862:	2301      	movs	r3, #1
 8005864:	4628      	mov	r0, r5
 8005866:	47b0      	blx	r6
 8005868:	4602      	mov	r2, r0
 800586a:	1c50      	adds	r0, r2, #1
 800586c:	d1c9      	bne.n	8005802 <__sflush_r+0x32>
 800586e:	682b      	ldr	r3, [r5, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0c6      	beq.n	8005802 <__sflush_r+0x32>
 8005874:	2b1d      	cmp	r3, #29
 8005876:	d001      	beq.n	800587c <__sflush_r+0xac>
 8005878:	2b16      	cmp	r3, #22
 800587a:	d11e      	bne.n	80058ba <__sflush_r+0xea>
 800587c:	602f      	str	r7, [r5, #0]
 800587e:	2000      	movs	r0, #0
 8005880:	e022      	b.n	80058c8 <__sflush_r+0xf8>
 8005882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005886:	b21b      	sxth	r3, r3
 8005888:	e01b      	b.n	80058c2 <__sflush_r+0xf2>
 800588a:	690f      	ldr	r7, [r1, #16]
 800588c:	2f00      	cmp	r7, #0
 800588e:	d0f6      	beq.n	800587e <__sflush_r+0xae>
 8005890:	0793      	lsls	r3, r2, #30
 8005892:	680e      	ldr	r6, [r1, #0]
 8005894:	bf08      	it	eq
 8005896:	694b      	ldreq	r3, [r1, #20]
 8005898:	600f      	str	r7, [r1, #0]
 800589a:	bf18      	it	ne
 800589c:	2300      	movne	r3, #0
 800589e:	eba6 0807 	sub.w	r8, r6, r7
 80058a2:	608b      	str	r3, [r1, #8]
 80058a4:	f1b8 0f00 	cmp.w	r8, #0
 80058a8:	dde9      	ble.n	800587e <__sflush_r+0xae>
 80058aa:	6a21      	ldr	r1, [r4, #32]
 80058ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058ae:	4643      	mov	r3, r8
 80058b0:	463a      	mov	r2, r7
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b0      	blx	r6
 80058b6:	2800      	cmp	r0, #0
 80058b8:	dc08      	bgt.n	80058cc <__sflush_r+0xfc>
 80058ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058cc:	4407      	add	r7, r0
 80058ce:	eba8 0800 	sub.w	r8, r8, r0
 80058d2:	e7e7      	b.n	80058a4 <__sflush_r+0xd4>
 80058d4:	dfbffffe 	.word	0xdfbffffe

080058d8 <_fflush_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b913      	cbnz	r3, 80058e8 <_fflush_r+0x10>
 80058e2:	2500      	movs	r5, #0
 80058e4:	4628      	mov	r0, r5
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	b118      	cbz	r0, 80058f2 <_fflush_r+0x1a>
 80058ea:	6a03      	ldr	r3, [r0, #32]
 80058ec:	b90b      	cbnz	r3, 80058f2 <_fflush_r+0x1a>
 80058ee:	f7ff fa11 	bl	8004d14 <__sinit>
 80058f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f3      	beq.n	80058e2 <_fflush_r+0xa>
 80058fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058fc:	07d0      	lsls	r0, r2, #31
 80058fe:	d404      	bmi.n	800590a <_fflush_r+0x32>
 8005900:	0599      	lsls	r1, r3, #22
 8005902:	d402      	bmi.n	800590a <_fflush_r+0x32>
 8005904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005906:	f7ff faee 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 800590a:	4628      	mov	r0, r5
 800590c:	4621      	mov	r1, r4
 800590e:	f7ff ff5f 	bl	80057d0 <__sflush_r>
 8005912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005914:	07da      	lsls	r2, r3, #31
 8005916:	4605      	mov	r5, r0
 8005918:	d4e4      	bmi.n	80058e4 <_fflush_r+0xc>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	059b      	lsls	r3, r3, #22
 800591e:	d4e1      	bmi.n	80058e4 <_fflush_r+0xc>
 8005920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005922:	f7ff fae1 	bl	8004ee8 <__retarget_lock_release_recursive>
 8005926:	e7dd      	b.n	80058e4 <_fflush_r+0xc>

08005928 <__sread>:
 8005928:	b510      	push	{r4, lr}
 800592a:	460c      	mov	r4, r1
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	f000 f9c0 	bl	8005cb4 <_read_r>
 8005934:	2800      	cmp	r0, #0
 8005936:	bfab      	itete	ge
 8005938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800593a:	89a3      	ldrhlt	r3, [r4, #12]
 800593c:	181b      	addge	r3, r3, r0
 800593e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005942:	bfac      	ite	ge
 8005944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005946:	81a3      	strhlt	r3, [r4, #12]
 8005948:	bd10      	pop	{r4, pc}

0800594a <__swrite>:
 800594a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594e:	461f      	mov	r7, r3
 8005950:	898b      	ldrh	r3, [r1, #12]
 8005952:	05db      	lsls	r3, r3, #23
 8005954:	4605      	mov	r5, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4616      	mov	r6, r2
 800595a:	d505      	bpl.n	8005968 <__swrite+0x1e>
 800595c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005960:	2302      	movs	r3, #2
 8005962:	2200      	movs	r2, #0
 8005964:	f000 f994 	bl	8005c90 <_lseek_r>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800596e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	4632      	mov	r2, r6
 8005976:	463b      	mov	r3, r7
 8005978:	4628      	mov	r0, r5
 800597a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597e:	f000 b9ab 	b.w	8005cd8 <_write_r>

08005982 <__sseek>:
 8005982:	b510      	push	{r4, lr}
 8005984:	460c      	mov	r4, r1
 8005986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598a:	f000 f981 	bl	8005c90 <_lseek_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	bf15      	itete	ne
 8005994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800599a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800599e:	81a3      	strheq	r3, [r4, #12]
 80059a0:	bf18      	it	ne
 80059a2:	81a3      	strhne	r3, [r4, #12]
 80059a4:	bd10      	pop	{r4, pc}

080059a6 <__sclose>:
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 b93f 	b.w	8005c2c <_close_r>

080059ae <_realloc_r>:
 80059ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	4680      	mov	r8, r0
 80059b4:	4615      	mov	r5, r2
 80059b6:	460c      	mov	r4, r1
 80059b8:	b921      	cbnz	r1, 80059c4 <_realloc_r+0x16>
 80059ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	4611      	mov	r1, r2
 80059c0:	f7ff b870 	b.w	8004aa4 <_malloc_r>
 80059c4:	b92a      	cbnz	r2, 80059d2 <_realloc_r+0x24>
 80059c6:	f7ff fa91 	bl	8004eec <_free_r>
 80059ca:	2400      	movs	r4, #0
 80059cc:	4620      	mov	r0, r4
 80059ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d2:	f000 f9a1 	bl	8005d18 <_malloc_usable_size_r>
 80059d6:	4285      	cmp	r5, r0
 80059d8:	4606      	mov	r6, r0
 80059da:	d802      	bhi.n	80059e2 <_realloc_r+0x34>
 80059dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80059e0:	d8f4      	bhi.n	80059cc <_realloc_r+0x1e>
 80059e2:	4629      	mov	r1, r5
 80059e4:	4640      	mov	r0, r8
 80059e6:	f7ff f85d 	bl	8004aa4 <_malloc_r>
 80059ea:	4607      	mov	r7, r0
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d0ec      	beq.n	80059ca <_realloc_r+0x1c>
 80059f0:	42b5      	cmp	r5, r6
 80059f2:	462a      	mov	r2, r5
 80059f4:	4621      	mov	r1, r4
 80059f6:	bf28      	it	cs
 80059f8:	4632      	movcs	r2, r6
 80059fa:	f000 f97f 	bl	8005cfc <memcpy>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4640      	mov	r0, r8
 8005a02:	f7ff fa73 	bl	8004eec <_free_r>
 8005a06:	463c      	mov	r4, r7
 8005a08:	e7e0      	b.n	80059cc <_realloc_r+0x1e>

08005a0a <__swbuf_r>:
 8005a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	4614      	mov	r4, r2
 8005a10:	4605      	mov	r5, r0
 8005a12:	b118      	cbz	r0, 8005a1c <__swbuf_r+0x12>
 8005a14:	6a03      	ldr	r3, [r0, #32]
 8005a16:	b90b      	cbnz	r3, 8005a1c <__swbuf_r+0x12>
 8005a18:	f7ff f97c 	bl	8004d14 <__sinit>
 8005a1c:	69a3      	ldr	r3, [r4, #24]
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	071a      	lsls	r2, r3, #28
 8005a24:	d501      	bpl.n	8005a2a <__swbuf_r+0x20>
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	b943      	cbnz	r3, 8005a3c <__swbuf_r+0x32>
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f82b 	bl	8005a88 <__swsetup_r>
 8005a32:	b118      	cbz	r0, 8005a3c <__swbuf_r+0x32>
 8005a34:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a38:	4638      	mov	r0, r7
 8005a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	6922      	ldr	r2, [r4, #16]
 8005a40:	1a98      	subs	r0, r3, r2
 8005a42:	6963      	ldr	r3, [r4, #20]
 8005a44:	b2f6      	uxtb	r6, r6
 8005a46:	4283      	cmp	r3, r0
 8005a48:	4637      	mov	r7, r6
 8005a4a:	dc05      	bgt.n	8005a58 <__swbuf_r+0x4e>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f7ff ff42 	bl	80058d8 <_fflush_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d1ed      	bne.n	8005a34 <__swbuf_r+0x2a>
 8005a58:	68a3      	ldr	r3, [r4, #8]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	60a3      	str	r3, [r4, #8]
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	6022      	str	r2, [r4, #0]
 8005a64:	701e      	strb	r6, [r3, #0]
 8005a66:	6962      	ldr	r2, [r4, #20]
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d004      	beq.n	8005a78 <__swbuf_r+0x6e>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	07db      	lsls	r3, r3, #31
 8005a72:	d5e1      	bpl.n	8005a38 <__swbuf_r+0x2e>
 8005a74:	2e0a      	cmp	r6, #10
 8005a76:	d1df      	bne.n	8005a38 <__swbuf_r+0x2e>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7ff ff2c 	bl	80058d8 <_fflush_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d0d9      	beq.n	8005a38 <__swbuf_r+0x2e>
 8005a84:	e7d6      	b.n	8005a34 <__swbuf_r+0x2a>
	...

08005a88 <__swsetup_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4b29      	ldr	r3, [pc, #164]	@ (8005b30 <__swsetup_r+0xa8>)
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	460c      	mov	r4, r1
 8005a92:	b118      	cbz	r0, 8005a9c <__swsetup_r+0x14>
 8005a94:	6a03      	ldr	r3, [r0, #32]
 8005a96:	b90b      	cbnz	r3, 8005a9c <__swsetup_r+0x14>
 8005a98:	f7ff f93c 	bl	8004d14 <__sinit>
 8005a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa0:	0719      	lsls	r1, r3, #28
 8005aa2:	d422      	bmi.n	8005aea <__swsetup_r+0x62>
 8005aa4:	06da      	lsls	r2, r3, #27
 8005aa6:	d407      	bmi.n	8005ab8 <__swsetup_r+0x30>
 8005aa8:	2209      	movs	r2, #9
 8005aaa:	602a      	str	r2, [r5, #0]
 8005aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ab6:	e033      	b.n	8005b20 <__swsetup_r+0x98>
 8005ab8:	0758      	lsls	r0, r3, #29
 8005aba:	d512      	bpl.n	8005ae2 <__swsetup_r+0x5a>
 8005abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005abe:	b141      	cbz	r1, 8005ad2 <__swsetup_r+0x4a>
 8005ac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d002      	beq.n	8005ace <__swsetup_r+0x46>
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f7ff fa0f 	bl	8004eec <_free_r>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	2300      	movs	r3, #0
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	f043 0308 	orr.w	r3, r3, #8
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	b94b      	cbnz	r3, 8005b02 <__swsetup_r+0x7a>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af8:	d003      	beq.n	8005b02 <__swsetup_r+0x7a>
 8005afa:	4621      	mov	r1, r4
 8005afc:	4628      	mov	r0, r5
 8005afe:	f000 f83f 	bl	8005b80 <__smakebuf_r>
 8005b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b06:	f013 0201 	ands.w	r2, r3, #1
 8005b0a:	d00a      	beq.n	8005b22 <__swsetup_r+0x9a>
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	60a2      	str	r2, [r4, #8]
 8005b10:	6962      	ldr	r2, [r4, #20]
 8005b12:	4252      	negs	r2, r2
 8005b14:	61a2      	str	r2, [r4, #24]
 8005b16:	6922      	ldr	r2, [r4, #16]
 8005b18:	b942      	cbnz	r2, 8005b2c <__swsetup_r+0xa4>
 8005b1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b1e:	d1c5      	bne.n	8005aac <__swsetup_r+0x24>
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
 8005b22:	0799      	lsls	r1, r3, #30
 8005b24:	bf58      	it	pl
 8005b26:	6962      	ldrpl	r2, [r4, #20]
 8005b28:	60a2      	str	r2, [r4, #8]
 8005b2a:	e7f4      	b.n	8005b16 <__swsetup_r+0x8e>
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e7f7      	b.n	8005b20 <__swsetup_r+0x98>
 8005b30:	20000018 	.word	0x20000018

08005b34 <__swhatbuf_r>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	460c      	mov	r4, r1
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	b096      	sub	sp, #88	@ 0x58
 8005b40:	4615      	mov	r5, r2
 8005b42:	461e      	mov	r6, r3
 8005b44:	da0d      	bge.n	8005b62 <__swhatbuf_r+0x2e>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b4c:	f04f 0100 	mov.w	r1, #0
 8005b50:	bf14      	ite	ne
 8005b52:	2340      	movne	r3, #64	@ 0x40
 8005b54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b58:	2000      	movs	r0, #0
 8005b5a:	6031      	str	r1, [r6, #0]
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	b016      	add	sp, #88	@ 0x58
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	466a      	mov	r2, sp
 8005b64:	f000 f872 	bl	8005c4c <_fstat_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	dbec      	blt.n	8005b46 <__swhatbuf_r+0x12>
 8005b6c:	9901      	ldr	r1, [sp, #4]
 8005b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b76:	4259      	negs	r1, r3
 8005b78:	4159      	adcs	r1, r3
 8005b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b7e:	e7eb      	b.n	8005b58 <__swhatbuf_r+0x24>

08005b80 <__smakebuf_r>:
 8005b80:	898b      	ldrh	r3, [r1, #12]
 8005b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b84:	079d      	lsls	r5, r3, #30
 8005b86:	4606      	mov	r6, r0
 8005b88:	460c      	mov	r4, r1
 8005b8a:	d507      	bpl.n	8005b9c <__smakebuf_r+0x1c>
 8005b8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	6123      	str	r3, [r4, #16]
 8005b94:	2301      	movs	r3, #1
 8005b96:	6163      	str	r3, [r4, #20]
 8005b98:	b003      	add	sp, #12
 8005b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9c:	ab01      	add	r3, sp, #4
 8005b9e:	466a      	mov	r2, sp
 8005ba0:	f7ff ffc8 	bl	8005b34 <__swhatbuf_r>
 8005ba4:	9f00      	ldr	r7, [sp, #0]
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	4639      	mov	r1, r7
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7fe ff7a 	bl	8004aa4 <_malloc_r>
 8005bb0:	b948      	cbnz	r0, 8005bc6 <__smakebuf_r+0x46>
 8005bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb6:	059a      	lsls	r2, r3, #22
 8005bb8:	d4ee      	bmi.n	8005b98 <__smakebuf_r+0x18>
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	e7e2      	b.n	8005b8c <__smakebuf_r+0xc>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	6020      	str	r0, [r4, #0]
 8005bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bce:	81a3      	strh	r3, [r4, #12]
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bd6:	b15b      	cbz	r3, 8005bf0 <__smakebuf_r+0x70>
 8005bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f000 f847 	bl	8005c70 <_isatty_r>
 8005be2:	b128      	cbz	r0, 8005bf0 <__smakebuf_r+0x70>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	81a3      	strh	r3, [r4, #12]
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	431d      	orrs	r5, r3
 8005bf4:	81a5      	strh	r5, [r4, #12]
 8005bf6:	e7cf      	b.n	8005b98 <__smakebuf_r+0x18>

08005bf8 <memmove>:
 8005bf8:	4288      	cmp	r0, r1
 8005bfa:	b510      	push	{r4, lr}
 8005bfc:	eb01 0402 	add.w	r4, r1, r2
 8005c00:	d902      	bls.n	8005c08 <memmove+0x10>
 8005c02:	4284      	cmp	r4, r0
 8005c04:	4623      	mov	r3, r4
 8005c06:	d807      	bhi.n	8005c18 <memmove+0x20>
 8005c08:	1e43      	subs	r3, r0, #1
 8005c0a:	42a1      	cmp	r1, r4
 8005c0c:	d008      	beq.n	8005c20 <memmove+0x28>
 8005c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c16:	e7f8      	b.n	8005c0a <memmove+0x12>
 8005c18:	4402      	add	r2, r0
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	428a      	cmp	r2, r1
 8005c1e:	d100      	bne.n	8005c22 <memmove+0x2a>
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c2a:	e7f7      	b.n	8005c1c <memmove+0x24>

08005c2c <_close_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d06      	ldr	r5, [pc, #24]	@ (8005c48 <_close_r+0x1c>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	f7fb fa49 	bl	80010ce <_close>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d102      	bne.n	8005c46 <_close_r+0x1a>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	b103      	cbz	r3, 8005c46 <_close_r+0x1a>
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	200002f8 	.word	0x200002f8

08005c4c <_fstat_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d07      	ldr	r5, [pc, #28]	@ (8005c6c <_fstat_r+0x20>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	f7fb fa44 	bl	80010e6 <_fstat>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d102      	bne.n	8005c68 <_fstat_r+0x1c>
 8005c62:	682b      	ldr	r3, [r5, #0]
 8005c64:	b103      	cbz	r3, 8005c68 <_fstat_r+0x1c>
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	bd38      	pop	{r3, r4, r5, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200002f8 	.word	0x200002f8

08005c70 <_isatty_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4d06      	ldr	r5, [pc, #24]	@ (8005c8c <_isatty_r+0x1c>)
 8005c74:	2300      	movs	r3, #0
 8005c76:	4604      	mov	r4, r0
 8005c78:	4608      	mov	r0, r1
 8005c7a:	602b      	str	r3, [r5, #0]
 8005c7c:	f7fb fa43 	bl	8001106 <_isatty>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_isatty_r+0x1a>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_isatty_r+0x1a>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	200002f8 	.word	0x200002f8

08005c90 <_lseek_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4d07      	ldr	r5, [pc, #28]	@ (8005cb0 <_lseek_r+0x20>)
 8005c94:	4604      	mov	r4, r0
 8005c96:	4608      	mov	r0, r1
 8005c98:	4611      	mov	r1, r2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	602a      	str	r2, [r5, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f7fb fa3c 	bl	800111c <_lseek>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_lseek_r+0x1e>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_lseek_r+0x1e>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200002f8 	.word	0x200002f8

08005cb4 <_read_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d07      	ldr	r5, [pc, #28]	@ (8005cd4 <_read_r+0x20>)
 8005cb8:	4604      	mov	r4, r0
 8005cba:	4608      	mov	r0, r1
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	602a      	str	r2, [r5, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f7fb f9ca 	bl	800105c <_read>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_read_r+0x1e>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_read_r+0x1e>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	200002f8 	.word	0x200002f8

08005cd8 <_write_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d07      	ldr	r5, [pc, #28]	@ (8005cf8 <_write_r+0x20>)
 8005cdc:	4604      	mov	r4, r0
 8005cde:	4608      	mov	r0, r1
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fb f9d5 	bl	8001096 <_write>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_write_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_write_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	200002f8 	.word	0x200002f8

08005cfc <memcpy>:
 8005cfc:	440a      	add	r2, r1
 8005cfe:	4291      	cmp	r1, r2
 8005d00:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005d04:	d100      	bne.n	8005d08 <memcpy+0xc>
 8005d06:	4770      	bx	lr
 8005d08:	b510      	push	{r4, lr}
 8005d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d12:	4291      	cmp	r1, r2
 8005d14:	d1f9      	bne.n	8005d0a <memcpy+0xe>
 8005d16:	bd10      	pop	{r4, pc}

08005d18 <_malloc_usable_size_r>:
 8005d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d1c:	1f18      	subs	r0, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bfbc      	itt	lt
 8005d22:	580b      	ldrlt	r3, [r1, r0]
 8005d24:	18c0      	addlt	r0, r0, r3
 8005d26:	4770      	bx	lr

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
