
Tp_capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006250  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006420  08006420  00007420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006670  08006670  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006670  08006670  00007670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006678  08006678  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800667c  0800667c  0000767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006680  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000068  080066e8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080066e8  00008300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f36a  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002919  00000000  00000000  00017402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00019d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f3  00000000  00000000  0001aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023769  00000000  00000000  0001b3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f65  00000000  00000000  0003eb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf907  00000000  00000000  00050ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001203d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  00120414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00124284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006408 	.word	0x08006408

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006408 	.word	0x08006408

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_ldivmod>:
 80002d0:	b97b      	cbnz	r3, 80002f2 <__aeabi_ldivmod+0x22>
 80002d2:	b972      	cbnz	r2, 80002f2 <__aeabi_ldivmod+0x22>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bfbe      	ittt	lt
 80002d8:	2000      	movlt	r0, #0
 80002da:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002de:	e006      	blt.n	80002ee <__aeabi_ldivmod+0x1e>
 80002e0:	bf08      	it	eq
 80002e2:	2800      	cmpeq	r0, #0
 80002e4:	bf1c      	itt	ne
 80002e6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ea:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ee:	f000 b9b5 	b.w	800065c <__aeabi_idiv0>
 80002f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002fa:	2900      	cmp	r1, #0
 80002fc:	db09      	blt.n	8000312 <__aeabi_ldivmod+0x42>
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db1a      	blt.n	8000338 <__aeabi_ldivmod+0x68>
 8000302:	f000 f84d 	bl	80003a0 <__udivmoddi4>
 8000306:	f8dd e004 	ldr.w	lr, [sp, #4]
 800030a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030e:	b004      	add	sp, #16
 8000310:	4770      	bx	lr
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	db1b      	blt.n	8000354 <__aeabi_ldivmod+0x84>
 800031c:	f000 f840 	bl	80003a0 <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	4252      	negs	r2, r2
 8000332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000336:	4770      	bx	lr
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	f000 f82f 	bl	80003a0 <__udivmoddi4>
 8000342:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034a:	b004      	add	sp, #16
 800034c:	4240      	negs	r0, r0
 800034e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000352:	4770      	bx	lr
 8000354:	4252      	negs	r2, r2
 8000356:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035a:	f000 f821 	bl	80003a0 <__udivmoddi4>
 800035e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000366:	b004      	add	sp, #16
 8000368:	4252      	negs	r2, r2
 800036a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036e:	4770      	bx	lr

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000384:	f000 b96a 	b.w	800065c <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	460c      	mov	r4, r1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d14e      	bne.n	800044a <__udivmoddi4+0xaa>
 80003ac:	4694      	mov	ip, r2
 80003ae:	458c      	cmp	ip, r1
 80003b0:	4686      	mov	lr, r0
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	d962      	bls.n	800047e <__udivmoddi4+0xde>
 80003b8:	b14a      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003ba:	f1c2 0320 	rsb	r3, r2, #32
 80003be:	4091      	lsls	r1, r2
 80003c0:	fa20 f303 	lsr.w	r3, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	4319      	orrs	r1, r3
 80003ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f f68c 	uxth.w	r6, ip
 80003d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb07 1114 	mls	r1, r7, r4, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb04 f106 	mul.w	r1, r4, r6
 80003ea:	4299      	cmp	r1, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x64>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003f6:	f080 8112 	bcs.w	800061e <__udivmoddi4+0x27e>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 810f 	bls.w	800061e <__udivmoddi4+0x27e>
 8000400:	3c02      	subs	r4, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb1 f0f7 	udiv	r0, r1, r7
 800040e:	fb07 1110 	mls	r1, r7, r0, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb00 f606 	mul.w	r6, r0, r6
 800041a:	429e      	cmp	r6, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x94>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000426:	f080 80fc 	bcs.w	8000622 <__udivmoddi4+0x282>
 800042a:	429e      	cmp	r6, r3
 800042c:	f240 80f9 	bls.w	8000622 <__udivmoddi4+0x282>
 8000430:	4463      	add	r3, ip
 8000432:	3802      	subs	r0, #2
 8000434:	1b9b      	subs	r3, r3, r6
 8000436:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043a:	2100      	movs	r1, #0
 800043c:	b11d      	cbz	r5, 8000446 <__udivmoddi4+0xa6>
 800043e:	40d3      	lsrs	r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	e9c5 3200 	strd	r3, r2, [r5]
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	428b      	cmp	r3, r1
 800044c:	d905      	bls.n	800045a <__udivmoddi4+0xba>
 800044e:	b10d      	cbz	r5, 8000454 <__udivmoddi4+0xb4>
 8000450:	e9c5 0100 	strd	r0, r1, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	4608      	mov	r0, r1
 8000458:	e7f5      	b.n	8000446 <__udivmoddi4+0xa6>
 800045a:	fab3 f183 	clz	r1, r3
 800045e:	2900      	cmp	r1, #0
 8000460:	d146      	bne.n	80004f0 <__udivmoddi4+0x150>
 8000462:	42a3      	cmp	r3, r4
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0xcc>
 8000466:	4290      	cmp	r0, r2
 8000468:	f0c0 80f0 	bcc.w	800064c <__udivmoddi4+0x2ac>
 800046c:	1a86      	subs	r6, r0, r2
 800046e:	eb64 0303 	sbc.w	r3, r4, r3
 8000472:	2001      	movs	r0, #1
 8000474:	2d00      	cmp	r5, #0
 8000476:	d0e6      	beq.n	8000446 <__udivmoddi4+0xa6>
 8000478:	e9c5 6300 	strd	r6, r3, [r5]
 800047c:	e7e3      	b.n	8000446 <__udivmoddi4+0xa6>
 800047e:	2a00      	cmp	r2, #0
 8000480:	f040 8090 	bne.w	80005a4 <__udivmoddi4+0x204>
 8000484:	eba1 040c 	sub.w	r4, r1, ip
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa1f f78c 	uxth.w	r7, ip
 8000490:	2101      	movs	r1, #1
 8000492:	fbb4 f6f8 	udiv	r6, r4, r8
 8000496:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800049a:	fb08 4416 	mls	r4, r8, r6, r4
 800049e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004a2:	fb07 f006 	mul.w	r0, r7, r6
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x11c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x11a>
 80004b4:	4298      	cmp	r0, r3
 80004b6:	f200 80cd 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 80004ba:	4626      	mov	r6, r4
 80004bc:	1a1c      	subs	r4, r3, r0
 80004be:	fa1f f38e 	uxth.w	r3, lr
 80004c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004c6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ce:	fb00 f707 	mul.w	r7, r0, r7
 80004d2:	429f      	cmp	r7, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x148>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004de:	d202      	bcs.n	80004e6 <__udivmoddi4+0x146>
 80004e0:	429f      	cmp	r7, r3
 80004e2:	f200 80b0 	bhi.w	8000646 <__udivmoddi4+0x2a6>
 80004e6:	4620      	mov	r0, r4
 80004e8:	1bdb      	subs	r3, r3, r7
 80004ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ee:	e7a5      	b.n	800043c <__udivmoddi4+0x9c>
 80004f0:	f1c1 0620 	rsb	r6, r1, #32
 80004f4:	408b      	lsls	r3, r1
 80004f6:	fa22 f706 	lsr.w	r7, r2, r6
 80004fa:	431f      	orrs	r7, r3
 80004fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000500:	fa04 f301 	lsl.w	r3, r4, r1
 8000504:	ea43 030c 	orr.w	r3, r3, ip
 8000508:	40f4      	lsrs	r4, r6
 800050a:	fa00 f801 	lsl.w	r8, r0, r1
 800050e:	0c38      	lsrs	r0, r7, #16
 8000510:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000514:	fbb4 fef0 	udiv	lr, r4, r0
 8000518:	fa1f fc87 	uxth.w	ip, r7
 800051c:	fb00 441e 	mls	r4, r0, lr, r4
 8000520:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000524:	fb0e f90c 	mul.w	r9, lr, ip
 8000528:	45a1      	cmp	r9, r4
 800052a:	fa02 f201 	lsl.w	r2, r2, r1
 800052e:	d90a      	bls.n	8000546 <__udivmoddi4+0x1a6>
 8000530:	193c      	adds	r4, r7, r4
 8000532:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000536:	f080 8084 	bcs.w	8000642 <__udivmoddi4+0x2a2>
 800053a:	45a1      	cmp	r9, r4
 800053c:	f240 8081 	bls.w	8000642 <__udivmoddi4+0x2a2>
 8000540:	f1ae 0e02 	sub.w	lr, lr, #2
 8000544:	443c      	add	r4, r7
 8000546:	eba4 0409 	sub.w	r4, r4, r9
 800054a:	fa1f f983 	uxth.w	r9, r3
 800054e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000552:	fb00 4413 	mls	r4, r0, r3, r4
 8000556:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800055a:	fb03 fc0c 	mul.w	ip, r3, ip
 800055e:	45a4      	cmp	ip, r4
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x1d2>
 8000562:	193c      	adds	r4, r7, r4
 8000564:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000568:	d267      	bcs.n	800063a <__udivmoddi4+0x29a>
 800056a:	45a4      	cmp	ip, r4
 800056c:	d965      	bls.n	800063a <__udivmoddi4+0x29a>
 800056e:	3b02      	subs	r3, #2
 8000570:	443c      	add	r4, r7
 8000572:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000576:	fba0 9302 	umull	r9, r3, r0, r2
 800057a:	eba4 040c 	sub.w	r4, r4, ip
 800057e:	429c      	cmp	r4, r3
 8000580:	46ce      	mov	lr, r9
 8000582:	469c      	mov	ip, r3
 8000584:	d351      	bcc.n	800062a <__udivmoddi4+0x28a>
 8000586:	d04e      	beq.n	8000626 <__udivmoddi4+0x286>
 8000588:	b155      	cbz	r5, 80005a0 <__udivmoddi4+0x200>
 800058a:	ebb8 030e 	subs.w	r3, r8, lr
 800058e:	eb64 040c 	sbc.w	r4, r4, ip
 8000592:	fa04 f606 	lsl.w	r6, r4, r6
 8000596:	40cb      	lsrs	r3, r1
 8000598:	431e      	orrs	r6, r3
 800059a:	40cc      	lsrs	r4, r1
 800059c:	e9c5 6400 	strd	r6, r4, [r5]
 80005a0:	2100      	movs	r1, #0
 80005a2:	e750      	b.n	8000446 <__udivmoddi4+0xa6>
 80005a4:	f1c2 0320 	rsb	r3, r2, #32
 80005a8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b0:	fa24 f303 	lsr.w	r3, r4, r3
 80005b4:	4094      	lsls	r4, r2
 80005b6:	430c      	orrs	r4, r1
 80005b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005c0:	fa1f f78c 	uxth.w	r7, ip
 80005c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005c8:	fb08 3110 	mls	r1, r8, r0, r3
 80005cc:	0c23      	lsrs	r3, r4, #16
 80005ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005d2:	fb00 f107 	mul.w	r1, r0, r7
 80005d6:	4299      	cmp	r1, r3
 80005d8:	d908      	bls.n	80005ec <__udivmoddi4+0x24c>
 80005da:	eb1c 0303 	adds.w	r3, ip, r3
 80005de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005e2:	d22c      	bcs.n	800063e <__udivmoddi4+0x29e>
 80005e4:	4299      	cmp	r1, r3
 80005e6:	d92a      	bls.n	800063e <__udivmoddi4+0x29e>
 80005e8:	3802      	subs	r0, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	1a5b      	subs	r3, r3, r1
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005f4:	fb08 3311 	mls	r3, r8, r1, r3
 80005f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005fc:	fb01 f307 	mul.w	r3, r1, r7
 8000600:	42a3      	cmp	r3, r4
 8000602:	d908      	bls.n	8000616 <__udivmoddi4+0x276>
 8000604:	eb1c 0404 	adds.w	r4, ip, r4
 8000608:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800060c:	d213      	bcs.n	8000636 <__udivmoddi4+0x296>
 800060e:	42a3      	cmp	r3, r4
 8000610:	d911      	bls.n	8000636 <__udivmoddi4+0x296>
 8000612:	3902      	subs	r1, #2
 8000614:	4464      	add	r4, ip
 8000616:	1ae4      	subs	r4, r4, r3
 8000618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800061c:	e739      	b.n	8000492 <__udivmoddi4+0xf2>
 800061e:	4604      	mov	r4, r0
 8000620:	e6f0      	b.n	8000404 <__udivmoddi4+0x64>
 8000622:	4608      	mov	r0, r1
 8000624:	e706      	b.n	8000434 <__udivmoddi4+0x94>
 8000626:	45c8      	cmp	r8, r9
 8000628:	d2ae      	bcs.n	8000588 <__udivmoddi4+0x1e8>
 800062a:	ebb9 0e02 	subs.w	lr, r9, r2
 800062e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000632:	3801      	subs	r0, #1
 8000634:	e7a8      	b.n	8000588 <__udivmoddi4+0x1e8>
 8000636:	4631      	mov	r1, r6
 8000638:	e7ed      	b.n	8000616 <__udivmoddi4+0x276>
 800063a:	4603      	mov	r3, r0
 800063c:	e799      	b.n	8000572 <__udivmoddi4+0x1d2>
 800063e:	4630      	mov	r0, r6
 8000640:	e7d4      	b.n	80005ec <__udivmoddi4+0x24c>
 8000642:	46d6      	mov	lr, sl
 8000644:	e77f      	b.n	8000546 <__udivmoddi4+0x1a6>
 8000646:	4463      	add	r3, ip
 8000648:	3802      	subs	r0, #2
 800064a:	e74d      	b.n	80004e8 <__udivmoddi4+0x148>
 800064c:	4606      	mov	r6, r0
 800064e:	4623      	mov	r3, r4
 8000650:	4608      	mov	r0, r1
 8000652:	e70f      	b.n	8000474 <__udivmoddi4+0xd4>
 8000654:	3e02      	subs	r6, #2
 8000656:	4463      	add	r3, ip
 8000658:	e730      	b.n	80004bc <__udivmoddi4+0x11c>
 800065a:	bf00      	nop

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 8000666:	23d0      	movs	r3, #208	@ 0xd0
 8000668:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800066a:	23ee      	movs	r3, #238	@ 0xee
 800066c:	4619      	mov	r1, r3
 800066e:	1d3a      	adds	r2, r7, #4
 8000670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <BMP280_check+0x84>)
 800067a:	f002 f81b 	bl	80026b4 <HAL_I2C_Master_Transmit>
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8000688:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <BMP280_check+0x88>)
 800068a:	f004 ff51 	bl	8005530 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 800068e:	23ee      	movs	r3, #238	@ 0xee
 8000690:	4619      	mov	r1, r3
 8000692:	2301      	movs	r3, #1
 8000694:	4618      	mov	r0, r3
 8000696:	1d3a      	adds	r2, r7, #4
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	4603      	mov	r3, r0
 80006a0:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <BMP280_check+0x84>)
 80006a2:	f002 f905 	bl	80028b0 <HAL_I2C_Master_Receive>
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <BMP280_check+0x56>
		printf("Problem with check (I2C Receive) \r\n");
 80006b0:	480e      	ldr	r0, [pc, #56]	@ (80006ec <BMP280_check+0x8c>)
 80006b2:	f004 ff3d 	bl	8005530 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80006b6:	793b      	ldrb	r3, [r7, #4]
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <BMP280_check+0x90>)
 80006bc:	f004 fed0 	bl	8005460 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 80006c0:	793b      	ldrb	r3, [r7, #4]
 80006c2:	2258      	movs	r2, #88	@ 0x58
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d104      	bne.n	80006d2 <BMP280_check+0x72>
		printf("Ok\r\n");
 80006c8:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <BMP280_check+0x94>)
 80006ca:	f004 ff31 	bl	8005530 <puts>
		return 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e003      	b.n	80006da <BMP280_check+0x7a>
	} else {
		printf("not Ok!\r\n");
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <BMP280_check+0x98>)
 80006d4:	f004 ff2c 	bl	8005530 <puts>
		return 1;
 80006d8:	2301      	movs	r3, #1
	}
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000c8 	.word	0x200000c8
 80006e8:	08006420 	.word	0x08006420
 80006ec:	08006444 	.word	0x08006444
 80006f0:	08006468 	.word	0x08006468
 80006f4:	08006474 	.word	0x08006474
 80006f8:	08006478 	.word	0x08006478

080006fc <get_coef_temperature>:


uint8_t get_coef_temperature(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af02      	add	r7, sp, #8
	uint8_t coeff_TEMP[3*2];
	uint8_t reg_trimming_TEMP=0x88;
 8000702:	2388      	movs	r3, #136	@ 0x88
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_TEMP, 1,1000);
 8000706:	23ee      	movs	r3, #238	@ 0xee
 8000708:	4619      	mov	r1, r3
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	4817      	ldr	r0, [pc, #92]	@ (8000774 <get_coef_temperature+0x78>)
 8000716:	f001 ffcd 	bl	80026b4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(BMP280_ADDR), coeff_TEMP, 3*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 800071a:	23ee      	movs	r3, #238	@ 0xee
 800071c:	4619      	mov	r1, r3
 800071e:	f107 0208 	add.w	r2, r7, #8
 8000722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2306      	movs	r3, #6
 800072a:	4812      	ldr	r0, [pc, #72]	@ (8000774 <get_coef_temperature+0x78>)
 800072c:	f002 f8c0 	bl	80028b0 <HAL_I2C_Master_Receive>

	dig_T1 = coeff_TEMP[0];
 8000730:	7a3b      	ldrb	r3, [r7, #8]
 8000732:	461a      	mov	r2, r3
 8000734:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <get_coef_temperature+0x7c>)
 8000736:	801a      	strh	r2, [r3, #0]
	dig_T2 = coeff_TEMP[1];
 8000738:	7a7b      	ldrb	r3, [r7, #9]
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <get_coef_temperature+0x80>)
 800073e:	801a      	strh	r2, [r3, #0]
	dig_T3 = coeff_TEMP[3];
 8000740:	7afb      	ldrb	r3, [r7, #11]
 8000742:	b21a      	sxth	r2, r3
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_coef_temperature+0x84>)
 8000746:	801a      	strh	r2, [r3, #0]
	printf("temperature coefficient: %d, %d, %d \r\n", dig_T1, dig_T2, dig_T3);
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <get_coef_temperature+0x7c>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <get_coef_temperature+0x80>)
 8000750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000754:	461a      	mov	r2, r3
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <get_coef_temperature+0x84>)
 8000758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075c:	4809      	ldr	r0, [pc, #36]	@ (8000784 <get_coef_temperature+0x88>)
 800075e:	f004 fe7f 	bl	8005460 <iprintf>
	return dig_T1, dig_T2, dig_T3;
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <get_coef_temperature+0x84>)
 8000764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000768:	b2db      	uxtb	r3, r3
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000c8 	.word	0x200000c8
 8000778:	20000084 	.word	0x20000084
 800077c:	20000086 	.word	0x20000086
 8000780:	20000088 	.word	0x20000088
 8000784:	08006484 	.word	0x08006484

08000788 <get_coef_pressure>:

uint8_t get_coef_pressure(){
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	b08d      	sub	sp, #52	@ 0x34
 800078c:	af06      	add	r7, sp, #24
	uint8_t coeff_PRESS[9*2];
	uint8_t reg_trimming_PRESS=0x8E;
 800078e:	238e      	movs	r3, #142	@ 0x8e
 8000790:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit( &hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_PRESS, 1,1000);
 8000792:	23ee      	movs	r3, #238	@ 0xee
 8000794:	4619      	mov	r1, r3
 8000796:	1cfa      	adds	r2, r7, #3
 8000798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	4833      	ldr	r0, [pc, #204]	@ (8000870 <get_coef_pressure+0xe8>)
 80007a2:	f001 ff87 	bl	80026b4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1,(uint16_t)(BMP280_ADDR), coeff_PRESS, 9*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 80007a6:	23ee      	movs	r3, #238	@ 0xee
 80007a8:	4619      	mov	r1, r3
 80007aa:	1d3a      	adds	r2, r7, #4
 80007ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2312      	movs	r3, #18
 80007b4:	482e      	ldr	r0, [pc, #184]	@ (8000870 <get_coef_pressure+0xe8>)
 80007b6:	f002 f87b 	bl	80028b0 <HAL_I2C_Master_Receive>

	dig_P1 =coeff_PRESS[0];
 80007ba:	793b      	ldrb	r3, [r7, #4]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <get_coef_pressure+0xec>)
 80007c0:	801a      	strh	r2, [r3, #0]
	dig_P2 =coeff_PRESS[1];
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <get_coef_pressure+0xf0>)
 80007c8:	801a      	strh	r2, [r3, #0]
	dig_P3 =coeff_PRESS[2];
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <get_coef_pressure+0xf4>)
 80007d0:	801a      	strh	r2, [r3, #0]
	dig_P4 =coeff_PRESS[3];
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <get_coef_pressure+0xf8>)
 80007d8:	801a      	strh	r2, [r3, #0]
	dig_P5 =coeff_PRESS[4];
 80007da:	7a3b      	ldrb	r3, [r7, #8]
 80007dc:	b21a      	sxth	r2, r3
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <get_coef_pressure+0xfc>)
 80007e0:	801a      	strh	r2, [r3, #0]
	dig_P6 =coeff_PRESS[5];
 80007e2:	7a7b      	ldrb	r3, [r7, #9]
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <get_coef_pressure+0x100>)
 80007e8:	801a      	strh	r2, [r3, #0]
	dig_P7 =coeff_PRESS[6];
 80007ea:	7abb      	ldrb	r3, [r7, #10]
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <get_coef_pressure+0x104>)
 80007f0:	801a      	strh	r2, [r3, #0]
	dig_P8 =coeff_PRESS[7];
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <get_coef_pressure+0x108>)
 80007f8:	801a      	strh	r2, [r3, #0]
	dig_P9 =coeff_PRESS[8];
 80007fa:	7b3b      	ldrb	r3, [r7, #12]
 80007fc:	b21a      	sxth	r2, r3
 80007fe:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <get_coef_pressure+0x10c>)
 8000800:	801a      	strh	r2, [r3, #0]

	printf("pressure coefficient: %d, %d, %d, %d,%d,%d,%d, %d,%d \r\n", dig_P1, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9);
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <get_coef_pressure+0xec>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	461e      	mov	r6, r3
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <get_coef_pressure+0xf0>)
 800080a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800080e:	469c      	mov	ip, r3
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <get_coef_pressure+0xf4>)
 8000812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000816:	469e      	mov	lr, r3
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <get_coef_pressure+0xf8>)
 800081a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800081e:	461a      	mov	r2, r3
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <get_coef_pressure+0xfc>)
 8000822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000826:	4619      	mov	r1, r3
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <get_coef_pressure+0x100>)
 800082a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800082e:	4618      	mov	r0, r3
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <get_coef_pressure+0x104>)
 8000832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000836:	461c      	mov	r4, r3
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <get_coef_pressure+0x108>)
 800083a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083e:	461d      	mov	r5, r3
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <get_coef_pressure+0x10c>)
 8000842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000846:	9305      	str	r3, [sp, #20]
 8000848:	9504      	str	r5, [sp, #16]
 800084a:	9403      	str	r4, [sp, #12]
 800084c:	9002      	str	r0, [sp, #8]
 800084e:	9101      	str	r1, [sp, #4]
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	4673      	mov	r3, lr
 8000854:	4662      	mov	r2, ip
 8000856:	4631      	mov	r1, r6
 8000858:	480f      	ldr	r0, [pc, #60]	@ (8000898 <get_coef_pressure+0x110>)
 800085a:	f004 fe01 	bl	8005460 <iprintf>

	return dig_P1, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <get_coef_pressure+0x10c>)
 8000860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000864:	b2db      	uxtb	r3, r3

}
 8000866:	4618      	mov	r0, r3
 8000868:	371c      	adds	r7, #28
 800086a:	46bd      	mov	sp, r7
 800086c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086e:	bf00      	nop
 8000870:	200000c8 	.word	0x200000c8
 8000874:	2000008a 	.word	0x2000008a
 8000878:	2000008c 	.word	0x2000008c
 800087c:	2000008e 	.word	0x2000008e
 8000880:	20000090 	.word	0x20000090
 8000884:	20000092 	.word	0x20000092
 8000888:	20000094 	.word	0x20000094
 800088c:	20000096 	.word	0x20000096
 8000890:	20000098 	.word	0x20000098
 8000894:	2000009a 	.word	0x2000009a
 8000898:	080064ac 	.word	0x080064ac

0800089c <BMP280_init>:


int BMP280_init() {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 80008a2:	2357      	movs	r3, #87	@ 0x57
 80008a4:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 80008a6:	480f      	ldr	r0, [pc, #60]	@ (80008e4 <BMP280_init+0x48>)
 80008a8:	f004 fe42 	bl	8005530 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 80008ac:	22f4      	movs	r2, #244	@ 0xf4
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4610      	mov	r0, r2
 80008b4:	f000 f81c 	bl	80008f0 <BMP280_Write_Reg>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d108      	bne.n	80008d4 <BMP280_init+0x38>
		printf("Config Ok\r\n");
 80008c2:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <BMP280_init+0x4c>)
 80008c4:	f004 fe34 	bl	8005530 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	get_coef_pressure();
 80008c8:	f7ff ff5e 	bl	8000788 <get_coef_pressure>
	get_coef_temperature();
 80008cc:	f7ff ff16 	bl	80006fc <get_coef_temperature>
	return 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	e003      	b.n	80008dc <BMP280_init+0x40>
		printf("Config not Ok!\r\n");
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <BMP280_init+0x50>)
 80008d6:	f004 fe2b 	bl	8005530 <puts>
		return 1;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	080064e4 	.word	0x080064e4
 80008e8:	080064f4 	.word	0x080064f4
 80008ec:	08006500 	.word	0x08006500

080008f0 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000908:	23ee      	movs	r3, #238	@ 0xee
 800090a:	4619      	mov	r1, r3
 800090c:	f107 020c 	add.w	r2, r7, #12
 8000910:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	4814      	ldr	r0, [pc, #80]	@ (800096c <BMP280_Write_Reg+0x7c>)
 800091a:	f001 fecb 	bl	80026b4 <HAL_I2C_Master_Transmit>
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <BMP280_Write_Reg+0x3e>
		printf("xErreur with I2C Transmit\r\n");
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <BMP280_Write_Reg+0x80>)
 800092a:	f004 fe01 	bl	8005530 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800092e:	23ee      	movs	r3, #238	@ 0xee
 8000930:	4619      	mov	r1, r3
 8000932:	f107 020c 	add.w	r2, r7, #12
 8000936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	480b      	ldr	r0, [pc, #44]	@ (800096c <BMP280_Write_Reg+0x7c>)
 8000940:	f001 ffb6 	bl	80028b0 <HAL_I2C_Master_Receive>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <BMP280_Write_Reg+0x64>
		printf("xErreur with I2C Receive\r\n");
 800094e:	4809      	ldr	r0, [pc, #36]	@ (8000974 <BMP280_Write_Reg+0x84>)
 8000950:	f004 fdee 	bl	8005530 <puts>
	}

	if (buf[0] == value) {
 8000954:	7b3b      	ldrb	r3, [r7, #12]
 8000956:	79ba      	ldrb	r2, [r7, #6]
 8000958:	429a      	cmp	r2, r3
 800095a:	d101      	bne.n	8000960 <BMP280_Write_Reg+0x70>
		return 0;
 800095c:	2300      	movs	r3, #0
 800095e:	e000      	b.n	8000962 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8000960:	2301      	movs	r3, #1
	}
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000c8 	.word	0x200000c8
 8000970:	08006510 	.word	0x08006510
 8000974:	0800652c 	.word	0x0800652c

08000978 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af02      	add	r7, sp, #8
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000988:	23ee      	movs	r3, #238	@ 0xee
 800098a:	4619      	mov	r1, r3
 800098c:	1dfa      	adds	r2, r7, #7
 800098e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <BMP280_Read_Reg+0x70>)
 8000998:	f001 fe8c 	bl	80026b4 <HAL_I2C_Master_Transmit>
 800099c:	4603      	mov	r3, r0
 800099e:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <BMP280_Read_Reg+0x34>
		printf("xErreur with I2C Transmit\r\n");
 80009a6:	4811      	ldr	r0, [pc, #68]	@ (80009ec <BMP280_Read_Reg+0x74>)
 80009a8:	f004 fdc2 	bl	8005530 <puts>
	}

	buf = (uint8_t*) malloc(length);
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 fbb6 	bl	8005120 <malloc>
 80009b4:	4603      	mov	r3, r0
 80009b6:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80009b8:	23ee      	movs	r3, #238	@ 0xee
 80009ba:	4619      	mov	r1, r3
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009c4:	9200      	str	r2, [sp, #0]
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <BMP280_Read_Reg+0x70>)
 80009ca:	f001 ff71 	bl	80028b0 <HAL_I2C_Master_Receive>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <BMP280_Read_Reg+0x66>
		printf("xErreur with I2C Receive\r\n");
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <BMP280_Read_Reg+0x78>)
 80009da:	f004 fda9 	bl	8005530 <puts>
	}

	return buf;
 80009de:	68bb      	ldr	r3, [r7, #8]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000c8 	.word	0x200000c8
 80009ec:	08006510 	.word	0x08006510
 80009f0:	0800652c 	.word	0x0800652c

080009f4 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 80009fa:	23fa      	movs	r3, #250	@ 0xfa
 80009fc:	2203      	movs	r2, #3
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffb9 	bl	8000978 <BMP280_Read_Reg>
 8000a06:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	031a      	lsls	r2, r3, #12
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	3202      	adds	r2, #2
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	0912      	lsrs	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000a22:	4313      	orrs	r3, r2
 8000a24:	603b      	str	r3, [r7, #0]

	free(buf);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f004 fb82 	bl	8005130 <free>

	printf("Temperature: ");
 8000a2c:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <BMP280_get_temperature+0x58>)
 8000a2e:	f004 fd17 	bl	8005460 <iprintf>
	printf("%d", adc_T);
 8000a32:	6839      	ldr	r1, [r7, #0]
 8000a34:	4806      	ldr	r0, [pc, #24]	@ (8000a50 <BMP280_get_temperature+0x5c>)
 8000a36:	f004 fd13 	bl	8005460 <iprintf>
	printf("\r\n");
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <BMP280_get_temperature+0x60>)
 8000a3c:	f004 fd78 	bl	8005530 <puts>

	return adc_T;
 8000a40:	683b      	ldr	r3, [r7, #0]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08006548 	.word	0x08006548
 8000a50:	08006558 	.word	0x08006558
 8000a54:	0800655c 	.word	0x0800655c

08000a58 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8000a5e:	23f7      	movs	r3, #247	@ 0xf7
 8000a60:	2203      	movs	r2, #3
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff87 	bl	8000978 <BMP280_Read_Reg>
 8000a6a:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	031a      	lsls	r2, r3, #12
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	011b      	lsls	r3, r3, #4
 8000a7a:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	3202      	adds	r2, #2
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0912      	lsrs	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	603b      	str	r3, [r7, #0]

	free(buf);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f004 fb50 	bl	8005130 <free>

	printf("Pressure:    0x");
 8000a90:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <BMP280_get_pressure+0x58>)
 8000a92:	f004 fce5 	bl	8005460 <iprintf>
	//printf("%05lX", adc_P);
	printf("%u", adc_P);
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <BMP280_get_pressure+0x5c>)
 8000a9a:	f004 fce1 	bl	8005460 <iprintf>
	printf("\r\n");
 8000a9e:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <BMP280_get_pressure+0x60>)
 8000aa0:	f004 fd46 	bl	8005530 <puts>

	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	08006560 	.word	0x08006560
 8000ab4:	08006570 	.word	0x08006570
 8000ab8:	0800655c 	.word	0x0800655c

08000abc <compensate_temperature>:


BMP280_S32_t compensate_temperature() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0

	BMP280_S32_t raw_temp = BMP280_get_temperature();
 8000ac2:	f7ff ff97 	bl	80009f4 <BMP280_get_temperature>
 8000ac6:	60f8      	str	r0, [r7, #12]

	BMP280_S32_t var1 = ((((raw_temp >> 3) - ((BMP280_S32_t)dig_T1 << 1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	10da      	asrs	r2, r3, #3
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <compensate_temperature+0x74>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <compensate_temperature+0x78>)
 8000ad6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ada:	fb02 f303 	mul.w	r3, r2, r3
 8000ade:	12db      	asrs	r3, r3, #11
 8000ae0:	60bb      	str	r3, [r7, #8]
	BMP280_S32_t var2 = (((((raw_temp >> 4) - ((BMP280_S32_t)dig_T1)) * ((raw_temp >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	111b      	asrs	r3, r3, #4
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <compensate_temperature+0x74>)
 8000ae8:	8812      	ldrh	r2, [r2, #0]
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	1112      	asrs	r2, r2, #4
 8000af0:	490f      	ldr	r1, [pc, #60]	@ (8000b30 <compensate_temperature+0x74>)
 8000af2:	8809      	ldrh	r1, [r1, #0]
 8000af4:	1a52      	subs	r2, r2, r1
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	131b      	asrs	r3, r3, #12
 8000afc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b38 <compensate_temperature+0x7c>)
 8000afe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b02:	fb02 f303 	mul.w	r3, r2, r3
 8000b06:	139b      	asrs	r3, r3, #14
 8000b08:	607b      	str	r3, [r7, #4]
    t_fine = var1 + var2;
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <compensate_temperature+0x80>)
 8000b12:	6013      	str	r3, [r2, #0]
    BMP280_S32_t T = (t_fine * 5 + 128) >> 8;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <compensate_temperature+0x80>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3380      	adds	r3, #128	@ 0x80
 8000b20:	121b      	asrs	r3, r3, #8
 8000b22:	603b      	str	r3, [r7, #0]
    return T; // Température compensée
 8000b24:	683b      	ldr	r3, [r7, #0]

}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000084 	.word	0x20000084
 8000b34:	20000086 	.word	0x20000086
 8000b38:	20000088 	.word	0x20000088
 8000b3c:	2000009c 	.word	0x2000009c

08000b40 <compensate_pressure>:

BMP280_U32_t compensate_pressure() {
 8000b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b44:	b0ca      	sub	sp, #296	@ 0x128
 8000b46:	af00      	add	r7, sp, #0
	int raw_press = BMP280_get_pressure();
 8000b48:	f7ff ff86 	bl	8000a58 <BMP280_get_pressure>
 8000b4c:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
	BMP280_S64_t var1, var2, p;
    var1 = ((BMP280_S64_t)t_fine) - 128000;
 8000b50:	4baf      	ldr	r3, [pc, #700]	@ (8000e10 <compensate_pressure+0x2d0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	17da      	asrs	r2, r3, #31
 8000b56:	461c      	mov	r4, r3
 8000b58:	4615      	mov	r5, r2
 8000b5a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000b5e:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000b62:	e9c7 ab46 	strd	sl, fp, [r7, #280]	@ 0x118
    var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8000b66:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000b6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b6e:	fb03 f102 	mul.w	r1, r3, r2
 8000b72:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000b76:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	18ca      	adds	r2, r1, r3
 8000b80:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b84:	fba3 8903 	umull	r8, r9, r3, r3
 8000b88:	eb02 0309 	add.w	r3, r2, r9
 8000b8c:	4699      	mov	r9, r3
 8000b8e:	4ba1      	ldr	r3, [pc, #644]	@ (8000e14 <compensate_pressure+0x2d4>)
 8000b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	17da      	asrs	r2, r3, #31
 8000b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000b9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ba0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	fb03 f209 	mul.w	r2, r3, r9
 8000baa:	460b      	mov	r3, r1
 8000bac:	fb08 f303 	mul.w	r3, r8, r3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	fba8 1202 	umull	r1, r2, r8, r2
 8000bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000bc6:	4413      	add	r3, r2
 8000bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000bcc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000bd0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8000bd4:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    var2 = var2 + ((var1 * (BMP280_S64_t)dig_P5) << 17);
 8000bd8:	4b8f      	ldr	r3, [pc, #572]	@ (8000e18 <compensate_pressure+0x2d8>)
 8000bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	17da      	asrs	r2, r3, #31
 8000be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000be6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000bea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000bee:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000bf2:	462a      	mov	r2, r5
 8000bf4:	fb02 f203 	mul.w	r2, r2, r3
 8000bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	fb01 f303 	mul.w	r3, r1, r3
 8000c02:	441a      	add	r2, r3
 8000c04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000c08:	4621      	mov	r1, r4
 8000c0a:	fba3 1301 	umull	r1, r3, r3, r1
 8000c0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c12:	460b      	mov	r3, r1
 8000c14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	f04f 0100 	mov.w	r1, #0
 8000c2a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c2e:	462b      	mov	r3, r5
 8000c30:	0459      	lsls	r1, r3, #17
 8000c32:	4623      	mov	r3, r4
 8000c34:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000c38:	4623      	mov	r3, r4
 8000c3a:	0458      	lsls	r0, r3, #17
 8000c3c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000c40:	1814      	adds	r4, r2, r0
 8000c42:	643c      	str	r4, [r7, #64]	@ 0x40
 8000c44:	414b      	adcs	r3, r1
 8000c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c48:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000c4c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    var2 = var2 + (((BMP280_S64_t)dig_P4) << 35);
 8000c50:	4b72      	ldr	r3, [pc, #456]	@ (8000e1c <compensate_pressure+0x2dc>)
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	17da      	asrs	r2, r3, #31
 8000c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c5e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	f04f 0100 	mov.w	r1, #0
 8000c6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c6e:	00d9      	lsls	r1, r3, #3
 8000c70:	2000      	movs	r0, #0
 8000c72:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000c76:	1814      	adds	r4, r2, r0
 8000c78:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000c7a:	414b      	adcs	r3, r1
 8000c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c7e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000c82:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3) >> 8) + ((var1 * (BMP280_S64_t)dig_P2) << 12);
 8000c86:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000c8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000c8e:	fb03 f102 	mul.w	r1, r3, r2
 8000c92:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000c96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	18ca      	adds	r2, r1, r3
 8000ca0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ca4:	fba3 1303 	umull	r1, r3, r3, r3
 8000ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cac:	460b      	mov	r3, r1
 8000cae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cbc:	4b58      	ldr	r3, [pc, #352]	@ (8000e20 <compensate_pressure+0x2e0>)
 8000cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	17da      	asrs	r2, r3, #31
 8000cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000cca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000cce:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000cd2:	462b      	mov	r3, r5
 8000cd4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000cd8:	4642      	mov	r2, r8
 8000cda:	fb02 f203 	mul.w	r2, r2, r3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	fb01 f303 	mul.w	r3, r1, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4622      	mov	r2, r4
 8000cea:	4641      	mov	r1, r8
 8000cec:	fba2 1201 	umull	r1, r2, r2, r1
 8000cf0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000cfa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000cfe:	4413      	add	r3, r2
 8000d00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000d04:	f04f 0000 	mov.w	r0, #0
 8000d08:	f04f 0100 	mov.w	r1, #0
 8000d0c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000d10:	4623      	mov	r3, r4
 8000d12:	0a18      	lsrs	r0, r3, #8
 8000d14:	462b      	mov	r3, r5
 8000d16:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d1a:	462b      	mov	r3, r5
 8000d1c:	1219      	asrs	r1, r3, #8
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <compensate_pressure+0x2e4>)
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	17da      	asrs	r2, r3, #31
 8000d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000d30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d34:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000d38:	464a      	mov	r2, r9
 8000d3a:	fb02 f203 	mul.w	r2, r2, r3
 8000d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d42:	4644      	mov	r4, r8
 8000d44:	fb04 f303 	mul.w	r3, r4, r3
 8000d48:	441a      	add	r2, r3
 8000d4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d4e:	4644      	mov	r4, r8
 8000d50:	fba3 4304 	umull	r4, r3, r3, r4
 8000d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d58:	4623      	mov	r3, r4
 8000d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000d62:	18d3      	adds	r3, r2, r3
 8000d64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000d74:	464c      	mov	r4, r9
 8000d76:	0323      	lsls	r3, r4, #12
 8000d78:	4644      	mov	r4, r8
 8000d7a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000d7e:	4644      	mov	r4, r8
 8000d80:	0322      	lsls	r2, r4, #12
 8000d82:	1884      	adds	r4, r0, r2
 8000d84:	633c      	str	r4, [r7, #48]	@ 0x30
 8000d86:	eb41 0303 	adc.w	r3, r1, r3
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d8c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000d90:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = (((((BMP280_S64_t)1) << 47) + var1)) * ((BMP280_S64_t)dig_P1) >> 33;
 8000d94:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000d98:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000d9c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000da0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <compensate_pressure+0x2e8>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2200      	movs	r2, #0
 8000dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000db0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000db4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000db8:	462b      	mov	r3, r5
 8000dba:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	fb02 f203 	mul.w	r2, r2, r3
 8000dc4:	464b      	mov	r3, r9
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	fb01 f303 	mul.w	r3, r1, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	4622      	mov	r2, r4
 8000dd0:	4641      	mov	r1, r8
 8000dd2:	fba2 1201 	umull	r1, r2, r2, r1
 8000dd6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000dda:	460a      	mov	r2, r1
 8000ddc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000de0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000de4:	4413      	add	r3, r2
 8000de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000df6:	4629      	mov	r1, r5
 8000df8:	104a      	asrs	r2, r1, #1
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	17cb      	asrs	r3, r1, #31
 8000dfe:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    if (var1 == 0) {
 8000e02:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e06:	4313      	orrs	r3, r2
 8000e08:	d110      	bne.n	8000e2c <compensate_pressure+0x2ec>
        return 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e154      	b.n	80010b8 <compensate_pressure+0x578>
 8000e0e:	bf00      	nop
 8000e10:	2000009c 	.word	0x2000009c
 8000e14:	20000094 	.word	0x20000094
 8000e18:	20000092 	.word	0x20000092
 8000e1c:	20000090 	.word	0x20000090
 8000e20:	2000008e 	.word	0x2000008e
 8000e24:	2000008c 	.word	0x2000008c
 8000e28:	2000008a 	.word	0x2000008a
    }
    p = 1048576 - raw_press;
 8000e2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e30:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000e34:	17da      	asrs	r2, r3, #31
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e3a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e3e:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
    p = (((p << 31) - var2) * 3125) / var1;
 8000e42:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000e46:	105b      	asrs	r3, r3, #1
 8000e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000e50:	07db      	lsls	r3, r3, #31
 8000e52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e56:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e5a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000e5e:	4621      	mov	r1, r4
 8000e60:	1a89      	subs	r1, r1, r2
 8000e62:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000e64:	4629      	mov	r1, r5
 8000e66:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e6c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000e70:	4622      	mov	r2, r4
 8000e72:	462b      	mov	r3, r5
 8000e74:	1891      	adds	r1, r2, r2
 8000e76:	6239      	str	r1, [r7, #32]
 8000e78:	415b      	adcs	r3, r3
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e80:	4621      	mov	r1, r4
 8000e82:	1851      	adds	r1, r2, r1
 8000e84:	61b9      	str	r1, [r7, #24]
 8000e86:	4629      	mov	r1, r5
 8000e88:	414b      	adcs	r3, r1
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000e98:	4649      	mov	r1, r9
 8000e9a:	018b      	lsls	r3, r1, #6
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ea2:	4641      	mov	r1, r8
 8000ea4:	018a      	lsls	r2, r1, #6
 8000ea6:	4641      	mov	r1, r8
 8000ea8:	1889      	adds	r1, r1, r2
 8000eaa:	6139      	str	r1, [r7, #16]
 8000eac:	4649      	mov	r1, r9
 8000eae:	eb43 0101 	adc.w	r1, r3, r1
 8000eb2:	6179      	str	r1, [r7, #20]
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	008b      	lsls	r3, r1, #2
 8000ec4:	4641      	mov	r1, r8
 8000ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000eca:	4641      	mov	r1, r8
 8000ecc:	008a      	lsls	r2, r1, #2
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4622      	mov	r2, r4
 8000ed6:	189b      	adds	r3, r3, r2
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	460b      	mov	r3, r1
 8000edc:	462a      	mov	r2, r5
 8000ede:	eb42 0303 	adc.w	r3, r2, r3
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	008b      	lsls	r3, r1, #2
 8000ef4:	4641      	mov	r1, r8
 8000ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000efa:	4641      	mov	r1, r8
 8000efc:	008a      	lsls	r2, r1, #2
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	4622      	mov	r2, r4
 8000f06:	189b      	adds	r3, r3, r2
 8000f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f0a:	462b      	mov	r3, r5
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	eb42 0303 	adc.w	r3, r2, r3
 8000f12:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f14:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f18:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f1c:	f7ff f9d8 	bl	80002d0 <__aeabi_ldivmod>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
    var1 = ((BMP280_S64_t)dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000f28:	4b66      	ldr	r3, [pc, #408]	@ (80010c4 <compensate_pressure+0x584>)
 8000f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	17da      	asrs	r2, r3, #31
 8000f32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f36:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	f04f 0100 	mov.w	r1, #0
 8000f42:	0b50      	lsrs	r0, r2, #13
 8000f44:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f48:	1359      	asrs	r1, r3, #13
 8000f4a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f4e:	462b      	mov	r3, r5
 8000f50:	fb00 f203 	mul.w	r2, r0, r3
 8000f54:	4623      	mov	r3, r4
 8000f56:	fb03 f301 	mul.w	r3, r3, r1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4622      	mov	r2, r4
 8000f5e:	fba2 1200 	umull	r1, r2, r2, r0
 8000f62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000f66:	460a      	mov	r2, r1
 8000f68:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000f6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000f70:	4413      	add	r3, r2
 8000f72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000f76:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	f04f 0100 	mov.w	r1, #0
 8000f82:	0b50      	lsrs	r0, r2, #13
 8000f84:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f88:	1359      	asrs	r1, r3, #13
 8000f8a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000f8e:	462b      	mov	r3, r5
 8000f90:	fb00 f203 	mul.w	r2, r0, r3
 8000f94:	4623      	mov	r3, r4
 8000f96:	fb03 f301 	mul.w	r3, r3, r1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4622      	mov	r2, r4
 8000f9e:	fba2 1200 	umull	r1, r2, r2, r0
 8000fa2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000fac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	0e4a      	lsrs	r2, r1, #25
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000fcc:	4629      	mov	r1, r5
 8000fce:	164b      	asrs	r3, r1, #25
 8000fd0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    var2 = ((BMP280_S64_t)dig_P8 * p) >> 19;
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80010c8 <compensate_pressure+0x588>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	17da      	asrs	r2, r3, #31
 8000fde:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fe0:	667a      	str	r2, [r7, #100]	@ 0x64
 8000fe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000fe6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000fea:	462a      	mov	r2, r5
 8000fec:	fb02 f203 	mul.w	r2, r2, r3
 8000ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001000:	4621      	mov	r1, r4
 8001002:	fba2 1201 	umull	r1, r2, r2, r1
 8001006:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800100a:	460a      	mov	r2, r1
 800100c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001010:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001014:	4413      	add	r3, r2
 8001016:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001026:	4621      	mov	r1, r4
 8001028:	0cca      	lsrs	r2, r1, #19
 800102a:	4629      	mov	r1, r5
 800102c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001030:	4629      	mov	r1, r5
 8001032:	14cb      	asrs	r3, r1, #19
 8001034:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    p = ((p + var1 + var2) >> 8) + ((BMP280_S64_t)dig_P7 << 4);
 8001038:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800103c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001040:	1884      	adds	r4, r0, r2
 8001042:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001044:	eb41 0303 	adc.w	r3, r1, r3
 8001048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800104a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800104e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001052:	4621      	mov	r1, r4
 8001054:	1889      	adds	r1, r1, r2
 8001056:	6539      	str	r1, [r7, #80]	@ 0x50
 8001058:	4629      	mov	r1, r5
 800105a:	eb43 0101 	adc.w	r1, r3, r1
 800105e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001060:	f04f 0000 	mov.w	r0, #0
 8001064:	f04f 0100 	mov.w	r1, #0
 8001068:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800106c:	4623      	mov	r3, r4
 800106e:	0a18      	lsrs	r0, r3, #8
 8001070:	462b      	mov	r3, r5
 8001072:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001076:	462b      	mov	r3, r5
 8001078:	1219      	asrs	r1, r3, #8
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <compensate_pressure+0x58c>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	b21b      	sxth	r3, r3
 8001082:	17da      	asrs	r2, r3, #31
 8001084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001086:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001094:	464c      	mov	r4, r9
 8001096:	0123      	lsls	r3, r4, #4
 8001098:	4644      	mov	r4, r8
 800109a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800109e:	4644      	mov	r4, r8
 80010a0:	0122      	lsls	r2, r4, #4
 80010a2:	1884      	adds	r4, r0, r2
 80010a4:	603c      	str	r4, [r7, #0]
 80010a6:	eb41 0303 	adc.w	r3, r1, r3
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010b0:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
    return (BMP280_U32_t)p; // Pression compensée
 80010b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80010be:	46bd      	mov	sp, r7
 80010c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010c4:	2000009a 	.word	0x2000009a
 80010c8:	20000098 	.word	0x20000098
 80010cc:	20000096 	.word	0x20000096

080010d0 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_CAN2_Init+0x60>)
 80010d6:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <MX_CAN2_Init+0x64>)
 80010d8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_CAN2_Init+0x60>)
 80010dc:	2210      	movs	r2, #16
 80010de:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_CAN2_Init+0x60>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_CAN2_Init+0x60>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_CAN2_Init+0x60>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_CAN2_Init+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <MX_CAN2_Init+0x60>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_CAN2_Init+0x60>)
 8001100:	2200      	movs	r2, #0
 8001102:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_CAN2_Init+0x60>)
 8001106:	2200      	movs	r2, #0
 8001108:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_CAN2_Init+0x60>)
 800110c:	2200      	movs	r2, #0
 800110e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_CAN2_Init+0x60>)
 8001112:	2200      	movs	r2, #0
 8001114:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_CAN2_Init+0x60>)
 8001118:	2200      	movs	r2, #0
 800111a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_CAN2_Init+0x60>)
 800111e:	f000 fd37 	bl	8001b90 <HAL_CAN_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001128:	f000 fa8e 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000a0 	.word	0x200000a0
 8001134:	40006800 	.word	0x40006800

08001138 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a20      	ldr	r2, [pc, #128]	@ (80011d8 <HAL_CAN_MspInit+0xa0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d13a      	bne.n	80011d0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a1e      	ldr	r2, [pc, #120]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 8001164:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 8001180:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a10      	ldr	r2, [pc, #64]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_CAN_MspInit+0xa4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011c0:	2309      	movs	r3, #9
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <HAL_CAN_MspInit+0xa8>)
 80011cc:	f000 ff80 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	@ 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40006800 	.word	0x40006800
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020400 	.word	0x40020400

080011e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a2c      	ldr	r2, [pc, #176]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a25      	ldr	r2, [pc, #148]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2120      	movs	r1, #32
 800126e:	4812      	ldr	r0, [pc, #72]	@ (80012b8 <MX_GPIO_Init+0xd4>)
 8001270:	f001 f8c2 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_GPIO_Init+0xd8>)
 800128c:	f000 ff20 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001290:	2320      	movs	r3, #32
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <MX_GPIO_Init+0xd4>)
 80012a8:	f000 ff12 	bl	80020d0 <HAL_GPIO_Init>

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020800 	.word	0x40020800

080012c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 f895 	bl	800242c <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 f99e 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000c8 	.word	0x200000c8
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_I2C_MspInit+0x84>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12c      	bne.n	8001398 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_I2C_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_I2C_MspInit+0x88>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_I2C_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800135a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136c:	2304      	movs	r3, #4
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <HAL_I2C_MspInit+0x8c>)
 8001378:	f000 feaa 	bl	80020d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_I2C_MspInit+0x88>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <HAL_I2C_MspInit+0x88>)
 8001386:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800138a:	6413      	str	r3, [r2, #64]	@ 0x40
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_I2C_MspInit+0x88>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	@ 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400

080013ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ac      	sub	sp, #176	@ 0xb0
 80013b0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013b2:	f000 fb7b 	bl	8001aac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013b6:	f000 f8d9 	bl	800156c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013ba:	f7ff ff13 	bl	80011e4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80013be:	f000 fa9d 	bl	80018fc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80013c2:	f7ff ff7d 	bl	80012c0 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80013c6:	f000 fa6f 	bl	80018a8 <MX_USART1_UART_Init>
	MX_CAN2_Init();
 80013ca:	f7ff fe81 	bl	80010d0 <MX_CAN2_Init>
	*/




	printf("\r\nChecking for BMP280\r\n");
 80013ce:	485b      	ldr	r0, [pc, #364]	@ (800153c <main+0x190>)
 80013d0:	f004 f8ae 	bl	8005530 <puts>
	BMP280_check();
 80013d4:	f7ff f944 	bl	8000660 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 80013d8:	4859      	ldr	r0, [pc, #356]	@ (8001540 <main+0x194>)
 80013da:	f004 f8a9 	bl	8005530 <puts>
	BMP280_init();
 80013de:	f7ff fa5d 	bl	800089c <BMP280_init>


	uint8_t Rx_data;
	char Rx_Buffer[100];
	uint8_t Rx_index = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		/*
		 * RECEIVE AVEC RASBERRY PI
		 */


		BMP280_U32_t p = compensate_pressure();
 80013e8:	f7ff fbaa 	bl	8000b40 <compensate_pressure>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		BMP280_S32_t t = compensate_temperature();
 80013f2:	f7ff fb63 	bl	8000abc <compensate_temperature>
 80013f6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		printf("pression compensée :%d \r\n",p);
 80013fa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80013fe:	4851      	ldr	r0, [pc, #324]	@ (8001544 <main+0x198>)
 8001400:	f004 f82e 	bl	8005460 <iprintf>
		printf("temperature compensée :%d \r\n",t);
 8001404:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001408:	484f      	ldr	r0, [pc, #316]	@ (8001548 <main+0x19c>)
 800140a:	f004 f829 	bl	8005460 <iprintf>



		HAL_UART_Receive(&huart1,  (uint8_t*)&Rx_data, 1, 1000);
 800140e:	f107 0193 	add.w	r1, r7, #147	@ 0x93
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	2201      	movs	r2, #1
 8001418:	484c      	ldr	r0, [pc, #304]	@ (800154c <main+0x1a0>)
 800141a:	f002 fec4 	bl	80041a6 <HAL_UART_Receive>
		printf("receive %d\r\n", Rx_data);
 800141e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001422:	4619      	mov	r1, r3
 8001424:	484a      	ldr	r0, [pc, #296]	@ (8001550 <main+0x1a4>)
 8001426:	f004 f81b 	bl	8005460 <iprintf>
		Rx_Buffer[Rx_index++] = Rx_data;
 800142a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	f887 20af 	strb.w	r2, [r7, #175]	@ 0xaf
 8001434:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8001438:	33b0      	adds	r3, #176	@ 0xb0
 800143a:	443b      	add	r3, r7
 800143c:	f803 2c84 	strb.w	r2, [r3, #-132]
		printf("Buffer: %s\r\n", Rx_Buffer);
 8001440:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001444:	4619      	mov	r1, r3
 8001446:	4843      	ldr	r0, [pc, #268]	@ (8001554 <main+0x1a8>)
 8001448:	f004 f80a 	bl	8005460 <iprintf>


		if (Rx_data == '\r' || Rx_data == '\n')
 800144c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001450:	2b0d      	cmp	r3, #13
 8001452:	d003      	beq.n	800145c <main+0xb0>
 8001454:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001458:	2b0a      	cmp	r3, #10
 800145a:	d15f      	bne.n	800151c <main+0x170>
		{
			if (strcmp(Rx_Buffer, "get_t\r") == 0 || strcmp(Rx_Buffer, "get_t\n") == 0)
 800145c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001460:	493d      	ldr	r1, [pc, #244]	@ (8001558 <main+0x1ac>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe fed4 	bl	8000210 <strcmp>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <main+0xd4>
 800146e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001472:	493a      	ldr	r1, [pc, #232]	@ (800155c <main+0x1b0>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe fecb 	bl	8000210 <strcmp>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d119      	bne.n	80014b4 <main+0x108>
			{
				int32_t get_t;
				get_t = BMP280_get_temperature();
 8001480:	f7ff fab8 	bl	80009f4 <BMP280_get_temperature>
 8001484:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
				char value[20];
				int size = sprintf(value, "\r\n%ld\r\n", get_t);
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001490:	4933      	ldr	r1, [pc, #204]	@ (8001560 <main+0x1b4>)
 8001492:	4618      	mov	r0, r3
 8001494:	f003 ff02 	bl	800529c <siprintf>
 8001498:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
				HAL_UART_Transmit(&huart1, (uint8_t*)value, size - 1, 1000);
 800149c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	f107 0118 	add.w	r1, r7, #24
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	4827      	ldr	r0, [pc, #156]	@ (800154c <main+0x1a0>)
 80014b0:	f002 fdee 	bl	8004090 <HAL_UART_Transmit>

			}

			if (strcmp(Rx_Buffer, "get_p\r") == 0 || strcmp(Rx_Buffer, "get_p\n") == 0)
 80014b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b8:	492a      	ldr	r1, [pc, #168]	@ (8001564 <main+0x1b8>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe fea8 	bl	8000210 <strcmp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <main+0x12c>
 80014c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ca:	4927      	ldr	r1, [pc, #156]	@ (8001568 <main+0x1bc>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe fe9f 	bl	8000210 <strcmp>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d117      	bne.n	8001508 <main+0x15c>
			{
				int32_t get_p;
				get_p = BMP280_get_pressure();
 80014d8:	f7ff fabe 	bl	8000a58 <BMP280_get_pressure>
 80014dc:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				char value[20];
				int size = sprintf(value, "\r\n%ld\r\n", get_p);
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80014e6:	491e      	ldr	r1, [pc, #120]	@ (8001560 <main+0x1b4>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fed7 	bl	800529c <siprintf>
 80014ee:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				HAL_UART_Transmit(&huart1, (uint8_t*)value, size - 1, 1000);
 80014f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001502:	4812      	ldr	r0, [pc, #72]	@ (800154c <main+0x1a0>)
 8001504:	f002 fdc4 	bl	8004090 <HAL_UART_Transmit>


			}
			Rx_index = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800150e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001512:	2264      	movs	r2, #100	@ 0x64
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f812 	bl	8005540 <memset>
		}

		if (Rx_index >= sizeof(Rx_Buffer) - 1)
 800151c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001520:	2b62      	cmp	r3, #98	@ 0x62
 8001522:	f67f af61 	bls.w	80013e8 <main+0x3c>
		{
			Rx_index = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800152c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001530:	2264      	movs	r2, #100	@ 0x64
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f004 f803 	bl	8005540 <memset>
	{
 800153a:	e755      	b.n	80013e8 <main+0x3c>
 800153c:	08006574 	.word	0x08006574
 8001540:	0800658c 	.word	0x0800658c
 8001544:	080065a0 	.word	0x080065a0
 8001548:	080065bc 	.word	0x080065bc
 800154c:	20000120 	.word	0x20000120
 8001550:	080065dc 	.word	0x080065dc
 8001554:	080065ec 	.word	0x080065ec
 8001558:	080065fc 	.word	0x080065fc
 800155c:	08006604 	.word	0x08006604
 8001560:	0800660c 	.word	0x0800660c
 8001564:	08006614 	.word	0x08006614
 8001568:	0800661c 	.word	0x0800661c

0800156c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b094      	sub	sp, #80	@ 0x50
 8001570:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2234      	movs	r2, #52	@ 0x34
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f003 ffe0 	bl	8005540 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <SystemClock_Config+0xd4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	4a29      	ldr	r2, [pc, #164]	@ (8001640 <SystemClock_Config+0xd4>)
 800159a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <SystemClock_Config+0xd4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <SystemClock_Config+0xd8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <SystemClock_Config+0xd8>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <SystemClock_Config+0xd8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d6:	2302      	movs	r3, #2
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015de:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80015e0:	2308      	movs	r3, #8
 80015e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80015e4:	23b4      	movs	r3, #180	@ 0xb4
 80015e6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fa5b 	bl	8003ab4 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001604:	f000 f820 	bl	8001648 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160c:	2302      	movs	r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001614:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001618:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2102      	movs	r1, #2
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fefa 	bl	8003420 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001632:	f000 f809 	bl	8001648 <Error_Handler>
	}
}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	@ 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000

08001648 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <Error_Handler+0x8>

08001654 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	@ (8001674 <__io_putchar+0x20>)
 8001666:	f002 fd13 	bl	8004090 <HAL_UART_Transmit>

  return ch;
 800166a:	687b      	ldr	r3, [r7, #4]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000168 	.word	0x20000168

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	@ (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b6:	2007      	movs	r0, #7
 80016b8:	f000 fc36 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <NMI_Handler+0x4>

080016d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <MemManage_Handler+0x4>

080016e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <UsageFault_Handler+0x4>

080016f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171e:	f000 fa17 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <USART1_IRQHandler+0x10>)
 800172e:	f002 fdd1 	bl	80042d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000120 	.word	0x20000120

0800173c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e00a      	b.n	8001764 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174e:	f3af 8000 	nop.w
 8001752:	4601      	mov	r1, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	b2ca      	uxtb	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf0      	blt.n	800174e <_read+0x12>
  }

  return len;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e009      	b.n	800179c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	60ba      	str	r2, [r7, #8]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5f 	bl	8001654 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf1      	blt.n	8001788 <_write+0x12>
  }
  return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_close>:

int _close(int file)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d6:	605a      	str	r2, [r3, #4]
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_isatty>:

int _isatty(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f003 fe92 	bl	8005570 <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	@ (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20020000 	.word	0x20020000
 8001878:	00000400 	.word	0x00000400
 800187c:	2000011c 	.word	0x2000011c
 8001880:	20000300 	.word	0x20000300

08001884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_USART1_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_USART1_UART_Init+0x4c>)
 80018e0:	f002 fb86 	bl	8003ff0 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ea:	f7ff fead 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000120 	.word	0x20000120
 80018f8:	40011000 	.word	0x40011000

080018fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <MX_USART2_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_USART2_UART_Init+0x4c>)
 8001934:	f002 fb5c 	bl	8003ff0 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800193e:	f7ff fe83 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000168 	.word	0x20000168
 800194c:	40004400 	.word	0x40004400

08001950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	@ 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a36      	ldr	r2, [pc, #216]	@ (8001a48 <HAL_UART_MspInit+0xf8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d135      	bne.n	80019de <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a34      	ldr	r2, [pc, #208]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	4b2e      	ldr	r3, [pc, #184]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a2d      	ldr	r2, [pc, #180]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019bc:	2307      	movs	r3, #7
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4822      	ldr	r0, [pc, #136]	@ (8001a50 <HAL_UART_MspInit+0x100>)
 80019c8:	f000 fb82 	bl	80020d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2025      	movs	r0, #37	@ 0x25
 80019d2:	f000 fab4 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019d6:	2025      	movs	r0, #37	@ 0x25
 80019d8:	f000 facd 	bl	8001f76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019dc:	e030      	b.n	8001a40 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <HAL_UART_MspInit+0x104>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d12b      	bne.n	8001a40 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	4a16      	ldr	r2, [pc, #88]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <HAL_UART_MspInit+0xfc>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a20:	230c      	movs	r3, #12
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a30:	2307      	movs	r3, #7
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <HAL_UART_MspInit+0x100>)
 8001a3c:	f000 fb48 	bl	80020d0 <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	@ 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40004400 	.word	0x40004400

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a5c:	f7ff ff12 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f003 fd79 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff fc8f 	bl	80013ac <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a9c:	08006680 	.word	0x08006680
  ldr r2, =_sbss
 8001aa0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001aa4:	20000300 	.word	0x20000300

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 fa27 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fdca 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fa3f 	bl	8001f92 <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b2c:	f000 fa07 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	@ (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	200001b0 	.word	0x200001b0

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200001b0 	.word	0x200001b0

08001b90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0ed      	b.n	8001d7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fac2 	bl	8001138 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc4:	f7ff ffd8 	bl	8001b78 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bca:	e012      	b.n	8001bf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bcc:	f7ff ffd4 	bl	8001b78 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d90b      	bls.n	8001bf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2205      	movs	r2, #5
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0c5      	b.n	8001d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0e5      	beq.n	8001bcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0202 	bic.w	r2, r2, #2
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c10:	f7ff ffb2 	bl	8001b78 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c16:	e012      	b.n	8001c3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c18:	f7ff ffae 	bl	8001b78 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b0a      	cmp	r3, #10
 8001c24:	d90b      	bls.n	8001c3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2205      	movs	r2, #5
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e09f      	b.n	8001d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e5      	bne.n	8001c18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7e1b      	ldrb	r3, [r3, #24]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d108      	bne.n	8001c66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e007      	b.n	8001c76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7e5b      	ldrb	r3, [r3, #25]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d108      	bne.n	8001c90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e007      	b.n	8001ca0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7e9b      	ldrb	r3, [r3, #26]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d108      	bne.n	8001cba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0220 	orr.w	r2, r2, #32
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e007      	b.n	8001cca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0220 	bic.w	r2, r2, #32
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7edb      	ldrb	r3, [r3, #27]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d108      	bne.n	8001ce4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0210 	bic.w	r2, r2, #16
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e007      	b.n	8001cf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0210 	orr.w	r2, r2, #16
 8001cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7f1b      	ldrb	r3, [r3, #28]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d108      	bne.n	8001d0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0208 	orr.w	r2, r2, #8
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e007      	b.n	8001d1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0208 	bic.w	r2, r2, #8
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7f5b      	ldrb	r3, [r3, #29]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d108      	bne.n	8001d38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0204 	orr.w	r2, r2, #4
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e007      	b.n	8001d48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0204 	bic.w	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	ea42 0103 	orr.w	r1, r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	@ (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	@ 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff3e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff31 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff fdde 	bl	8001b78 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d008      	beq.n	8001fdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e052      	b.n	8002082 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0216 	bic.w	r2, r2, #22
 8001fea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ffa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_DMA_Abort+0x62>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0208 	bic.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202c:	e013      	b.n	8002056 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202e:	f7ff fda3 	bl	8001b78 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b05      	cmp	r3, #5
 800203a:	d90c      	bls.n	8002056 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e015      	b.n	8002082 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e4      	bne.n	800202e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002068:	223f      	movs	r2, #63	@ 0x3f
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d004      	beq.n	80020a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e00c      	b.n	80020c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2205      	movs	r2, #5
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e165      	b.n	80023b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8154 	bne.w	80023b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d005      	beq.n	8002122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	2b02      	cmp	r3, #2
 8002120:	d130      	bne.n	8002184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0201 	and.w	r2, r3, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b03      	cmp	r3, #3
 800218e:	d017      	beq.n	80021c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d123      	bne.n	8002214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0203 	and.w	r2, r3, #3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80ae 	beq.w	80023b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b5d      	ldr	r3, [pc, #372]	@ (80023d0 <HAL_GPIO_Init+0x300>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a5c      	ldr	r2, [pc, #368]	@ (80023d0 <HAL_GPIO_Init+0x300>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b5a      	ldr	r3, [pc, #360]	@ (80023d0 <HAL_GPIO_Init+0x300>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a58      	ldr	r2, [pc, #352]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4f      	ldr	r2, [pc, #316]	@ (80023d8 <HAL_GPIO_Init+0x308>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d025      	beq.n	80022ea <HAL_GPIO_Init+0x21a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4e      	ldr	r2, [pc, #312]	@ (80023dc <HAL_GPIO_Init+0x30c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01f      	beq.n	80022e6 <HAL_GPIO_Init+0x216>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4d      	ldr	r2, [pc, #308]	@ (80023e0 <HAL_GPIO_Init+0x310>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x212>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4c      	ldr	r2, [pc, #304]	@ (80023e4 <HAL_GPIO_Init+0x314>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x20e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4b      	ldr	r2, [pc, #300]	@ (80023e8 <HAL_GPIO_Init+0x318>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x20a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4a      	ldr	r2, [pc, #296]	@ (80023ec <HAL_GPIO_Init+0x31c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x206>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a49      	ldr	r2, [pc, #292]	@ (80023f0 <HAL_GPIO_Init+0x320>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x202>
 80022ce:	2306      	movs	r3, #6
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x21c>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x21c>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x21c>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x21c>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x21c>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x21c>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x21c>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	@ (80023d4 <HAL_GPIO_Init+0x304>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b3a      	ldr	r3, [pc, #232]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a31      	ldr	r2, [pc, #196]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b2f      	ldr	r3, [pc, #188]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a26      	ldr	r2, [pc, #152]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235e:	4b25      	ldr	r3, [pc, #148]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002382:	4a1c      	ldr	r2, [pc, #112]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002388:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ac:	4a11      	ldr	r2, [pc, #68]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae96 	bls.w	80020ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
 8002404:	4613      	mov	r3, r2
 8002406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002414:	e003      	b.n	800241e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	041a      	lsls	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e12b      	b.n	8002696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe ff62 	bl	800131c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	@ 0x24
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800247e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800248e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002490:	f001 f8b8 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a81      	ldr	r2, [pc, #516]	@ (80026a0 <HAL_I2C_Init+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d807      	bhi.n	80024b0 <HAL_I2C_Init+0x84>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a80      	ldr	r2, [pc, #512]	@ (80026a4 <HAL_I2C_Init+0x278>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e006      	b.n	80024be <HAL_I2C_Init+0x92>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a7d      	ldr	r2, [pc, #500]	@ (80026a8 <HAL_I2C_Init+0x27c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0e7      	b.n	8002696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a78      	ldr	r2, [pc, #480]	@ (80026ac <HAL_I2C_Init+0x280>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0c9b      	lsrs	r3, r3, #18
 80024d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a6a      	ldr	r2, [pc, #424]	@ (80026a0 <HAL_I2C_Init+0x274>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <HAL_I2C_Init+0xd4>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	e009      	b.n	8002514 <HAL_I2C_Init+0xe8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	4a69      	ldr	r2, [pc, #420]	@ (80026b0 <HAL_I2C_Init+0x284>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	3301      	adds	r3, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002526:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	495c      	ldr	r1, [pc, #368]	@ (80026a0 <HAL_I2C_Init+0x274>)
 8002530:	428b      	cmp	r3, r1
 8002532:	d819      	bhi.n	8002568 <HAL_I2C_Init+0x13c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e59      	subs	r1, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002548:	400b      	ands	r3, r1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_I2C_Init+0x138>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e59      	subs	r1, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fbb1 f3f3 	udiv	r3, r1, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	e051      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002564:	2304      	movs	r3, #4
 8002566:	e04f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <HAL_I2C_Init+0x168>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e012      	b.n	80025ba <HAL_I2C_Init+0x18e>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	0099      	lsls	r1, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Init+0x196>
 80025be:	2301      	movs	r3, #1
 80025c0:	e022      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <HAL_I2C_Init+0x1bc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e58      	subs	r0, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	440b      	add	r3, r1
 80025d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025e6:	e00f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6809      	ldr	r1, [r1, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002636:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6911      	ldr	r1, [r2, #16]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	000186a0 	.word	0x000186a0
 80026a4:	001e847f 	.word	0x001e847f
 80026a8:	003d08ff 	.word	0x003d08ff
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	4613      	mov	r3, r2
 80026c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fa56 	bl	8001b78 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 80e0 	bne.w	800289c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	4970      	ldr	r1, [pc, #448]	@ (80028a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fc64 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0d3      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x50>
 8002700:	2302      	movs	r3, #2
 8002702:	e0cc      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d007      	beq.n	800272a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2221      	movs	r2, #33	@ 0x21
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2210      	movs	r2, #16
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a50      	ldr	r2, [pc, #320]	@ (80028ac <HAL_I2C_Master_Transmit+0x1f8>)
 800276a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 face 	bl	8002d14 <I2C_MasterRequestWrite>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e08d      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002798:	e066      	b.n	8002868 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fd22 	bl	80031e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d107      	bne.n	80027c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06b      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d11b      	bne.n	800283c <HAL_I2C_Master_Transmit+0x188>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d017      	beq.n	800283c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	6a39      	ldr	r1, [r7, #32]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fd19 	bl	8003278 <I2C_WaitOnBTFFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002862:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e01a      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d194      	bne.n	800279a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	00100002 	.word	0x00100002
 80028ac:	ffff0000 	.word	0xffff0000

080028b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	@ 0x30
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	461a      	mov	r2, r3
 80028bc:	460b      	mov	r3, r1
 80028be:	817b      	strh	r3, [r7, #10]
 80028c0:	4613      	mov	r3, r2
 80028c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff f958 	bl	8001b78 <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	f040 8217 	bne.w	8002d06 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2319      	movs	r3, #25
 80028de:	2201      	movs	r2, #1
 80028e0:	497c      	ldr	r1, [pc, #496]	@ (8002ad4 <HAL_I2C_Master_Receive+0x224>)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fb66 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
 80028f0:	e20a      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2C_Master_Receive+0x50>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e203      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d007      	beq.n	8002926 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2222      	movs	r2, #34	@ 0x22
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2210      	movs	r2, #16
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	893a      	ldrh	r2, [r7, #8]
 8002956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad8 <HAL_I2C_Master_Receive+0x228>)
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fa52 	bl	8002e18 <I2C_MasterRequestRead>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1c4      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d113      	bne.n	80029ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e198      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d11b      	bne.n	80029ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e178      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d11b      	bne.n	8002a2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	e158      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a54:	e144      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	f200 80f1 	bhi.w	8002c42 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d123      	bne.n	8002ab0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fc4b 	bl	8003308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e145      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aae:	e117      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d14e      	bne.n	8002b56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4906      	ldr	r1, [pc, #24]	@ (8002adc <HAL_I2C_Master_Receive+0x22c>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fa76 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e11a      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
 8002ad2:	bf00      	nop
 8002ad4:	00100002 	.word	0x00100002
 8002ad8:	ffff0000 	.word	0xffff0000
 8002adc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b54:	e0c4      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	496c      	ldr	r1, [pc, #432]	@ (8002d10 <HAL_I2C_Master_Receive+0x460>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa27 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0cb      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4955      	ldr	r1, [pc, #340]	@ (8002d10 <HAL_I2C_Master_Receive+0x460>)
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f9f9 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e09d      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c40:	e04e      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fb5e 	bl	8003308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e058      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d124      	bne.n	8002ce0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d107      	bne.n	8002cae <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aeb6 	bne.w	8002a56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	@ 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00010004 	.word	0x00010004

08002d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d006      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d003      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e00b      	b.n	8002d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d107      	bne.n	8002d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f91d 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d8e:	d103      	bne.n	8002d98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e035      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002da4:	d108      	bne.n	8002db8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002db4:	611a      	str	r2, [r3, #16]
 8002db6:	e01b      	b.n	8002df0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db8:	897b      	ldrh	r3, [r7, #10]
 8002dba:	11db      	asrs	r3, r3, #7
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 0306 	and.w	r3, r3, #6
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f063 030f 	orn	r3, r3, #15
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	490e      	ldr	r1, [pc, #56]	@ (8002e10 <I2C_MasterRequestWrite+0xfc>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f966 	bl	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e010      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4907      	ldr	r1, [pc, #28]	@ (8002e14 <I2C_MasterRequestWrite+0x100>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f956 	bl	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	00010008 	.word	0x00010008
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d006      	beq.n	8002e52 <I2C_MasterRequestRead+0x3a>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d003      	beq.n	8002e52 <I2C_MasterRequestRead+0x3a>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e50:	d108      	bne.n	8002e64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e00b      	b.n	8002e7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	2b11      	cmp	r3, #17
 8002e6a:	d107      	bne.n	8002e7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f893 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea2:	d103      	bne.n	8002eac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e079      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eb8:	d108      	bne.n	8002ecc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	e05f      	b.n	8002f8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	11db      	asrs	r3, r3, #7
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0306 	and.w	r3, r3, #6
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f063 030f 	orn	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4930      	ldr	r1, [pc, #192]	@ (8002fac <I2C_MasterRequestRead+0x194>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8dc 	bl	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e054      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4929      	ldr	r1, [pc, #164]	@ (8002fb0 <I2C_MasterRequestRead+0x198>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f8cc 	bl	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e044      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f831 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f66:	d103      	bne.n	8002f70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e017      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f74:	897b      	ldrh	r3, [r7, #10]
 8002f76:	11db      	asrs	r3, r3, #7
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 0306 	and.w	r3, r3, #6
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f063 030e 	orn	r3, r3, #14
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4907      	ldr	r1, [pc, #28]	@ (8002fb0 <I2C_MasterRequestRead+0x198>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f888 	bl	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	00010008 	.word	0x00010008
 8002fb0:	00010002 	.word	0x00010002

08002fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc4:	e048      	b.n	8003058 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fcc:	d044      	beq.n	8003058 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	f7fe fdd3 	bl	8001b78 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d139      	bne.n	8003058 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	e00c      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x70>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d116      	bne.n	8003058 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e023      	b.n	80030a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10d      	bne.n	800307e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	43da      	mvns	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	e00c      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	43da      	mvns	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4013      	ands	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	429a      	cmp	r2, r3
 800309c:	d093      	beq.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b6:	e071      	b.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c6:	d123      	bne.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	f043 0204 	orr.w	r2, r3, #4
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e067      	b.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003116:	d041      	beq.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003118:	f7fe fd2e 	bl	8001b78 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d302      	bcc.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d136      	bne.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10c      	bne.n	8003152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e00b      	b.n	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e021      	b.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d10c      	bne.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e00b      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f af6d 	bne.w	80030b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f4:	e034      	b.n	8003260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8e3 	bl	80033c2 <I2C_IsAcknowledgeFailed>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e034      	b.n	8003270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800320c:	d028      	beq.n	8003260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7fe fcb3 	bl	8001b78 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11d      	bne.n	8003260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	2b80      	cmp	r3, #128	@ 0x80
 8003230:	d016      	beq.n	8003260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e007      	b.n	8003270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d1c3      	bne.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003284:	e034      	b.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f89b 	bl	80033c2 <I2C_IsAcknowledgeFailed>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e034      	b.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800329c:	d028      	beq.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7fe fc6b 	bl	8001b78 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11d      	bne.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d016      	beq.n	80032f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e007      	b.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d1c3      	bne.n	8003286 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003314:	e049      	b.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b10      	cmp	r3, #16
 8003322:	d119      	bne.n	8003358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0210 	mvn.w	r2, #16
 800332c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e030      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003358:	f7fe fc0e 	bl	8001b78 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d302      	bcc.n	800336e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11d      	bne.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b40      	cmp	r3, #64	@ 0x40
 800337a:	d016      	beq.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b40      	cmp	r3, #64	@ 0x40
 80033b6:	d1ae      	bne.n	8003316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d8:	d11b      	bne.n	8003412 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	f043 0204 	orr.w	r2, r3, #4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0cc      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b68      	ldr	r3, [pc, #416]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d90c      	bls.n	800345c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b65      	ldr	r3, [pc, #404]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b63      	ldr	r3, [pc, #396]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0b8      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003474:	4b59      	ldr	r3, [pc, #356]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a58      	ldr	r2, [pc, #352]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800347e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800348c:	4b53      	ldr	r3, [pc, #332]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a52      	ldr	r2, [pc, #328]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003498:	4b50      	ldr	r3, [pc, #320]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	494d      	ldr	r1, [pc, #308]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d044      	beq.n	8003540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b47      	ldr	r3, [pc, #284]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d003      	beq.n	80034de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b3f      	ldr	r3, [pc, #252]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3b      	ldr	r3, [pc, #236]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e067      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b37      	ldr	r3, [pc, #220]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4934      	ldr	r1, [pc, #208]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7fe fb32 	bl	8001b78 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe fb2e 	bl	8001b78 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e04f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d20c      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b22      	ldr	r3, [pc, #136]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b20      	ldr	r3, [pc, #128]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e032      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4916      	ldr	r1, [pc, #88]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490e      	ldr	r1, [pc, #56]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a6:	f000 f855 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490a      	ldr	r1, [pc, #40]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a09      	ldr	r2, [pc, #36]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035c2:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fa92 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08006624 	.word	0x08006624
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08006634 	.word	0x08006634

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08006634 	.word	0x08006634

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003658:	b0ae      	sub	sp, #184	@ 0xb8
 800365a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800367a:	4bcb      	ldr	r3, [pc, #812]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b0c      	cmp	r3, #12
 8003684:	f200 8206 	bhi.w	8003a94 <HAL_RCC_GetSysClockFreq+0x440>
 8003688:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <HAL_RCC_GetSysClockFreq+0x3c>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036c5 	.word	0x080036c5
 8003694:	08003a95 	.word	0x08003a95
 8003698:	08003a95 	.word	0x08003a95
 800369c:	08003a95 	.word	0x08003a95
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	08003a95 	.word	0x08003a95
 80036a8:	08003a95 	.word	0x08003a95
 80036ac:	08003a95 	.word	0x08003a95
 80036b0:	080036d5 	.word	0x080036d5
 80036b4:	08003a95 	.word	0x08003a95
 80036b8:	08003a95 	.word	0x08003a95
 80036bc:	08003a95 	.word	0x08003a95
 80036c0:	080038c5 	.word	0x080038c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4bb9      	ldr	r3, [pc, #740]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x358>)
 80036c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036ca:	e1e7      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036cc:	4bb8      	ldr	r3, [pc, #736]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80036ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036d2:	e1e3      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d4:	4bb4      	ldr	r3, [pc, #720]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e0:	4bb1      	ldr	r3, [pc, #708]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d071      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ec:	4bae      	ldr	r3, [pc, #696]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80036fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003704:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800370e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003712:	4622      	mov	r2, r4
 8003714:	462b      	mov	r3, r5
 8003716:	f04f 0000 	mov.w	r0, #0
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	0159      	lsls	r1, r3, #5
 8003720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003724:	0150      	lsls	r0, r2, #5
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4621      	mov	r1, r4
 800372c:	1a51      	subs	r1, r2, r1
 800372e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003730:	4629      	mov	r1, r5
 8003732:	eb63 0301 	sbc.w	r3, r3, r1
 8003736:	647b      	str	r3, [r7, #68]	@ 0x44
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003744:	4649      	mov	r1, r9
 8003746:	018b      	lsls	r3, r1, #6
 8003748:	4641      	mov	r1, r8
 800374a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800374e:	4641      	mov	r1, r8
 8003750:	018a      	lsls	r2, r1, #6
 8003752:	4641      	mov	r1, r8
 8003754:	1a51      	subs	r1, r2, r1
 8003756:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003758:	4649      	mov	r1, r9
 800375a:	eb63 0301 	sbc.w	r3, r3, r1
 800375e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800376c:	4649      	mov	r1, r9
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4641      	mov	r1, r8
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4641      	mov	r1, r8
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4622      	mov	r2, r4
 8003782:	189b      	adds	r3, r3, r2
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
 8003786:	462b      	mov	r3, r5
 8003788:	460a      	mov	r2, r1
 800378a:	eb42 0303 	adc.w	r3, r2, r3
 800378e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800379c:	4629      	mov	r1, r5
 800379e:	024b      	lsls	r3, r1, #9
 80037a0:	4621      	mov	r1, r4
 80037a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037a6:	4621      	mov	r1, r4
 80037a8:	024a      	lsls	r2, r1, #9
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80037c0:	f7fc fdd6 	bl	8000370 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ce:	e067      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d0:	4b75      	ldr	r3, [pc, #468]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	099b      	lsrs	r3, r3, #6
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80037e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037ea:	2300      	movs	r3, #0
 80037ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	f04f 0000 	mov.w	r0, #0
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	0159      	lsls	r1, r3, #5
 8003800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003804:	0150      	lsls	r0, r2, #5
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4621      	mov	r1, r4
 800380c:	1a51      	subs	r1, r2, r1
 800380e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003810:	4629      	mov	r1, r5
 8003812:	eb63 0301 	sbc.w	r3, r3, r1
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003824:	4649      	mov	r1, r9
 8003826:	018b      	lsls	r3, r1, #6
 8003828:	4641      	mov	r1, r8
 800382a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800382e:	4641      	mov	r1, r8
 8003830:	018a      	lsls	r2, r1, #6
 8003832:	4641      	mov	r1, r8
 8003834:	ebb2 0a01 	subs.w	sl, r2, r1
 8003838:	4649      	mov	r1, r9
 800383a:	eb63 0b01 	sbc.w	fp, r3, r1
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800384a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800384e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003852:	4692      	mov	sl, r2
 8003854:	469b      	mov	fp, r3
 8003856:	4623      	mov	r3, r4
 8003858:	eb1a 0303 	adds.w	r3, sl, r3
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	462b      	mov	r3, r5
 8003860:	eb4b 0303 	adc.w	r3, fp, r3
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003872:	4629      	mov	r1, r5
 8003874:	028b      	lsls	r3, r1, #10
 8003876:	4621      	mov	r1, r4
 8003878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800387c:	4621      	mov	r1, r4
 800387e:	028a      	lsls	r2, r1, #10
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003888:	2200      	movs	r2, #0
 800388a:	673b      	str	r3, [r7, #112]	@ 0x70
 800388c:	677a      	str	r2, [r7, #116]	@ 0x74
 800388e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003892:	f7fc fd6d 	bl	8000370 <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4613      	mov	r3, r2
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038a0:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80038b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038c2:	e0eb      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c4:	4b38      	ldr	r3, [pc, #224]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d0:	4b35      	ldr	r3, [pc, #212]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d06b      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038dc:	4b32      	ldr	r3, [pc, #200]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	099b      	lsrs	r3, r3, #6
 80038e2:	2200      	movs	r2, #0
 80038e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80038f0:	2300      	movs	r3, #0
 80038f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80038f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	f04f 0000 	mov.w	r0, #0
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	0159      	lsls	r1, r3, #5
 8003906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390a:	0150      	lsls	r0, r2, #5
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4621      	mov	r1, r4
 8003912:	1a51      	subs	r1, r2, r1
 8003914:	61b9      	str	r1, [r7, #24]
 8003916:	4629      	mov	r1, r5
 8003918:	eb63 0301 	sbc.w	r3, r3, r1
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800392a:	4659      	mov	r1, fp
 800392c:	018b      	lsls	r3, r1, #6
 800392e:	4651      	mov	r1, sl
 8003930:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003934:	4651      	mov	r1, sl
 8003936:	018a      	lsls	r2, r1, #6
 8003938:	4651      	mov	r1, sl
 800393a:	ebb2 0801 	subs.w	r8, r2, r1
 800393e:	4659      	mov	r1, fp
 8003940:	eb63 0901 	sbc.w	r9, r3, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003950:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003954:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003958:	4690      	mov	r8, r2
 800395a:	4699      	mov	r9, r3
 800395c:	4623      	mov	r3, r4
 800395e:	eb18 0303 	adds.w	r3, r8, r3
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	462b      	mov	r3, r5
 8003966:	eb49 0303 	adc.w	r3, r9, r3
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003978:	4629      	mov	r1, r5
 800397a:	024b      	lsls	r3, r1, #9
 800397c:	4621      	mov	r1, r4
 800397e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003982:	4621      	mov	r1, r4
 8003984:	024a      	lsls	r2, r1, #9
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800398e:	2200      	movs	r2, #0
 8003990:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003992:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003994:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003998:	f7fc fcea 	bl	8000370 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4613      	mov	r3, r2
 80039a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a6:	e065      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x420>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	00f42400 	.word	0x00f42400
 80039b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x458>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	2200      	movs	r2, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	4611      	mov	r1, r2
 80039c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80039c6:	2300      	movs	r3, #0
 80039c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80039ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80039ce:	4642      	mov	r2, r8
 80039d0:	464b      	mov	r3, r9
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	0159      	lsls	r1, r3, #5
 80039dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e0:	0150      	lsls	r0, r2, #5
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4641      	mov	r1, r8
 80039e8:	1a51      	subs	r1, r2, r1
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	4649      	mov	r1, r9
 80039ee:	eb63 0301 	sbc.w	r3, r3, r1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a00:	4659      	mov	r1, fp
 8003a02:	018b      	lsls	r3, r1, #6
 8003a04:	4651      	mov	r1, sl
 8003a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	018a      	lsls	r2, r1, #6
 8003a0e:	4651      	mov	r1, sl
 8003a10:	1a54      	subs	r4, r2, r1
 8003a12:	4659      	mov	r1, fp
 8003a14:	eb63 0501 	sbc.w	r5, r3, r1
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	00eb      	lsls	r3, r5, #3
 8003a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a26:	00e2      	lsls	r2, r4, #3
 8003a28:	4614      	mov	r4, r2
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	4643      	mov	r3, r8
 8003a2e:	18e3      	adds	r3, r4, r3
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	464b      	mov	r3, r9
 8003a34:	eb45 0303 	adc.w	r3, r5, r3
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a46:	4629      	mov	r1, r5
 8003a48:	028b      	lsls	r3, r1, #10
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a50:	4621      	mov	r1, r4
 8003a52:	028a      	lsls	r2, r1, #10
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a66:	f7fc fc83 	bl	8000370 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a74:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x458>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	0f1b      	lsrs	r3, r3, #28
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a92:	e003      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	37b8      	adds	r7, #184	@ 0xb8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	00f42400 	.word	0x00f42400

08003ab4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e28d      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8083 	beq.w	8003bda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ad4:	4b94      	ldr	r3, [pc, #592]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d019      	beq.n	8003b14 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ae0:	4b91      	ldr	r3, [pc, #580]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003aec:	4b8e      	ldr	r3, [pc, #568]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003af8:	d00c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b8b      	ldr	r3, [pc, #556]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d112      	bne.n	8003b2c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b06:	4b88      	ldr	r3, [pc, #544]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4b84      	ldr	r3, [pc, #528]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05b      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x124>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d157      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e25a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x90>
 8003b36:	4b7c      	ldr	r3, [pc, #496]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xcc>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0xb4>
 8003b4e:	4b76      	ldr	r3, [pc, #472]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a75      	ldr	r2, [pc, #468]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b73      	ldr	r3, [pc, #460]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a72      	ldr	r2, [pc, #456]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xcc>
 8003b68:	4b6f      	ldr	r3, [pc, #444]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b6c      	ldr	r3, [pc, #432]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6b      	ldr	r2, [pc, #428]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fff6 	bl	8001b78 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fd fff2 	bl	8001b78 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	@ 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e21f      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xdc>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd ffe2 	bl	8001b78 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd ffde 	bl	8001b78 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e20b      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	4b57      	ldr	r3, [pc, #348]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x104>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d06f      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003be6:	4b50      	ldr	r3, [pc, #320]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d017      	beq.n	8003c22 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bf2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d105      	bne.n	8003c0a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d11c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c16:	4b44      	ldr	r3, [pc, #272]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_RCC_OscConfig+0x186>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1d3      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4937      	ldr	r1, [pc, #220]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4e:	e03a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c58:	4b34      	ldr	r3, [pc, #208]	@ (8003d2c <HAL_RCC_OscConfig+0x278>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd ff8b 	bl	8001b78 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fd ff87 	bl	8001b78 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e1b4      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4925      	ldr	r1, [pc, #148]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]
 8003c98:	e015      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <HAL_RCC_OscConfig+0x278>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd ff6a 	bl	8001b78 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fd ff66 	bl	8001b78 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e193      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	4b1b      	ldr	r3, [pc, #108]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d036      	beq.n	8003d40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fd ff4a 	bl	8001b78 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fd ff46 	bl	8001b78 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e173      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x234>
 8003d06:	e01b      	b.n	8003d40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d08:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd ff33 	bl	8001b78 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	e00e      	b.n	8003d34 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fd ff2f 	bl	8001b78 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d907      	bls.n	8003d34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e15c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	42470000 	.word	0x42470000
 8003d30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d34:	4b8a      	ldr	r3, [pc, #552]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ea      	bne.n	8003d16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8097 	beq.w	8003e7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d52:	4b83      	ldr	r3, [pc, #524]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10f      	bne.n	8003d7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	4b7f      	ldr	r3, [pc, #508]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	4a7e      	ldr	r2, [pc, #504]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	4b79      	ldr	r3, [pc, #484]	@ (8003f64 <HAL_RCC_OscConfig+0x4b0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d118      	bne.n	8003dbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d8a:	4b76      	ldr	r3, [pc, #472]	@ (8003f64 <HAL_RCC_OscConfig+0x4b0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a75      	ldr	r2, [pc, #468]	@ (8003f64 <HAL_RCC_OscConfig+0x4b0>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d96:	f7fd feef 	bl	8001b78 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7fd feeb 	bl	8001b78 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e118      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f64 <HAL_RCC_OscConfig+0x4b0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x31e>
 8003dc4:	4b66      	ldr	r3, [pc, #408]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc8:	4a65      	ldr	r2, [pc, #404]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCC_OscConfig+0x358>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x340>
 8003dda:	4b61      	ldr	r3, [pc, #388]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	4a60      	ldr	r2, [pc, #384]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003de0:	f043 0304 	orr.w	r3, r3, #4
 8003de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a5d      	ldr	r2, [pc, #372]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0x358>
 8003df4:	4b5a      	ldr	r3, [pc, #360]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	4a59      	ldr	r2, [pc, #356]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e00:	4b57      	ldr	r3, [pc, #348]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e04:	4a56      	ldr	r2, [pc, #344]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003e06:	f023 0304 	bic.w	r3, r3, #4
 8003e0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d015      	beq.n	8003e40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7fd feb0 	bl	8001b78 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fd feac 	bl	8001b78 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0d7      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e32:	4b4b      	ldr	r3, [pc, #300]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0ee      	beq.n	8003e1c <HAL_RCC_OscConfig+0x368>
 8003e3e:	e014      	b.n	8003e6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fe9a 	bl	8001b78 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd fe96 	bl	8001b78 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0c1      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5e:	4b40      	ldr	r3, [pc, #256]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ee      	bne.n	8003e48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	4a3a      	ldr	r2, [pc, #232]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80ad 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e86:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d060      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d145      	bne.n	8003f26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	4b33      	ldr	r3, [pc, #204]	@ (8003f68 <HAL_RCC_OscConfig+0x4b4>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fe6a 	bl	8001b78 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd fe66 	bl	8001b78 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e093      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	019b      	lsls	r3, r3, #6
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	061b      	lsls	r3, r3, #24
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	071b      	lsls	r3, r3, #28
 8003ef2:	491b      	ldr	r1, [pc, #108]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x4b4>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd fe3b 	bl	8001b78 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd fe37 	bl	8001b78 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e064      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f18:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x452>
 8003f24:	e05c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <HAL_RCC_OscConfig+0x4b4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fe24 	bl	8001b78 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd fe20 	bl	8001b78 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e04d      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_RCC_OscConfig+0x4ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x480>
 8003f52:	e045      	b.n	8003fe0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e040      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40007000 	.word	0x40007000
 8003f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fec <HAL_RCC_OscConfig+0x538>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d030      	beq.n	8003fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d129      	bne.n	8003fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d122      	bne.n	8003fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d119      	bne.n	8003fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d10f      	bne.n	8003fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800

08003ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e042      	b.n	8004088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd fc9a 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fdff 	bl	8004c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d175      	bne.n	800419c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Transmit+0x2c>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e06e      	b.n	800419e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2221      	movs	r2, #33	@ 0x21
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ce:	f7fd fd53 	bl	8001b78 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e8:	d108      	bne.n	80040fc <HAL_UART_Transmit+0x6c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e003      	b.n	8004104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004104:	e02e      	b.n	8004164 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	@ 0x80
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb9b 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e03a      	b.n	800419e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	3302      	adds	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e007      	b.n	8004156 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1cb      	bne.n	8004106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2140      	movs	r1, #64	@ 0x40
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fb67 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e006      	b.n	800419e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b08a      	sub	sp, #40	@ 0x28
 80041aa:	af02      	add	r7, sp, #8
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	f040 8081 	bne.w	80042ca <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_UART_Receive+0x2e>
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e079      	b.n	80042cc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2222      	movs	r2, #34	@ 0x22
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ec:	f7fd fcc4 	bl	8001b78 <HAL_GetTick>
 80041f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004206:	d108      	bne.n	800421a <HAL_UART_Receive+0x74>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	e003      	b.n	8004222 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004222:	e047      	b.n	80042b4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	2120      	movs	r1, #32
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fb0c 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e042      	b.n	80042cc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10c      	bne.n	8004266 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004258:	b29a      	uxth	r2, r3
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	3302      	adds	r3, #2
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e01f      	b.n	80042a6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426e:	d007      	beq.n	8004280 <HAL_UART_Receive+0xda>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <HAL_UART_Receive+0xe8>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e008      	b.n	80042a0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800429a:	b2da      	uxtb	r2, r3
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1b2      	bne.n	8004224 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0ba      	sub	sp, #232	@ 0xe8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_UART_IRQHandler+0x66>
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fbc2 	bl	8004abc <UART_Receive_IT>
      return;
 8004338:	e25b      	b.n	80047f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800433a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80de 	beq.w	8004500 <HAL_UART_IRQHandler+0x22c>
 8004344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004354:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80d1 	beq.w	8004500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0xae>
 800436a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_UART_IRQHandler+0xd2>
 800438e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	f043 0202 	orr.w	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	f043 0208 	orr.w	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 81f2 	beq.w	80047e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_UART_IRQHandler+0x14e>
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb4d 	bl	8004abc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442c:	2b40      	cmp	r3, #64	@ 0x40
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_UART_IRQHandler+0x17a>
 8004446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d04f      	beq.n	80044ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa55 	bl	80048fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	d141      	bne.n	80044e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800447c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3314      	adds	r3, #20
 800448a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800448e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800449a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1d9      	bne.n	8004462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d013      	beq.n	80044de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ba:	4a7e      	ldr	r2, [pc, #504]	@ (80046b4 <HAL_UART_IRQHandler+0x3e0>)
 80044bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fd fde1 	bl	800208a <HAL_DMA_Abort_IT>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044d8:	4610      	mov	r0, r2
 80044da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	e00e      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f99e 	bl	8004820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	e00a      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f99a 	bl	8004820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e006      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f996 	bl	8004820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044fa:	e175      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	bf00      	nop
    return;
 80044fe:	e173      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 814f 	bne.w	80047a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8148 	beq.w	80047a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8141 	beq.w	80047a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004546:	2b40      	cmp	r3, #64	@ 0x40
 8004548:	f040 80b6 	bne.w	80046b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8145 	beq.w	80047ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800456a:	429a      	cmp	r2, r3
 800456c:	f080 813e 	bcs.w	80047ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004576:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004582:	f000 8088 	beq.w	8004696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800459c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80045b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1d9      	bne.n	8004586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e1      	bne.n	80045d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800461e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e3      	bne.n	800460e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004678:	65ba      	str	r2, [r7, #88]	@ 0x58
 800467a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800467e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e3      	bne.n	8004654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd fc8a 	bl	8001faa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8c1 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046b2:	e09b      	b.n	80047ec <HAL_UART_IRQHandler+0x518>
 80046b4:	080049c5 	.word	0x080049c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 808e 	beq.w	80047f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8089 	beq.w	80047f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004702:	647a      	str	r2, [r7, #68]	@ 0x44
 8004704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	623b      	str	r3, [r7, #32]
   return(result);
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3314      	adds	r3, #20
 8004736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800473a:	633a      	str	r2, [r7, #48]	@ 0x30
 800473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e3      	bne.n	8004716 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	60fb      	str	r3, [r7, #12]
   return(result);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0310 	bic.w	r3, r3, #16
 8004772:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004780:	61fa      	str	r2, [r7, #28]
 8004782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	69b9      	ldr	r1, [r7, #24]
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	617b      	str	r3, [r7, #20]
   return(result);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e3      	bne.n	800475c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800479a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f847 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a6:	e023      	b.n	80047f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_UART_IRQHandler+0x4f4>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f913 	bl	80049ec <UART_Transmit_IT>
    return;
 80047c6:	e014      	b.n	80047f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00e      	beq.n	80047f2 <HAL_UART_IRQHandler+0x51e>
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f953 	bl	8004a8c <UART_EndTransmit_IT>
    return;
 80047e6:	e004      	b.n	80047f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80047e8:	bf00      	nop
 80047ea:	e002      	b.n	80047f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047ec:	bf00      	nop
 80047ee:	e000      	b.n	80047f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047f0:	bf00      	nop
  }
}
 80047f2:	37e8      	adds	r7, #232	@ 0xe8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485c:	e03b      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004864:	d037      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fd f987 	bl	8001b78 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	6a3a      	ldr	r2, [r7, #32]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <UART_WaitOnFlagUntilTimeout+0x30>
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e03a      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d023      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b80      	cmp	r3, #128	@ 0x80
 8004892:	d020      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b40      	cmp	r3, #64	@ 0x40
 8004898:	d01d      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d116      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f81d 	bl	80048fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2208      	movs	r2, #8
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00f      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0b4      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048fe:	b480      	push	{r7}
 8004900:	b095      	sub	sp, #84	@ 0x54
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004926:	643a      	str	r2, [r7, #64]	@ 0x40
 8004928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800492c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	61fb      	str	r3, [r7, #28]
   return(result);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	2b01      	cmp	r3, #1
 8004974:	d119      	bne.n	80049aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	60bb      	str	r3, [r7, #8]
   return(result);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f023 0310 	bic.w	r3, r3, #16
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004996:	61ba      	str	r2, [r7, #24]
 8004998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6979      	ldr	r1, [r7, #20]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	613b      	str	r3, [r7, #16]
   return(result);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049b8:	bf00      	nop
 80049ba:	3754      	adds	r7, #84	@ 0x54
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff ff1e 	bl	8004820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b21      	cmp	r3, #33	@ 0x21
 80049fe:	d13e      	bne.n	8004a7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a08:	d114      	bne.n	8004a34 <UART_Transmit_IT+0x48>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d110      	bne.n	8004a34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]
 8004a32:	e008      	b.n	8004a46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	1c59      	adds	r1, r3, #1
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6211      	str	r1, [r2, #32]
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4619      	mov	r1, r3
 8004a54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fea3 	bl	80047f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08c      	sub	sp, #48	@ 0x30
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b22      	cmp	r3, #34	@ 0x22
 8004ace:	f040 80ae 	bne.w	8004c2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	d117      	bne.n	8004b0c <UART_Receive_IT+0x50>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b0a:	e026      	b.n	8004b5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1e:	d007      	beq.n	8004b30 <UART_Receive_IT+0x74>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <UART_Receive_IT+0x82>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e008      	b.n	8004b50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4619      	mov	r1, r3
 8004b68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d15d      	bne.n	8004c2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0220 	bic.w	r2, r2, #32
 8004b7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d135      	bne.n	8004c20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f023 0310 	bic.w	r3, r3, #16
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bda:	623a      	str	r2, [r7, #32]
 8004bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	69f9      	ldr	r1, [r7, #28]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e5      	bne.n	8004bba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d10a      	bne.n	8004c12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fe0b 	bl	8004834 <HAL_UARTEx_RxEventCallback>
 8004c1e:	e002      	b.n	8004c26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fdf3 	bl	800480c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e002      	b.n	8004c30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3730      	adds	r7, #48	@ 0x30
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c3c:	b0c0      	sub	sp, #256	@ 0x100
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	68d9      	ldr	r1, [r3, #12]
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	ea40 0301 	orr.w	r3, r0, r1
 8004c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c90:	f021 010c 	bic.w	r1, r1, #12
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb2:	6999      	ldr	r1, [r3, #24]
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	ea40 0301 	orr.w	r3, r0, r1
 8004cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b8f      	ldr	r3, [pc, #572]	@ (8004f04 <UART_SetConfig+0x2cc>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d005      	beq.n	8004cd8 <UART_SetConfig+0xa0>
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004f08 <UART_SetConfig+0x2d0>)
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d104      	bne.n	8004ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7fe fca8 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8004cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ce0:	e003      	b.n	8004cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ce2:	f7fe fc8f 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf4:	f040 810c 	bne.w	8004f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d12:	415b      	adcs	r3, r3
 8004d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	eb12 0801 	adds.w	r8, r2, r1
 8004d20:	4629      	mov	r1, r5
 8004d22:	eb43 0901 	adc.w	r9, r3, r1
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3a:	4690      	mov	r8, r2
 8004d3c:	4699      	mov	r9, r3
 8004d3e:	4623      	mov	r3, r4
 8004d40:	eb18 0303 	adds.w	r3, r8, r3
 8004d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d48:	462b      	mov	r3, r5
 8004d4a:	eb49 0303 	adc.w	r3, r9, r3
 8004d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d66:	460b      	mov	r3, r1
 8004d68:	18db      	adds	r3, r3, r3
 8004d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	eb42 0303 	adc.w	r3, r2, r3
 8004d72:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d7c:	f7fb faf8 	bl	8000370 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4b61      	ldr	r3, [pc, #388]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004d86:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	011c      	lsls	r4, r3, #4
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004da8:	415b      	adcs	r3, r3
 8004daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004db0:	4641      	mov	r1, r8
 8004db2:	eb12 0a01 	adds.w	sl, r2, r1
 8004db6:	4649      	mov	r1, r9
 8004db8:	eb43 0b01 	adc.w	fp, r3, r1
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd0:	4692      	mov	sl, r2
 8004dd2:	469b      	mov	fp, r3
 8004dd4:	4643      	mov	r3, r8
 8004dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8004dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dde:	464b      	mov	r3, r9
 8004de0:	eb4b 0303 	adc.w	r3, fp, r3
 8004de4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004df4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	18db      	adds	r3, r3, r3
 8004e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e02:	4613      	mov	r3, r2
 8004e04:	eb42 0303 	adc.w	r3, r2, r3
 8004e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e12:	f7fb faad 	bl	8000370 <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	2264      	movs	r2, #100	@ 0x64
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	1acb      	subs	r3, r1, r3
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e32:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004e34:	fba3 2302 	umull	r2, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e40:	441c      	add	r4, r3
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e98:	464b      	mov	r3, r9
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004eb8:	460b      	mov	r3, r1
 8004eba:	18db      	adds	r3, r3, r3
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	eb42 0303 	adc.w	r3, r2, r3
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ece:	f7fb fa4f 	bl	8000370 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	2164      	movs	r1, #100	@ 0x64
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	3332      	adds	r3, #50	@ 0x32
 8004eea:	4a08      	ldr	r2, [pc, #32]	@ (8004f0c <UART_SetConfig+0x2d4>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f003 0207 	and.w	r2, r3, #7
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4422      	add	r2, r4
 8004efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f00:	e106      	b.n	8005110 <UART_SetConfig+0x4d8>
 8004f02:	bf00      	nop
 8004f04:	40011000 	.word	0x40011000
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f22:	4642      	mov	r2, r8
 8004f24:	464b      	mov	r3, r9
 8004f26:	1891      	adds	r1, r2, r2
 8004f28:	6239      	str	r1, [r7, #32]
 8004f2a:	415b      	adcs	r3, r3
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f32:	4641      	mov	r1, r8
 8004f34:	1854      	adds	r4, r2, r1
 8004f36:	4649      	mov	r1, r9
 8004f38:	eb43 0501 	adc.w	r5, r3, r1
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	00eb      	lsls	r3, r5, #3
 8004f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f4a:	00e2      	lsls	r2, r4, #3
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	461d      	mov	r5, r3
 8004f50:	4643      	mov	r3, r8
 8004f52:	18e3      	adds	r3, r4, r3
 8004f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f58:	464b      	mov	r3, r9
 8004f5a:	eb45 0303 	adc.w	r3, r5, r3
 8004f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f7e:	4629      	mov	r1, r5
 8004f80:	008b      	lsls	r3, r1, #2
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f88:	4621      	mov	r1, r4
 8004f8a:	008a      	lsls	r2, r1, #2
 8004f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f90:	f7fb f9ee 	bl	8000370 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4b60      	ldr	r3, [pc, #384]	@ (800511c <UART_SetConfig+0x4e4>)
 8004f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	011c      	lsls	r4, r3, #4
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	61b9      	str	r1, [r7, #24]
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1851      	adds	r1, r2, r1
 8004fc8:	6139      	str	r1, [r7, #16]
 8004fca:	4649      	mov	r1, r9
 8004fcc:	414b      	adcs	r3, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fdc:	4659      	mov	r1, fp
 8004fde:	00cb      	lsls	r3, r1, #3
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	00ca      	lsls	r2, r1, #3
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	eb42 0303 	adc.w	r3, r2, r3
 8005000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800500e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800501c:	4649      	mov	r1, r9
 800501e:	008b      	lsls	r3, r1, #2
 8005020:	4641      	mov	r1, r8
 8005022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005026:	4641      	mov	r1, r8
 8005028:	008a      	lsls	r2, r1, #2
 800502a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800502e:	f7fb f99f 	bl	8000370 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4611      	mov	r1, r2
 8005038:	4b38      	ldr	r3, [pc, #224]	@ (800511c <UART_SetConfig+0x4e4>)
 800503a:	fba3 2301 	umull	r2, r3, r3, r1
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2264      	movs	r2, #100	@ 0x64
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	1acb      	subs	r3, r1, r3
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	3332      	adds	r3, #50	@ 0x32
 800504c:	4a33      	ldr	r2, [pc, #204]	@ (800511c <UART_SetConfig+0x4e4>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005058:	441c      	add	r4, r3
 800505a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800505e:	2200      	movs	r2, #0
 8005060:	673b      	str	r3, [r7, #112]	@ 0x70
 8005062:	677a      	str	r2, [r7, #116]	@ 0x74
 8005064:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	415b      	adcs	r3, r3
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050aa:	464b      	mov	r3, r9
 80050ac:	460a      	mov	r2, r1
 80050ae:	eb42 0303 	adc.w	r3, r2, r3
 80050b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80050be:	667a      	str	r2, [r7, #100]	@ 0x64
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050cc:	4649      	mov	r1, r9
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	4641      	mov	r1, r8
 80050d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d6:	4641      	mov	r1, r8
 80050d8:	008a      	lsls	r2, r1, #2
 80050da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050de:	f7fb f947 	bl	8000370 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <UART_SetConfig+0x4e4>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	@ 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	3332      	adds	r3, #50	@ 0x32
 80050fa:	4a08      	ldr	r2, [pc, #32]	@ (800511c <UART_SetConfig+0x4e4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 020f 	and.w	r2, r3, #15
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4422      	add	r2, r4
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005116:	46bd      	mov	sp, r7
 8005118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800511c:	51eb851f 	.word	0x51eb851f

08005120 <malloc>:
 8005120:	4b02      	ldr	r3, [pc, #8]	@ (800512c <malloc+0xc>)
 8005122:	4601      	mov	r1, r0
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f000 b82d 	b.w	8005184 <_malloc_r>
 800512a:	bf00      	nop
 800512c:	20000018 	.word	0x20000018

08005130 <free>:
 8005130:	4b02      	ldr	r3, [pc, #8]	@ (800513c <free+0xc>)
 8005132:	4601      	mov	r1, r0
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	f000 ba49 	b.w	80055cc <_free_r>
 800513a:	bf00      	nop
 800513c:	20000018 	.word	0x20000018

08005140 <sbrk_aligned>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4e0f      	ldr	r6, [pc, #60]	@ (8005180 <sbrk_aligned+0x40>)
 8005144:	460c      	mov	r4, r1
 8005146:	6831      	ldr	r1, [r6, #0]
 8005148:	4605      	mov	r5, r0
 800514a:	b911      	cbnz	r1, 8005152 <sbrk_aligned+0x12>
 800514c:	f000 fa00 	bl	8005550 <_sbrk_r>
 8005150:	6030      	str	r0, [r6, #0]
 8005152:	4621      	mov	r1, r4
 8005154:	4628      	mov	r0, r5
 8005156:	f000 f9fb 	bl	8005550 <_sbrk_r>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	d103      	bne.n	8005166 <sbrk_aligned+0x26>
 800515e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005162:	4620      	mov	r0, r4
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	1cc4      	adds	r4, r0, #3
 8005168:	f024 0403 	bic.w	r4, r4, #3
 800516c:	42a0      	cmp	r0, r4
 800516e:	d0f8      	beq.n	8005162 <sbrk_aligned+0x22>
 8005170:	1a21      	subs	r1, r4, r0
 8005172:	4628      	mov	r0, r5
 8005174:	f000 f9ec 	bl	8005550 <_sbrk_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d1f2      	bne.n	8005162 <sbrk_aligned+0x22>
 800517c:	e7ef      	b.n	800515e <sbrk_aligned+0x1e>
 800517e:	bf00      	nop
 8005180:	200001b4 	.word	0x200001b4

08005184 <_malloc_r>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	1ccd      	adds	r5, r1, #3
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	3508      	adds	r5, #8
 8005190:	2d0c      	cmp	r5, #12
 8005192:	bf38      	it	cc
 8005194:	250c      	movcc	r5, #12
 8005196:	2d00      	cmp	r5, #0
 8005198:	4606      	mov	r6, r0
 800519a:	db01      	blt.n	80051a0 <_malloc_r+0x1c>
 800519c:	42a9      	cmp	r1, r5
 800519e:	d904      	bls.n	80051aa <_malloc_r+0x26>
 80051a0:	230c      	movs	r3, #12
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	2000      	movs	r0, #0
 80051a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005280 <_malloc_r+0xfc>
 80051ae:	f000 f869 	bl	8005284 <__malloc_lock>
 80051b2:	f8d8 3000 	ldr.w	r3, [r8]
 80051b6:	461c      	mov	r4, r3
 80051b8:	bb44      	cbnz	r4, 800520c <_malloc_r+0x88>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ffbf 	bl	8005140 <sbrk_aligned>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	4604      	mov	r4, r0
 80051c6:	d158      	bne.n	800527a <_malloc_r+0xf6>
 80051c8:	f8d8 4000 	ldr.w	r4, [r8]
 80051cc:	4627      	mov	r7, r4
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	d143      	bne.n	800525a <_malloc_r+0xd6>
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d04b      	beq.n	800526e <_malloc_r+0xea>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	4639      	mov	r1, r7
 80051da:	4630      	mov	r0, r6
 80051dc:	eb04 0903 	add.w	r9, r4, r3
 80051e0:	f000 f9b6 	bl	8005550 <_sbrk_r>
 80051e4:	4581      	cmp	r9, r0
 80051e6:	d142      	bne.n	800526e <_malloc_r+0xea>
 80051e8:	6821      	ldr	r1, [r4, #0]
 80051ea:	1a6d      	subs	r5, r5, r1
 80051ec:	4629      	mov	r1, r5
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7ff ffa6 	bl	8005140 <sbrk_aligned>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d03a      	beq.n	800526e <_malloc_r+0xea>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	442b      	add	r3, r5
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	bb62      	cbnz	r2, 8005260 <_malloc_r+0xdc>
 8005206:	f8c8 7000 	str.w	r7, [r8]
 800520a:	e00f      	b.n	800522c <_malloc_r+0xa8>
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	1b52      	subs	r2, r2, r5
 8005210:	d420      	bmi.n	8005254 <_malloc_r+0xd0>
 8005212:	2a0b      	cmp	r2, #11
 8005214:	d917      	bls.n	8005246 <_malloc_r+0xc2>
 8005216:	1961      	adds	r1, r4, r5
 8005218:	42a3      	cmp	r3, r4
 800521a:	6025      	str	r5, [r4, #0]
 800521c:	bf18      	it	ne
 800521e:	6059      	strne	r1, [r3, #4]
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	bf08      	it	eq
 8005224:	f8c8 1000 	streq.w	r1, [r8]
 8005228:	5162      	str	r2, [r4, r5]
 800522a:	604b      	str	r3, [r1, #4]
 800522c:	4630      	mov	r0, r6
 800522e:	f000 f82f 	bl	8005290 <__malloc_unlock>
 8005232:	f104 000b 	add.w	r0, r4, #11
 8005236:	1d23      	adds	r3, r4, #4
 8005238:	f020 0007 	bic.w	r0, r0, #7
 800523c:	1ac2      	subs	r2, r0, r3
 800523e:	bf1c      	itt	ne
 8005240:	1a1b      	subne	r3, r3, r0
 8005242:	50a3      	strne	r3, [r4, r2]
 8005244:	e7af      	b.n	80051a6 <_malloc_r+0x22>
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	42a3      	cmp	r3, r4
 800524a:	bf0c      	ite	eq
 800524c:	f8c8 2000 	streq.w	r2, [r8]
 8005250:	605a      	strne	r2, [r3, #4]
 8005252:	e7eb      	b.n	800522c <_malloc_r+0xa8>
 8005254:	4623      	mov	r3, r4
 8005256:	6864      	ldr	r4, [r4, #4]
 8005258:	e7ae      	b.n	80051b8 <_malloc_r+0x34>
 800525a:	463c      	mov	r4, r7
 800525c:	687f      	ldr	r7, [r7, #4]
 800525e:	e7b6      	b.n	80051ce <_malloc_r+0x4a>
 8005260:	461a      	mov	r2, r3
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	d1fb      	bne.n	8005260 <_malloc_r+0xdc>
 8005268:	2300      	movs	r3, #0
 800526a:	6053      	str	r3, [r2, #4]
 800526c:	e7de      	b.n	800522c <_malloc_r+0xa8>
 800526e:	230c      	movs	r3, #12
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	4630      	mov	r0, r6
 8005274:	f000 f80c 	bl	8005290 <__malloc_unlock>
 8005278:	e794      	b.n	80051a4 <_malloc_r+0x20>
 800527a:	6005      	str	r5, [r0, #0]
 800527c:	e7d6      	b.n	800522c <_malloc_r+0xa8>
 800527e:	bf00      	nop
 8005280:	200001b8 	.word	0x200001b8

08005284 <__malloc_lock>:
 8005284:	4801      	ldr	r0, [pc, #4]	@ (800528c <__malloc_lock+0x8>)
 8005286:	f000 b99e 	b.w	80055c6 <__retarget_lock_acquire_recursive>
 800528a:	bf00      	nop
 800528c:	200002f8 	.word	0x200002f8

08005290 <__malloc_unlock>:
 8005290:	4801      	ldr	r0, [pc, #4]	@ (8005298 <__malloc_unlock+0x8>)
 8005292:	f000 b999 	b.w	80055c8 <__retarget_lock_release_recursive>
 8005296:	bf00      	nop
 8005298:	200002f8 	.word	0x200002f8

0800529c <siprintf>:
 800529c:	b40e      	push	{r1, r2, r3}
 800529e:	b500      	push	{lr}
 80052a0:	b09c      	sub	sp, #112	@ 0x70
 80052a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80052a4:	9002      	str	r0, [sp, #8]
 80052a6:	9006      	str	r0, [sp, #24]
 80052a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052ac:	4809      	ldr	r0, [pc, #36]	@ (80052d4 <siprintf+0x38>)
 80052ae:	9107      	str	r1, [sp, #28]
 80052b0:	9104      	str	r1, [sp, #16]
 80052b2:	4909      	ldr	r1, [pc, #36]	@ (80052d8 <siprintf+0x3c>)
 80052b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b8:	9105      	str	r1, [sp, #20]
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	a902      	add	r1, sp, #8
 80052c0:	f000 fa2a 	bl	8005718 <_svfiprintf_r>
 80052c4:	9b02      	ldr	r3, [sp, #8]
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	b01c      	add	sp, #112	@ 0x70
 80052cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d0:	b003      	add	sp, #12
 80052d2:	4770      	bx	lr
 80052d4:	20000018 	.word	0x20000018
 80052d8:	ffff0208 	.word	0xffff0208

080052dc <std>:
 80052dc:	2300      	movs	r3, #0
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	e9c0 3300 	strd	r3, r3, [r0]
 80052e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ea:	6083      	str	r3, [r0, #8]
 80052ec:	8181      	strh	r1, [r0, #12]
 80052ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80052f0:	81c2      	strh	r2, [r0, #14]
 80052f2:	6183      	str	r3, [r0, #24]
 80052f4:	4619      	mov	r1, r3
 80052f6:	2208      	movs	r2, #8
 80052f8:	305c      	adds	r0, #92	@ 0x5c
 80052fa:	f000 f921 	bl	8005540 <memset>
 80052fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <std+0x58>)
 8005300:	6263      	str	r3, [r4, #36]	@ 0x24
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x5c>)
 8005304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x60>)
 8005308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <std+0x64>)
 800530c:	6323      	str	r3, [r4, #48]	@ 0x30
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x68>)
 8005310:	6224      	str	r4, [r4, #32]
 8005312:	429c      	cmp	r4, r3
 8005314:	d006      	beq.n	8005324 <std+0x48>
 8005316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800531a:	4294      	cmp	r4, r2
 800531c:	d002      	beq.n	8005324 <std+0x48>
 800531e:	33d0      	adds	r3, #208	@ 0xd0
 8005320:	429c      	cmp	r4, r3
 8005322:	d105      	bne.n	8005330 <std+0x54>
 8005324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532c:	f000 b94a 	b.w	80055c4 <__retarget_lock_init_recursive>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	08006009 	.word	0x08006009
 8005338:	0800602b 	.word	0x0800602b
 800533c:	08006063 	.word	0x08006063
 8005340:	08006087 	.word	0x08006087
 8005344:	200001bc 	.word	0x200001bc

08005348 <stdio_exit_handler>:
 8005348:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <stdio_exit_handler+0xc>)
 800534a:	4903      	ldr	r1, [pc, #12]	@ (8005358 <stdio_exit_handler+0x10>)
 800534c:	4803      	ldr	r0, [pc, #12]	@ (800535c <stdio_exit_handler+0x14>)
 800534e:	f000 b869 	b.w	8005424 <_fwalk_sglue>
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
 8005358:	08005fb9 	.word	0x08005fb9
 800535c:	2000001c 	.word	0x2000001c

08005360 <cleanup_stdio>:
 8005360:	6841      	ldr	r1, [r0, #4]
 8005362:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <cleanup_stdio+0x34>)
 8005364:	4299      	cmp	r1, r3
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	d001      	beq.n	8005370 <cleanup_stdio+0x10>
 800536c:	f000 fe24 	bl	8005fb8 <_fflush_r>
 8005370:	68a1      	ldr	r1, [r4, #8]
 8005372:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <cleanup_stdio+0x38>)
 8005374:	4299      	cmp	r1, r3
 8005376:	d002      	beq.n	800537e <cleanup_stdio+0x1e>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fe1d 	bl	8005fb8 <_fflush_r>
 800537e:	68e1      	ldr	r1, [r4, #12]
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <cleanup_stdio+0x3c>)
 8005382:	4299      	cmp	r1, r3
 8005384:	d004      	beq.n	8005390 <cleanup_stdio+0x30>
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f000 be14 	b.w	8005fb8 <_fflush_r>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	bf00      	nop
 8005394:	200001bc 	.word	0x200001bc
 8005398:	20000224 	.word	0x20000224
 800539c:	2000028c 	.word	0x2000028c

080053a0 <global_stdio_init.part.0>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <global_stdio_init.part.0+0x30>)
 80053a4:	4c0b      	ldr	r4, [pc, #44]	@ (80053d4 <global_stdio_init.part.0+0x34>)
 80053a6:	4a0c      	ldr	r2, [pc, #48]	@ (80053d8 <global_stdio_init.part.0+0x38>)
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	2200      	movs	r2, #0
 80053ae:	2104      	movs	r1, #4
 80053b0:	f7ff ff94 	bl	80052dc <std>
 80053b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053b8:	2201      	movs	r2, #1
 80053ba:	2109      	movs	r1, #9
 80053bc:	f7ff ff8e 	bl	80052dc <std>
 80053c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053c4:	2202      	movs	r2, #2
 80053c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ca:	2112      	movs	r1, #18
 80053cc:	f7ff bf86 	b.w	80052dc <std>
 80053d0:	200002f4 	.word	0x200002f4
 80053d4:	200001bc 	.word	0x200001bc
 80053d8:	08005349 	.word	0x08005349

080053dc <__sfp_lock_acquire>:
 80053dc:	4801      	ldr	r0, [pc, #4]	@ (80053e4 <__sfp_lock_acquire+0x8>)
 80053de:	f000 b8f2 	b.w	80055c6 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	200002f9 	.word	0x200002f9

080053e8 <__sfp_lock_release>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__sfp_lock_release+0x8>)
 80053ea:	f000 b8ed 	b.w	80055c8 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	200002f9 	.word	0x200002f9

080053f4 <__sinit>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4604      	mov	r4, r0
 80053f8:	f7ff fff0 	bl	80053dc <__sfp_lock_acquire>
 80053fc:	6a23      	ldr	r3, [r4, #32]
 80053fe:	b11b      	cbz	r3, 8005408 <__sinit+0x14>
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f7ff bff0 	b.w	80053e8 <__sfp_lock_release>
 8005408:	4b04      	ldr	r3, [pc, #16]	@ (800541c <__sinit+0x28>)
 800540a:	6223      	str	r3, [r4, #32]
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__sinit+0x2c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f5      	bne.n	8005400 <__sinit+0xc>
 8005414:	f7ff ffc4 	bl	80053a0 <global_stdio_init.part.0>
 8005418:	e7f2      	b.n	8005400 <__sinit+0xc>
 800541a:	bf00      	nop
 800541c:	08005361 	.word	0x08005361
 8005420:	200002f4 	.word	0x200002f4

08005424 <_fwalk_sglue>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	4607      	mov	r7, r0
 800542a:	4688      	mov	r8, r1
 800542c:	4614      	mov	r4, r2
 800542e:	2600      	movs	r6, #0
 8005430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005434:	f1b9 0901 	subs.w	r9, r9, #1
 8005438:	d505      	bpl.n	8005446 <_fwalk_sglue+0x22>
 800543a:	6824      	ldr	r4, [r4, #0]
 800543c:	2c00      	cmp	r4, #0
 800543e:	d1f7      	bne.n	8005430 <_fwalk_sglue+0xc>
 8005440:	4630      	mov	r0, r6
 8005442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d907      	bls.n	800545c <_fwalk_sglue+0x38>
 800544c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005450:	3301      	adds	r3, #1
 8005452:	d003      	beq.n	800545c <_fwalk_sglue+0x38>
 8005454:	4629      	mov	r1, r5
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	4306      	orrs	r6, r0
 800545c:	3568      	adds	r5, #104	@ 0x68
 800545e:	e7e9      	b.n	8005434 <_fwalk_sglue+0x10>

08005460 <iprintf>:
 8005460:	b40f      	push	{r0, r1, r2, r3}
 8005462:	b507      	push	{r0, r1, r2, lr}
 8005464:	4906      	ldr	r1, [pc, #24]	@ (8005480 <iprintf+0x20>)
 8005466:	ab04      	add	r3, sp, #16
 8005468:	6808      	ldr	r0, [r1, #0]
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	6881      	ldr	r1, [r0, #8]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	f000 fa77 	bl	8005964 <_vfiprintf_r>
 8005476:	b003      	add	sp, #12
 8005478:	f85d eb04 	ldr.w	lr, [sp], #4
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	20000018 	.word	0x20000018

08005484 <_puts_r>:
 8005484:	6a03      	ldr	r3, [r0, #32]
 8005486:	b570      	push	{r4, r5, r6, lr}
 8005488:	6884      	ldr	r4, [r0, #8]
 800548a:	4605      	mov	r5, r0
 800548c:	460e      	mov	r6, r1
 800548e:	b90b      	cbnz	r3, 8005494 <_puts_r+0x10>
 8005490:	f7ff ffb0 	bl	80053f4 <__sinit>
 8005494:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_puts_r+0x22>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	0598      	lsls	r0, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_puts_r+0x22>
 80054a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a2:	f000 f890 	bl	80055c6 <__retarget_lock_acquire_recursive>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	0719      	lsls	r1, r3, #28
 80054aa:	d502      	bpl.n	80054b2 <_puts_r+0x2e>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d135      	bne.n	800551e <_puts_r+0x9a>
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 fe57 	bl	8006168 <__swsetup_r>
 80054ba:	b380      	cbz	r0, 800551e <_puts_r+0x9a>
 80054bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c2:	07da      	lsls	r2, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x4e>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	059b      	lsls	r3, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x4e>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f000 f87b 	bl	80055c8 <__retarget_lock_release_recursive>
 80054d2:	4628      	mov	r0, r5
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da04      	bge.n	80054e4 <_puts_r+0x60>
 80054da:	69a2      	ldr	r2, [r4, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	dc17      	bgt.n	8005510 <_puts_r+0x8c>
 80054e0:	290a      	cmp	r1, #10
 80054e2:	d015      	beq.n	8005510 <_puts_r+0x8c>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054f2:	3b01      	subs	r3, #1
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d1ed      	bne.n	80054d6 <_puts_r+0x52>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da11      	bge.n	8005522 <_puts_r+0x9e>
 80054fe:	4622      	mov	r2, r4
 8005500:	210a      	movs	r1, #10
 8005502:	4628      	mov	r0, r5
 8005504:	f000 fdf1 	bl	80060ea <__swbuf_r>
 8005508:	3001      	adds	r0, #1
 800550a:	d0d7      	beq.n	80054bc <_puts_r+0x38>
 800550c:	250a      	movs	r5, #10
 800550e:	e7d7      	b.n	80054c0 <_puts_r+0x3c>
 8005510:	4622      	mov	r2, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 fde9 	bl	80060ea <__swbuf_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d1e7      	bne.n	80054ec <_puts_r+0x68>
 800551c:	e7ce      	b.n	80054bc <_puts_r+0x38>
 800551e:	3e01      	subs	r6, #1
 8005520:	e7e4      	b.n	80054ec <_puts_r+0x68>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	220a      	movs	r2, #10
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e7ee      	b.n	800550c <_puts_r+0x88>
	...

08005530 <puts>:
 8005530:	4b02      	ldr	r3, [pc, #8]	@ (800553c <puts+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f7ff bfa5 	b.w	8005484 <_puts_r>
 800553a:	bf00      	nop
 800553c:	20000018 	.word	0x20000018

08005540 <memset>:
 8005540:	4402      	add	r2, r0
 8005542:	4603      	mov	r3, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d06      	ldr	r5, [pc, #24]	@ (800556c <_sbrk_r+0x1c>)
 8005554:	2300      	movs	r3, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fc f95c 	bl	8001818 <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200002fc 	.word	0x200002fc

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	@ (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000018 	.word	0x20000018

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	@ (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	@ (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	@ (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	@ (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 ff3a 	bl	8006408 <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08006678 	.word	0x08006678
 80055b8:	08006678 	.word	0x08006678
 80055bc:	08006678 	.word	0x08006678
 80055c0:	0800667c 	.word	0x0800667c

080055c4 <__retarget_lock_init_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_acquire_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <__retarget_lock_release_recursive>:
 80055c8:	4770      	bx	lr
	...

080055cc <_free_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4605      	mov	r5, r0
 80055d0:	2900      	cmp	r1, #0
 80055d2:	d041      	beq.n	8005658 <_free_r+0x8c>
 80055d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d8:	1f0c      	subs	r4, r1, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bfb8      	it	lt
 80055de:	18e4      	addlt	r4, r4, r3
 80055e0:	f7ff fe50 	bl	8005284 <__malloc_lock>
 80055e4:	4a1d      	ldr	r2, [pc, #116]	@ (800565c <_free_r+0x90>)
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	b933      	cbnz	r3, 80055f8 <_free_r+0x2c>
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	4628      	mov	r0, r5
 80055f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f4:	f7ff be4c 	b.w	8005290 <__malloc_unlock>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d908      	bls.n	800560e <_free_r+0x42>
 80055fc:	6820      	ldr	r0, [r4, #0]
 80055fe:	1821      	adds	r1, r4, r0
 8005600:	428b      	cmp	r3, r1
 8005602:	bf01      	itttt	eq
 8005604:	6819      	ldreq	r1, [r3, #0]
 8005606:	685b      	ldreq	r3, [r3, #4]
 8005608:	1809      	addeq	r1, r1, r0
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	e7ed      	b.n	80055ea <_free_r+0x1e>
 800560e:	461a      	mov	r2, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b10b      	cbz	r3, 8005618 <_free_r+0x4c>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d9fa      	bls.n	800560e <_free_r+0x42>
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	1850      	adds	r0, r2, r1
 800561c:	42a0      	cmp	r0, r4
 800561e:	d10b      	bne.n	8005638 <_free_r+0x6c>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	4401      	add	r1, r0
 8005624:	1850      	adds	r0, r2, r1
 8005626:	4283      	cmp	r3, r0
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	d1e0      	bne.n	80055ee <_free_r+0x22>
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	6053      	str	r3, [r2, #4]
 8005632:	4408      	add	r0, r1
 8005634:	6010      	str	r0, [r2, #0]
 8005636:	e7da      	b.n	80055ee <_free_r+0x22>
 8005638:	d902      	bls.n	8005640 <_free_r+0x74>
 800563a:	230c      	movs	r3, #12
 800563c:	602b      	str	r3, [r5, #0]
 800563e:	e7d6      	b.n	80055ee <_free_r+0x22>
 8005640:	6820      	ldr	r0, [r4, #0]
 8005642:	1821      	adds	r1, r4, r0
 8005644:	428b      	cmp	r3, r1
 8005646:	bf04      	itt	eq
 8005648:	6819      	ldreq	r1, [r3, #0]
 800564a:	685b      	ldreq	r3, [r3, #4]
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	bf04      	itt	eq
 8005650:	1809      	addeq	r1, r1, r0
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	6054      	str	r4, [r2, #4]
 8005656:	e7ca      	b.n	80055ee <_free_r+0x22>
 8005658:	bd38      	pop	{r3, r4, r5, pc}
 800565a:	bf00      	nop
 800565c:	200001b8 	.word	0x200001b8

08005660 <__ssputs_r>:
 8005660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	688e      	ldr	r6, [r1, #8]
 8005666:	461f      	mov	r7, r3
 8005668:	42be      	cmp	r6, r7
 800566a:	680b      	ldr	r3, [r1, #0]
 800566c:	4682      	mov	sl, r0
 800566e:	460c      	mov	r4, r1
 8005670:	4690      	mov	r8, r2
 8005672:	d82d      	bhi.n	80056d0 <__ssputs_r+0x70>
 8005674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800567c:	d026      	beq.n	80056cc <__ssputs_r+0x6c>
 800567e:	6965      	ldr	r5, [r4, #20]
 8005680:	6909      	ldr	r1, [r1, #16]
 8005682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005686:	eba3 0901 	sub.w	r9, r3, r1
 800568a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800568e:	1c7b      	adds	r3, r7, #1
 8005690:	444b      	add	r3, r9
 8005692:	106d      	asrs	r5, r5, #1
 8005694:	429d      	cmp	r5, r3
 8005696:	bf38      	it	cc
 8005698:	461d      	movcc	r5, r3
 800569a:	0553      	lsls	r3, r2, #21
 800569c:	d527      	bpl.n	80056ee <__ssputs_r+0x8e>
 800569e:	4629      	mov	r1, r5
 80056a0:	f7ff fd70 	bl	8005184 <_malloc_r>
 80056a4:	4606      	mov	r6, r0
 80056a6:	b360      	cbz	r0, 8005702 <__ssputs_r+0xa2>
 80056a8:	6921      	ldr	r1, [r4, #16]
 80056aa:	464a      	mov	r2, r9
 80056ac:	f000 fe96 	bl	80063dc <memcpy>
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	6126      	str	r6, [r4, #16]
 80056be:	6165      	str	r5, [r4, #20]
 80056c0:	444e      	add	r6, r9
 80056c2:	eba5 0509 	sub.w	r5, r5, r9
 80056c6:	6026      	str	r6, [r4, #0]
 80056c8:	60a5      	str	r5, [r4, #8]
 80056ca:	463e      	mov	r6, r7
 80056cc:	42be      	cmp	r6, r7
 80056ce:	d900      	bls.n	80056d2 <__ssputs_r+0x72>
 80056d0:	463e      	mov	r6, r7
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	4632      	mov	r2, r6
 80056d6:	4641      	mov	r1, r8
 80056d8:	f000 fdfe 	bl	80062d8 <memmove>
 80056dc:	68a3      	ldr	r3, [r4, #8]
 80056de:	1b9b      	subs	r3, r3, r6
 80056e0:	60a3      	str	r3, [r4, #8]
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	4433      	add	r3, r6
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	2000      	movs	r0, #0
 80056ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ee:	462a      	mov	r2, r5
 80056f0:	f000 fccd 	bl	800608e <_realloc_r>
 80056f4:	4606      	mov	r6, r0
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d1e0      	bne.n	80056bc <__ssputs_r+0x5c>
 80056fa:	6921      	ldr	r1, [r4, #16]
 80056fc:	4650      	mov	r0, sl
 80056fe:	f7ff ff65 	bl	80055cc <_free_r>
 8005702:	230c      	movs	r3, #12
 8005704:	f8ca 3000 	str.w	r3, [sl]
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005714:	e7e9      	b.n	80056ea <__ssputs_r+0x8a>
	...

08005718 <_svfiprintf_r>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	4698      	mov	r8, r3
 800571e:	898b      	ldrh	r3, [r1, #12]
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	b09d      	sub	sp, #116	@ 0x74
 8005724:	4607      	mov	r7, r0
 8005726:	460d      	mov	r5, r1
 8005728:	4614      	mov	r4, r2
 800572a:	d510      	bpl.n	800574e <_svfiprintf_r+0x36>
 800572c:	690b      	ldr	r3, [r1, #16]
 800572e:	b973      	cbnz	r3, 800574e <_svfiprintf_r+0x36>
 8005730:	2140      	movs	r1, #64	@ 0x40
 8005732:	f7ff fd27 	bl	8005184 <_malloc_r>
 8005736:	6028      	str	r0, [r5, #0]
 8005738:	6128      	str	r0, [r5, #16]
 800573a:	b930      	cbnz	r0, 800574a <_svfiprintf_r+0x32>
 800573c:	230c      	movs	r3, #12
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005744:	b01d      	add	sp, #116	@ 0x74
 8005746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574a:	2340      	movs	r3, #64	@ 0x40
 800574c:	616b      	str	r3, [r5, #20]
 800574e:	2300      	movs	r3, #0
 8005750:	9309      	str	r3, [sp, #36]	@ 0x24
 8005752:	2320      	movs	r3, #32
 8005754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005758:	f8cd 800c 	str.w	r8, [sp, #12]
 800575c:	2330      	movs	r3, #48	@ 0x30
 800575e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058fc <_svfiprintf_r+0x1e4>
 8005762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005766:	f04f 0901 	mov.w	r9, #1
 800576a:	4623      	mov	r3, r4
 800576c:	469a      	mov	sl, r3
 800576e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005772:	b10a      	cbz	r2, 8005778 <_svfiprintf_r+0x60>
 8005774:	2a25      	cmp	r2, #37	@ 0x25
 8005776:	d1f9      	bne.n	800576c <_svfiprintf_r+0x54>
 8005778:	ebba 0b04 	subs.w	fp, sl, r4
 800577c:	d00b      	beq.n	8005796 <_svfiprintf_r+0x7e>
 800577e:	465b      	mov	r3, fp
 8005780:	4622      	mov	r2, r4
 8005782:	4629      	mov	r1, r5
 8005784:	4638      	mov	r0, r7
 8005786:	f7ff ff6b 	bl	8005660 <__ssputs_r>
 800578a:	3001      	adds	r0, #1
 800578c:	f000 80a7 	beq.w	80058de <_svfiprintf_r+0x1c6>
 8005790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005792:	445a      	add	r2, fp
 8005794:	9209      	str	r2, [sp, #36]	@ 0x24
 8005796:	f89a 3000 	ldrb.w	r3, [sl]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 809f 	beq.w	80058de <_svfiprintf_r+0x1c6>
 80057a0:	2300      	movs	r3, #0
 80057a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057aa:	f10a 0a01 	add.w	sl, sl, #1
 80057ae:	9304      	str	r3, [sp, #16]
 80057b0:	9307      	str	r3, [sp, #28]
 80057b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80057b8:	4654      	mov	r4, sl
 80057ba:	2205      	movs	r2, #5
 80057bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c0:	484e      	ldr	r0, [pc, #312]	@ (80058fc <_svfiprintf_r+0x1e4>)
 80057c2:	f7fa fd35 	bl	8000230 <memchr>
 80057c6:	9a04      	ldr	r2, [sp, #16]
 80057c8:	b9d8      	cbnz	r0, 8005802 <_svfiprintf_r+0xea>
 80057ca:	06d0      	lsls	r0, r2, #27
 80057cc:	bf44      	itt	mi
 80057ce:	2320      	movmi	r3, #32
 80057d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057d4:	0711      	lsls	r1, r2, #28
 80057d6:	bf44      	itt	mi
 80057d8:	232b      	movmi	r3, #43	@ 0x2b
 80057da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057de:	f89a 3000 	ldrb.w	r3, [sl]
 80057e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80057e4:	d015      	beq.n	8005812 <_svfiprintf_r+0xfa>
 80057e6:	9a07      	ldr	r2, [sp, #28]
 80057e8:	4654      	mov	r4, sl
 80057ea:	2000      	movs	r0, #0
 80057ec:	f04f 0c0a 	mov.w	ip, #10
 80057f0:	4621      	mov	r1, r4
 80057f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f6:	3b30      	subs	r3, #48	@ 0x30
 80057f8:	2b09      	cmp	r3, #9
 80057fa:	d94b      	bls.n	8005894 <_svfiprintf_r+0x17c>
 80057fc:	b1b0      	cbz	r0, 800582c <_svfiprintf_r+0x114>
 80057fe:	9207      	str	r2, [sp, #28]
 8005800:	e014      	b.n	800582c <_svfiprintf_r+0x114>
 8005802:	eba0 0308 	sub.w	r3, r0, r8
 8005806:	fa09 f303 	lsl.w	r3, r9, r3
 800580a:	4313      	orrs	r3, r2
 800580c:	9304      	str	r3, [sp, #16]
 800580e:	46a2      	mov	sl, r4
 8005810:	e7d2      	b.n	80057b8 <_svfiprintf_r+0xa0>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	1d19      	adds	r1, r3, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	9103      	str	r1, [sp, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	bfbb      	ittet	lt
 800581e:	425b      	neglt	r3, r3
 8005820:	f042 0202 	orrlt.w	r2, r2, #2
 8005824:	9307      	strge	r3, [sp, #28]
 8005826:	9307      	strlt	r3, [sp, #28]
 8005828:	bfb8      	it	lt
 800582a:	9204      	strlt	r2, [sp, #16]
 800582c:	7823      	ldrb	r3, [r4, #0]
 800582e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005830:	d10a      	bne.n	8005848 <_svfiprintf_r+0x130>
 8005832:	7863      	ldrb	r3, [r4, #1]
 8005834:	2b2a      	cmp	r3, #42	@ 0x2a
 8005836:	d132      	bne.n	800589e <_svfiprintf_r+0x186>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	1d1a      	adds	r2, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	9203      	str	r2, [sp, #12]
 8005840:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005844:	3402      	adds	r4, #2
 8005846:	9305      	str	r3, [sp, #20]
 8005848:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800590c <_svfiprintf_r+0x1f4>
 800584c:	7821      	ldrb	r1, [r4, #0]
 800584e:	2203      	movs	r2, #3
 8005850:	4650      	mov	r0, sl
 8005852:	f7fa fced 	bl	8000230 <memchr>
 8005856:	b138      	cbz	r0, 8005868 <_svfiprintf_r+0x150>
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	eba0 000a 	sub.w	r0, r0, sl
 800585e:	2240      	movs	r2, #64	@ 0x40
 8005860:	4082      	lsls	r2, r0
 8005862:	4313      	orrs	r3, r2
 8005864:	3401      	adds	r4, #1
 8005866:	9304      	str	r3, [sp, #16]
 8005868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586c:	4824      	ldr	r0, [pc, #144]	@ (8005900 <_svfiprintf_r+0x1e8>)
 800586e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005872:	2206      	movs	r2, #6
 8005874:	f7fa fcdc 	bl	8000230 <memchr>
 8005878:	2800      	cmp	r0, #0
 800587a:	d036      	beq.n	80058ea <_svfiprintf_r+0x1d2>
 800587c:	4b21      	ldr	r3, [pc, #132]	@ (8005904 <_svfiprintf_r+0x1ec>)
 800587e:	bb1b      	cbnz	r3, 80058c8 <_svfiprintf_r+0x1b0>
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	3307      	adds	r3, #7
 8005884:	f023 0307 	bic.w	r3, r3, #7
 8005888:	3308      	adds	r3, #8
 800588a:	9303      	str	r3, [sp, #12]
 800588c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588e:	4433      	add	r3, r6
 8005890:	9309      	str	r3, [sp, #36]	@ 0x24
 8005892:	e76a      	b.n	800576a <_svfiprintf_r+0x52>
 8005894:	fb0c 3202 	mla	r2, ip, r2, r3
 8005898:	460c      	mov	r4, r1
 800589a:	2001      	movs	r0, #1
 800589c:	e7a8      	b.n	80057f0 <_svfiprintf_r+0xd8>
 800589e:	2300      	movs	r3, #0
 80058a0:	3401      	adds	r4, #1
 80058a2:	9305      	str	r3, [sp, #20]
 80058a4:	4619      	mov	r1, r3
 80058a6:	f04f 0c0a 	mov.w	ip, #10
 80058aa:	4620      	mov	r0, r4
 80058ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058b0:	3a30      	subs	r2, #48	@ 0x30
 80058b2:	2a09      	cmp	r2, #9
 80058b4:	d903      	bls.n	80058be <_svfiprintf_r+0x1a6>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0c6      	beq.n	8005848 <_svfiprintf_r+0x130>
 80058ba:	9105      	str	r1, [sp, #20]
 80058bc:	e7c4      	b.n	8005848 <_svfiprintf_r+0x130>
 80058be:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c2:	4604      	mov	r4, r0
 80058c4:	2301      	movs	r3, #1
 80058c6:	e7f0      	b.n	80058aa <_svfiprintf_r+0x192>
 80058c8:	ab03      	add	r3, sp, #12
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	462a      	mov	r2, r5
 80058ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <_svfiprintf_r+0x1f0>)
 80058d0:	a904      	add	r1, sp, #16
 80058d2:	4638      	mov	r0, r7
 80058d4:	f3af 8000 	nop.w
 80058d8:	1c42      	adds	r2, r0, #1
 80058da:	4606      	mov	r6, r0
 80058dc:	d1d6      	bne.n	800588c <_svfiprintf_r+0x174>
 80058de:	89ab      	ldrh	r3, [r5, #12]
 80058e0:	065b      	lsls	r3, r3, #25
 80058e2:	f53f af2d 	bmi.w	8005740 <_svfiprintf_r+0x28>
 80058e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058e8:	e72c      	b.n	8005744 <_svfiprintf_r+0x2c>
 80058ea:	ab03      	add	r3, sp, #12
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	462a      	mov	r2, r5
 80058f0:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <_svfiprintf_r+0x1f0>)
 80058f2:	a904      	add	r1, sp, #16
 80058f4:	4638      	mov	r0, r7
 80058f6:	f000 f9bb 	bl	8005c70 <_printf_i>
 80058fa:	e7ed      	b.n	80058d8 <_svfiprintf_r+0x1c0>
 80058fc:	0800663c 	.word	0x0800663c
 8005900:	08006646 	.word	0x08006646
 8005904:	00000000 	.word	0x00000000
 8005908:	08005661 	.word	0x08005661
 800590c:	08006642 	.word	0x08006642

08005910 <__sfputc_r>:
 8005910:	6893      	ldr	r3, [r2, #8]
 8005912:	3b01      	subs	r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	b410      	push	{r4}
 8005918:	6093      	str	r3, [r2, #8]
 800591a:	da08      	bge.n	800592e <__sfputc_r+0x1e>
 800591c:	6994      	ldr	r4, [r2, #24]
 800591e:	42a3      	cmp	r3, r4
 8005920:	db01      	blt.n	8005926 <__sfputc_r+0x16>
 8005922:	290a      	cmp	r1, #10
 8005924:	d103      	bne.n	800592e <__sfputc_r+0x1e>
 8005926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800592a:	f000 bbde 	b.w	80060ea <__swbuf_r>
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	1c58      	adds	r0, r3, #1
 8005932:	6010      	str	r0, [r2, #0]
 8005934:	7019      	strb	r1, [r3, #0]
 8005936:	4608      	mov	r0, r1
 8005938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800593c:	4770      	bx	lr

0800593e <__sfputs_r>:
 800593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005940:	4606      	mov	r6, r0
 8005942:	460f      	mov	r7, r1
 8005944:	4614      	mov	r4, r2
 8005946:	18d5      	adds	r5, r2, r3
 8005948:	42ac      	cmp	r4, r5
 800594a:	d101      	bne.n	8005950 <__sfputs_r+0x12>
 800594c:	2000      	movs	r0, #0
 800594e:	e007      	b.n	8005960 <__sfputs_r+0x22>
 8005950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005954:	463a      	mov	r2, r7
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ffda 	bl	8005910 <__sfputc_r>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d1f3      	bne.n	8005948 <__sfputs_r+0xa>
 8005960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005964 <_vfiprintf_r>:
 8005964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	460d      	mov	r5, r1
 800596a:	b09d      	sub	sp, #116	@ 0x74
 800596c:	4614      	mov	r4, r2
 800596e:	4698      	mov	r8, r3
 8005970:	4606      	mov	r6, r0
 8005972:	b118      	cbz	r0, 800597c <_vfiprintf_r+0x18>
 8005974:	6a03      	ldr	r3, [r0, #32]
 8005976:	b90b      	cbnz	r3, 800597c <_vfiprintf_r+0x18>
 8005978:	f7ff fd3c 	bl	80053f4 <__sinit>
 800597c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800597e:	07d9      	lsls	r1, r3, #31
 8005980:	d405      	bmi.n	800598e <_vfiprintf_r+0x2a>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	059a      	lsls	r2, r3, #22
 8005986:	d402      	bmi.n	800598e <_vfiprintf_r+0x2a>
 8005988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800598a:	f7ff fe1c 	bl	80055c6 <__retarget_lock_acquire_recursive>
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	071b      	lsls	r3, r3, #28
 8005992:	d501      	bpl.n	8005998 <_vfiprintf_r+0x34>
 8005994:	692b      	ldr	r3, [r5, #16]
 8005996:	b99b      	cbnz	r3, 80059c0 <_vfiprintf_r+0x5c>
 8005998:	4629      	mov	r1, r5
 800599a:	4630      	mov	r0, r6
 800599c:	f000 fbe4 	bl	8006168 <__swsetup_r>
 80059a0:	b170      	cbz	r0, 80059c0 <_vfiprintf_r+0x5c>
 80059a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059a4:	07dc      	lsls	r4, r3, #31
 80059a6:	d504      	bpl.n	80059b2 <_vfiprintf_r+0x4e>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059ac:	b01d      	add	sp, #116	@ 0x74
 80059ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	0598      	lsls	r0, r3, #22
 80059b6:	d4f7      	bmi.n	80059a8 <_vfiprintf_r+0x44>
 80059b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059ba:	f7ff fe05 	bl	80055c8 <__retarget_lock_release_recursive>
 80059be:	e7f3      	b.n	80059a8 <_vfiprintf_r+0x44>
 80059c0:	2300      	movs	r3, #0
 80059c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c4:	2320      	movs	r3, #32
 80059c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ce:	2330      	movs	r3, #48	@ 0x30
 80059d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b80 <_vfiprintf_r+0x21c>
 80059d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059d8:	f04f 0901 	mov.w	r9, #1
 80059dc:	4623      	mov	r3, r4
 80059de:	469a      	mov	sl, r3
 80059e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e4:	b10a      	cbz	r2, 80059ea <_vfiprintf_r+0x86>
 80059e6:	2a25      	cmp	r2, #37	@ 0x25
 80059e8:	d1f9      	bne.n	80059de <_vfiprintf_r+0x7a>
 80059ea:	ebba 0b04 	subs.w	fp, sl, r4
 80059ee:	d00b      	beq.n	8005a08 <_vfiprintf_r+0xa4>
 80059f0:	465b      	mov	r3, fp
 80059f2:	4622      	mov	r2, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff ffa1 	bl	800593e <__sfputs_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	f000 80a7 	beq.w	8005b50 <_vfiprintf_r+0x1ec>
 8005a02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a04:	445a      	add	r2, fp
 8005a06:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a08:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 809f 	beq.w	8005b50 <_vfiprintf_r+0x1ec>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a1c:	f10a 0a01 	add.w	sl, sl, #1
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a28:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a2a:	4654      	mov	r4, sl
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a32:	4853      	ldr	r0, [pc, #332]	@ (8005b80 <_vfiprintf_r+0x21c>)
 8005a34:	f7fa fbfc 	bl	8000230 <memchr>
 8005a38:	9a04      	ldr	r2, [sp, #16]
 8005a3a:	b9d8      	cbnz	r0, 8005a74 <_vfiprintf_r+0x110>
 8005a3c:	06d1      	lsls	r1, r2, #27
 8005a3e:	bf44      	itt	mi
 8005a40:	2320      	movmi	r3, #32
 8005a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a46:	0713      	lsls	r3, r2, #28
 8005a48:	bf44      	itt	mi
 8005a4a:	232b      	movmi	r3, #43	@ 0x2b
 8005a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a50:	f89a 3000 	ldrb.w	r3, [sl]
 8005a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a56:	d015      	beq.n	8005a84 <_vfiprintf_r+0x120>
 8005a58:	9a07      	ldr	r2, [sp, #28]
 8005a5a:	4654      	mov	r4, sl
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f04f 0c0a 	mov.w	ip, #10
 8005a62:	4621      	mov	r1, r4
 8005a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a68:	3b30      	subs	r3, #48	@ 0x30
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d94b      	bls.n	8005b06 <_vfiprintf_r+0x1a2>
 8005a6e:	b1b0      	cbz	r0, 8005a9e <_vfiprintf_r+0x13a>
 8005a70:	9207      	str	r2, [sp, #28]
 8005a72:	e014      	b.n	8005a9e <_vfiprintf_r+0x13a>
 8005a74:	eba0 0308 	sub.w	r3, r0, r8
 8005a78:	fa09 f303 	lsl.w	r3, r9, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	46a2      	mov	sl, r4
 8005a82:	e7d2      	b.n	8005a2a <_vfiprintf_r+0xc6>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	1d19      	adds	r1, r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	9103      	str	r1, [sp, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bfbb      	ittet	lt
 8005a90:	425b      	neglt	r3, r3
 8005a92:	f042 0202 	orrlt.w	r2, r2, #2
 8005a96:	9307      	strge	r3, [sp, #28]
 8005a98:	9307      	strlt	r3, [sp, #28]
 8005a9a:	bfb8      	it	lt
 8005a9c:	9204      	strlt	r2, [sp, #16]
 8005a9e:	7823      	ldrb	r3, [r4, #0]
 8005aa0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aa2:	d10a      	bne.n	8005aba <_vfiprintf_r+0x156>
 8005aa4:	7863      	ldrb	r3, [r4, #1]
 8005aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa8:	d132      	bne.n	8005b10 <_vfiprintf_r+0x1ac>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	9203      	str	r2, [sp, #12]
 8005ab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ab6:	3402      	adds	r4, #2
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b90 <_vfiprintf_r+0x22c>
 8005abe:	7821      	ldrb	r1, [r4, #0]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	f7fa fbb4 	bl	8000230 <memchr>
 8005ac8:	b138      	cbz	r0, 8005ada <_vfiprintf_r+0x176>
 8005aca:	9b04      	ldr	r3, [sp, #16]
 8005acc:	eba0 000a 	sub.w	r0, r0, sl
 8005ad0:	2240      	movs	r2, #64	@ 0x40
 8005ad2:	4082      	lsls	r2, r0
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ade:	4829      	ldr	r0, [pc, #164]	@ (8005b84 <_vfiprintf_r+0x220>)
 8005ae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ae4:	2206      	movs	r2, #6
 8005ae6:	f7fa fba3 	bl	8000230 <memchr>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d03f      	beq.n	8005b6e <_vfiprintf_r+0x20a>
 8005aee:	4b26      	ldr	r3, [pc, #152]	@ (8005b88 <_vfiprintf_r+0x224>)
 8005af0:	bb1b      	cbnz	r3, 8005b3a <_vfiprintf_r+0x1d6>
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	3307      	adds	r3, #7
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	3308      	adds	r3, #8
 8005afc:	9303      	str	r3, [sp, #12]
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	443b      	add	r3, r7
 8005b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b04:	e76a      	b.n	80059dc <_vfiprintf_r+0x78>
 8005b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	e7a8      	b.n	8005a62 <_vfiprintf_r+0xfe>
 8005b10:	2300      	movs	r3, #0
 8005b12:	3401      	adds	r4, #1
 8005b14:	9305      	str	r3, [sp, #20]
 8005b16:	4619      	mov	r1, r3
 8005b18:	f04f 0c0a 	mov.w	ip, #10
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b22:	3a30      	subs	r2, #48	@ 0x30
 8005b24:	2a09      	cmp	r2, #9
 8005b26:	d903      	bls.n	8005b30 <_vfiprintf_r+0x1cc>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0c6      	beq.n	8005aba <_vfiprintf_r+0x156>
 8005b2c:	9105      	str	r1, [sp, #20]
 8005b2e:	e7c4      	b.n	8005aba <_vfiprintf_r+0x156>
 8005b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b34:	4604      	mov	r4, r0
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7f0      	b.n	8005b1c <_vfiprintf_r+0x1b8>
 8005b3a:	ab03      	add	r3, sp, #12
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	462a      	mov	r2, r5
 8005b40:	4b12      	ldr	r3, [pc, #72]	@ (8005b8c <_vfiprintf_r+0x228>)
 8005b42:	a904      	add	r1, sp, #16
 8005b44:	4630      	mov	r0, r6
 8005b46:	f3af 8000 	nop.w
 8005b4a:	4607      	mov	r7, r0
 8005b4c:	1c78      	adds	r0, r7, #1
 8005b4e:	d1d6      	bne.n	8005afe <_vfiprintf_r+0x19a>
 8005b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b52:	07d9      	lsls	r1, r3, #31
 8005b54:	d405      	bmi.n	8005b62 <_vfiprintf_r+0x1fe>
 8005b56:	89ab      	ldrh	r3, [r5, #12]
 8005b58:	059a      	lsls	r2, r3, #22
 8005b5a:	d402      	bmi.n	8005b62 <_vfiprintf_r+0x1fe>
 8005b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b5e:	f7ff fd33 	bl	80055c8 <__retarget_lock_release_recursive>
 8005b62:	89ab      	ldrh	r3, [r5, #12]
 8005b64:	065b      	lsls	r3, r3, #25
 8005b66:	f53f af1f 	bmi.w	80059a8 <_vfiprintf_r+0x44>
 8005b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b6c:	e71e      	b.n	80059ac <_vfiprintf_r+0x48>
 8005b6e:	ab03      	add	r3, sp, #12
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	462a      	mov	r2, r5
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <_vfiprintf_r+0x228>)
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 f879 	bl	8005c70 <_printf_i>
 8005b7e:	e7e4      	b.n	8005b4a <_vfiprintf_r+0x1e6>
 8005b80:	0800663c 	.word	0x0800663c
 8005b84:	08006646 	.word	0x08006646
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	0800593f 	.word	0x0800593f
 8005b90:	08006642 	.word	0x08006642

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4698      	mov	r8, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bfb8      	it	lt
 8005ba8:	4613      	movlt	r3, r2
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc26      	bgt.n	8005c2a <_printf_common+0x96>
 8005bdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005be0:	6822      	ldr	r2, [r4, #0]
 8005be2:	3b00      	subs	r3, #0
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d42b      	bmi.n	8005c44 <_printf_common+0xb0>
 8005bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c8      	blx	r9
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d01e      	beq.n	8005c38 <_printf_common+0xa4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	6922      	ldr	r2, [r4, #16]
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	bf02      	ittt	eq
 8005c06:	68e5      	ldreq	r5, [r4, #12]
 8005c08:	6833      	ldreq	r3, [r6, #0]
 8005c0a:	1aed      	subeq	r5, r5, r3
 8005c0c:	68a3      	ldr	r3, [r4, #8]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	2600      	movs	r6, #0
 8005c20:	341a      	adds	r4, #26
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d11a      	bne.n	8005c5c <_printf_common+0xc8>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e008      	b.n	8005c3c <_printf_common+0xa8>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4641      	mov	r1, r8
 8005c30:	4638      	mov	r0, r7
 8005c32:	47c8      	blx	r9
 8005c34:	3001      	adds	r0, #1
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0xac>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7c6      	b.n	8005bd2 <_printf_common+0x3e>
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	2030      	movs	r0, #48	@ 0x30
 8005c4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c4e:	4422      	add	r2, r4
 8005c50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e7c7      	b.n	8005bec <_printf_common+0x58>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4641      	mov	r1, r8
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c8      	blx	r9
 8005c66:	3001      	adds	r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa4>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7d9      	b.n	8005c22 <_printf_common+0x8e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	7e0f      	ldrb	r7, [r1, #24]
 8005c76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c78:	2f78      	cmp	r7, #120	@ 0x78
 8005c7a:	4691      	mov	r9, r2
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	469a      	mov	sl, r3
 8005c82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c86:	d807      	bhi.n	8005c98 <_printf_i+0x28>
 8005c88:	2f62      	cmp	r7, #98	@ 0x62
 8005c8a:	d80a      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	f000 80d2 	beq.w	8005e36 <_printf_i+0x1c6>
 8005c92:	2f58      	cmp	r7, #88	@ 0x58
 8005c94:	f000 80b9 	beq.w	8005e0a <_printf_i+0x19a>
 8005c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ca0:	e03a      	b.n	8005d18 <_printf_i+0xa8>
 8005ca2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ca6:	2b15      	cmp	r3, #21
 8005ca8:	d8f6      	bhi.n	8005c98 <_printf_i+0x28>
 8005caa:	a101      	add	r1, pc, #4	@ (adr r1, 8005cb0 <_printf_i+0x40>)
 8005cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005c99 	.word	0x08005c99
 8005cbc:	08005c99 	.word	0x08005c99
 8005cc0:	08005c99 	.word	0x08005c99
 8005cc4:	08005c99 	.word	0x08005c99
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c99 	.word	0x08005c99
 8005cd0:	08005c99 	.word	0x08005c99
 8005cd4:	08005c99 	.word	0x08005c99
 8005cd8:	08005c99 	.word	0x08005c99
 8005cdc:	08005e1d 	.word	0x08005e1d
 8005ce0:	08005d47 	.word	0x08005d47
 8005ce4:	08005dd7 	.word	0x08005dd7
 8005ce8:	08005c99 	.word	0x08005c99
 8005cec:	08005c99 	.word	0x08005c99
 8005cf0:	08005e3f 	.word	0x08005e3f
 8005cf4:	08005c99 	.word	0x08005c99
 8005cf8:	08005d47 	.word	0x08005d47
 8005cfc:	08005c99 	.word	0x08005c99
 8005d00:	08005c99 	.word	0x08005c99
 8005d04:	08005ddf 	.word	0x08005ddf
 8005d08:	6833      	ldr	r3, [r6, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6032      	str	r2, [r6, #0]
 8005d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e09d      	b.n	8005e58 <_printf_i+0x1e8>
 8005d1c:	6833      	ldr	r3, [r6, #0]
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	1d19      	adds	r1, r3, #4
 8005d22:	6031      	str	r1, [r6, #0]
 8005d24:	0606      	lsls	r6, r0, #24
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0xbc>
 8005d28:	681d      	ldr	r5, [r3, #0]
 8005d2a:	e003      	b.n	8005d34 <_printf_i+0xc4>
 8005d2c:	0645      	lsls	r5, r0, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0xb8>
 8005d30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	da03      	bge.n	8005d40 <_printf_i+0xd0>
 8005d38:	232d      	movs	r3, #45	@ 0x2d
 8005d3a:	426d      	negs	r5, r5
 8005d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d40:	4859      	ldr	r0, [pc, #356]	@ (8005ea8 <_printf_i+0x238>)
 8005d42:	230a      	movs	r3, #10
 8005d44:	e011      	b.n	8005d6a <_printf_i+0xfa>
 8005d46:	6821      	ldr	r1, [r4, #0]
 8005d48:	6833      	ldr	r3, [r6, #0]
 8005d4a:	0608      	lsls	r0, r1, #24
 8005d4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d50:	d402      	bmi.n	8005d58 <_printf_i+0xe8>
 8005d52:	0649      	lsls	r1, r1, #25
 8005d54:	bf48      	it	mi
 8005d56:	b2ad      	uxthmi	r5, r5
 8005d58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d5a:	4853      	ldr	r0, [pc, #332]	@ (8005ea8 <_printf_i+0x238>)
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	bf14      	ite	ne
 8005d60:	230a      	movne	r3, #10
 8005d62:	2308      	moveq	r3, #8
 8005d64:	2100      	movs	r1, #0
 8005d66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d6a:	6866      	ldr	r6, [r4, #4]
 8005d6c:	60a6      	str	r6, [r4, #8]
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	bfa2      	ittt	ge
 8005d72:	6821      	ldrge	r1, [r4, #0]
 8005d74:	f021 0104 	bicge.w	r1, r1, #4
 8005d78:	6021      	strge	r1, [r4, #0]
 8005d7a:	b90d      	cbnz	r5, 8005d80 <_printf_i+0x110>
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	d04b      	beq.n	8005e18 <_printf_i+0x1a8>
 8005d80:	4616      	mov	r6, r2
 8005d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d86:	fb03 5711 	mls	r7, r3, r1, r5
 8005d8a:	5dc7      	ldrb	r7, [r0, r7]
 8005d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d90:	462f      	mov	r7, r5
 8005d92:	42bb      	cmp	r3, r7
 8005d94:	460d      	mov	r5, r1
 8005d96:	d9f4      	bls.n	8005d82 <_printf_i+0x112>
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d10b      	bne.n	8005db4 <_printf_i+0x144>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	07df      	lsls	r7, r3, #31
 8005da0:	d508      	bpl.n	8005db4 <_printf_i+0x144>
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	6861      	ldr	r1, [r4, #4]
 8005da6:	4299      	cmp	r1, r3
 8005da8:	bfde      	ittt	le
 8005daa:	2330      	movle	r3, #48	@ 0x30
 8005dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005db0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005db4:	1b92      	subs	r2, r2, r6
 8005db6:	6122      	str	r2, [r4, #16]
 8005db8:	f8cd a000 	str.w	sl, [sp]
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	aa03      	add	r2, sp, #12
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	f7ff fee6 	bl	8005b94 <_printf_common>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d14a      	bne.n	8005e62 <_printf_i+0x1f2>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dd0:	b004      	add	sp, #16
 8005dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	f043 0320 	orr.w	r3, r3, #32
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	4833      	ldr	r0, [pc, #204]	@ (8005eac <_printf_i+0x23c>)
 8005de0:	2778      	movs	r7, #120	@ 0x78
 8005de2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	6831      	ldr	r1, [r6, #0]
 8005dea:	061f      	lsls	r7, r3, #24
 8005dec:	f851 5b04 	ldr.w	r5, [r1], #4
 8005df0:	d402      	bmi.n	8005df8 <_printf_i+0x188>
 8005df2:	065f      	lsls	r7, r3, #25
 8005df4:	bf48      	it	mi
 8005df6:	b2ad      	uxthmi	r5, r5
 8005df8:	6031      	str	r1, [r6, #0]
 8005dfa:	07d9      	lsls	r1, r3, #31
 8005dfc:	bf44      	itt	mi
 8005dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8005e02:	6023      	strmi	r3, [r4, #0]
 8005e04:	b11d      	cbz	r5, 8005e0e <_printf_i+0x19e>
 8005e06:	2310      	movs	r3, #16
 8005e08:	e7ac      	b.n	8005d64 <_printf_i+0xf4>
 8005e0a:	4827      	ldr	r0, [pc, #156]	@ (8005ea8 <_printf_i+0x238>)
 8005e0c:	e7e9      	b.n	8005de2 <_printf_i+0x172>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f023 0320 	bic.w	r3, r3, #32
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	e7f6      	b.n	8005e06 <_printf_i+0x196>
 8005e18:	4616      	mov	r6, r2
 8005e1a:	e7bd      	b.n	8005d98 <_printf_i+0x128>
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	6825      	ldr	r5, [r4, #0]
 8005e20:	6961      	ldr	r1, [r4, #20]
 8005e22:	1d18      	adds	r0, r3, #4
 8005e24:	6030      	str	r0, [r6, #0]
 8005e26:	062e      	lsls	r6, r5, #24
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0x1c0>
 8005e2c:	6019      	str	r1, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <_printf_i+0x1c6>
 8005e30:	0668      	lsls	r0, r5, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0x1bc>
 8005e34:	8019      	strh	r1, [r3, #0]
 8005e36:	2300      	movs	r3, #0
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	4616      	mov	r6, r2
 8005e3c:	e7bc      	b.n	8005db8 <_printf_i+0x148>
 8005e3e:	6833      	ldr	r3, [r6, #0]
 8005e40:	1d1a      	adds	r2, r3, #4
 8005e42:	6032      	str	r2, [r6, #0]
 8005e44:	681e      	ldr	r6, [r3, #0]
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7fa f9f0 	bl	8000230 <memchr>
 8005e50:	b108      	cbz	r0, 8005e56 <_printf_i+0x1e6>
 8005e52:	1b80      	subs	r0, r0, r6
 8005e54:	6060      	str	r0, [r4, #4]
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e60:	e7aa      	b.n	8005db8 <_printf_i+0x148>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	4632      	mov	r2, r6
 8005e66:	4649      	mov	r1, r9
 8005e68:	4640      	mov	r0, r8
 8005e6a:	47d0      	blx	sl
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d0ad      	beq.n	8005dcc <_printf_i+0x15c>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	079b      	lsls	r3, r3, #30
 8005e74:	d413      	bmi.n	8005e9e <_printf_i+0x22e>
 8005e76:	68e0      	ldr	r0, [r4, #12]
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	bfb8      	it	lt
 8005e7e:	4618      	movlt	r0, r3
 8005e80:	e7a6      	b.n	8005dd0 <_printf_i+0x160>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4632      	mov	r2, r6
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	47d0      	blx	sl
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d09d      	beq.n	8005dcc <_printf_i+0x15c>
 8005e90:	3501      	adds	r5, #1
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	9903      	ldr	r1, [sp, #12]
 8005e96:	1a5b      	subs	r3, r3, r1
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dcf2      	bgt.n	8005e82 <_printf_i+0x212>
 8005e9c:	e7eb      	b.n	8005e76 <_printf_i+0x206>
 8005e9e:	2500      	movs	r5, #0
 8005ea0:	f104 0619 	add.w	r6, r4, #25
 8005ea4:	e7f5      	b.n	8005e92 <_printf_i+0x222>
 8005ea6:	bf00      	nop
 8005ea8:	0800664d 	.word	0x0800664d
 8005eac:	0800665e 	.word	0x0800665e

08005eb0 <__sflush_r>:
 8005eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb8:	0716      	lsls	r6, r2, #28
 8005eba:	4605      	mov	r5, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	d454      	bmi.n	8005f6a <__sflush_r+0xba>
 8005ec0:	684b      	ldr	r3, [r1, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	dc02      	bgt.n	8005ecc <__sflush_r+0x1c>
 8005ec6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dd48      	ble.n	8005f5e <__sflush_r+0xae>
 8005ecc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d045      	beq.n	8005f5e <__sflush_r+0xae>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ed8:	682f      	ldr	r7, [r5, #0]
 8005eda:	6a21      	ldr	r1, [r4, #32]
 8005edc:	602b      	str	r3, [r5, #0]
 8005ede:	d030      	beq.n	8005f42 <__sflush_r+0x92>
 8005ee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	0759      	lsls	r1, r3, #29
 8005ee6:	d505      	bpl.n	8005ef4 <__sflush_r+0x44>
 8005ee8:	6863      	ldr	r3, [r4, #4]
 8005eea:	1ad2      	subs	r2, r2, r3
 8005eec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eee:	b10b      	cbz	r3, 8005ef4 <__sflush_r+0x44>
 8005ef0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ef8:	6a21      	ldr	r1, [r4, #32]
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b0      	blx	r6
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	d106      	bne.n	8005f12 <__sflush_r+0x62>
 8005f04:	6829      	ldr	r1, [r5, #0]
 8005f06:	291d      	cmp	r1, #29
 8005f08:	d82b      	bhi.n	8005f62 <__sflush_r+0xb2>
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb4 <__sflush_r+0x104>)
 8005f0c:	410a      	asrs	r2, r1
 8005f0e:	07d6      	lsls	r6, r2, #31
 8005f10:	d427      	bmi.n	8005f62 <__sflush_r+0xb2>
 8005f12:	2200      	movs	r2, #0
 8005f14:	6062      	str	r2, [r4, #4]
 8005f16:	04d9      	lsls	r1, r3, #19
 8005f18:	6922      	ldr	r2, [r4, #16]
 8005f1a:	6022      	str	r2, [r4, #0]
 8005f1c:	d504      	bpl.n	8005f28 <__sflush_r+0x78>
 8005f1e:	1c42      	adds	r2, r0, #1
 8005f20:	d101      	bne.n	8005f26 <__sflush_r+0x76>
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	b903      	cbnz	r3, 8005f28 <__sflush_r+0x78>
 8005f26:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f2a:	602f      	str	r7, [r5, #0]
 8005f2c:	b1b9      	cbz	r1, 8005f5e <__sflush_r+0xae>
 8005f2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f32:	4299      	cmp	r1, r3
 8005f34:	d002      	beq.n	8005f3c <__sflush_r+0x8c>
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7ff fb48 	bl	80055cc <_free_r>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f40:	e00d      	b.n	8005f5e <__sflush_r+0xae>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4628      	mov	r0, r5
 8005f46:	47b0      	blx	r6
 8005f48:	4602      	mov	r2, r0
 8005f4a:	1c50      	adds	r0, r2, #1
 8005f4c:	d1c9      	bne.n	8005ee2 <__sflush_r+0x32>
 8005f4e:	682b      	ldr	r3, [r5, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0c6      	beq.n	8005ee2 <__sflush_r+0x32>
 8005f54:	2b1d      	cmp	r3, #29
 8005f56:	d001      	beq.n	8005f5c <__sflush_r+0xac>
 8005f58:	2b16      	cmp	r3, #22
 8005f5a:	d11e      	bne.n	8005f9a <__sflush_r+0xea>
 8005f5c:	602f      	str	r7, [r5, #0]
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e022      	b.n	8005fa8 <__sflush_r+0xf8>
 8005f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f66:	b21b      	sxth	r3, r3
 8005f68:	e01b      	b.n	8005fa2 <__sflush_r+0xf2>
 8005f6a:	690f      	ldr	r7, [r1, #16]
 8005f6c:	2f00      	cmp	r7, #0
 8005f6e:	d0f6      	beq.n	8005f5e <__sflush_r+0xae>
 8005f70:	0793      	lsls	r3, r2, #30
 8005f72:	680e      	ldr	r6, [r1, #0]
 8005f74:	bf08      	it	eq
 8005f76:	694b      	ldreq	r3, [r1, #20]
 8005f78:	600f      	str	r7, [r1, #0]
 8005f7a:	bf18      	it	ne
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	eba6 0807 	sub.w	r8, r6, r7
 8005f82:	608b      	str	r3, [r1, #8]
 8005f84:	f1b8 0f00 	cmp.w	r8, #0
 8005f88:	dde9      	ble.n	8005f5e <__sflush_r+0xae>
 8005f8a:	6a21      	ldr	r1, [r4, #32]
 8005f8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f8e:	4643      	mov	r3, r8
 8005f90:	463a      	mov	r2, r7
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b0      	blx	r6
 8005f96:	2800      	cmp	r0, #0
 8005f98:	dc08      	bgt.n	8005fac <__sflush_r+0xfc>
 8005f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fac:	4407      	add	r7, r0
 8005fae:	eba8 0800 	sub.w	r8, r8, r0
 8005fb2:	e7e7      	b.n	8005f84 <__sflush_r+0xd4>
 8005fb4:	dfbffffe 	.word	0xdfbffffe

08005fb8 <_fflush_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	690b      	ldr	r3, [r1, #16]
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	b913      	cbnz	r3, 8005fc8 <_fflush_r+0x10>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	b118      	cbz	r0, 8005fd2 <_fflush_r+0x1a>
 8005fca:	6a03      	ldr	r3, [r0, #32]
 8005fcc:	b90b      	cbnz	r3, 8005fd2 <_fflush_r+0x1a>
 8005fce:	f7ff fa11 	bl	80053f4 <__sinit>
 8005fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f3      	beq.n	8005fc2 <_fflush_r+0xa>
 8005fda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fdc:	07d0      	lsls	r0, r2, #31
 8005fde:	d404      	bmi.n	8005fea <_fflush_r+0x32>
 8005fe0:	0599      	lsls	r1, r3, #22
 8005fe2:	d402      	bmi.n	8005fea <_fflush_r+0x32>
 8005fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fe6:	f7ff faee 	bl	80055c6 <__retarget_lock_acquire_recursive>
 8005fea:	4628      	mov	r0, r5
 8005fec:	4621      	mov	r1, r4
 8005fee:	f7ff ff5f 	bl	8005eb0 <__sflush_r>
 8005ff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ff4:	07da      	lsls	r2, r3, #31
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	d4e4      	bmi.n	8005fc4 <_fflush_r+0xc>
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	059b      	lsls	r3, r3, #22
 8005ffe:	d4e1      	bmi.n	8005fc4 <_fflush_r+0xc>
 8006000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006002:	f7ff fae1 	bl	80055c8 <__retarget_lock_release_recursive>
 8006006:	e7dd      	b.n	8005fc4 <_fflush_r+0xc>

08006008 <__sread>:
 8006008:	b510      	push	{r4, lr}
 800600a:	460c      	mov	r4, r1
 800600c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006010:	f000 f9c0 	bl	8006394 <_read_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	bfab      	itete	ge
 8006018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800601a:	89a3      	ldrhlt	r3, [r4, #12]
 800601c:	181b      	addge	r3, r3, r0
 800601e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006022:	bfac      	ite	ge
 8006024:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006026:	81a3      	strhlt	r3, [r4, #12]
 8006028:	bd10      	pop	{r4, pc}

0800602a <__swrite>:
 800602a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	461f      	mov	r7, r3
 8006030:	898b      	ldrh	r3, [r1, #12]
 8006032:	05db      	lsls	r3, r3, #23
 8006034:	4605      	mov	r5, r0
 8006036:	460c      	mov	r4, r1
 8006038:	4616      	mov	r6, r2
 800603a:	d505      	bpl.n	8006048 <__swrite+0x1e>
 800603c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006040:	2302      	movs	r3, #2
 8006042:	2200      	movs	r2, #0
 8006044:	f000 f994 	bl	8006370 <_lseek_r>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800604e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	4628      	mov	r0, r5
 800605a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800605e:	f000 b9ab 	b.w	80063b8 <_write_r>

08006062 <__sseek>:
 8006062:	b510      	push	{r4, lr}
 8006064:	460c      	mov	r4, r1
 8006066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606a:	f000 f981 	bl	8006370 <_lseek_r>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	bf15      	itete	ne
 8006074:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800607a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800607e:	81a3      	strheq	r3, [r4, #12]
 8006080:	bf18      	it	ne
 8006082:	81a3      	strhne	r3, [r4, #12]
 8006084:	bd10      	pop	{r4, pc}

08006086 <__sclose>:
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 b93f 	b.w	800630c <_close_r>

0800608e <_realloc_r>:
 800608e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006092:	4680      	mov	r8, r0
 8006094:	4615      	mov	r5, r2
 8006096:	460c      	mov	r4, r1
 8006098:	b921      	cbnz	r1, 80060a4 <_realloc_r+0x16>
 800609a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	4611      	mov	r1, r2
 80060a0:	f7ff b870 	b.w	8005184 <_malloc_r>
 80060a4:	b92a      	cbnz	r2, 80060b2 <_realloc_r+0x24>
 80060a6:	f7ff fa91 	bl	80055cc <_free_r>
 80060aa:	2400      	movs	r4, #0
 80060ac:	4620      	mov	r0, r4
 80060ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b2:	f000 f9a1 	bl	80063f8 <_malloc_usable_size_r>
 80060b6:	4285      	cmp	r5, r0
 80060b8:	4606      	mov	r6, r0
 80060ba:	d802      	bhi.n	80060c2 <_realloc_r+0x34>
 80060bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060c0:	d8f4      	bhi.n	80060ac <_realloc_r+0x1e>
 80060c2:	4629      	mov	r1, r5
 80060c4:	4640      	mov	r0, r8
 80060c6:	f7ff f85d 	bl	8005184 <_malloc_r>
 80060ca:	4607      	mov	r7, r0
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d0ec      	beq.n	80060aa <_realloc_r+0x1c>
 80060d0:	42b5      	cmp	r5, r6
 80060d2:	462a      	mov	r2, r5
 80060d4:	4621      	mov	r1, r4
 80060d6:	bf28      	it	cs
 80060d8:	4632      	movcs	r2, r6
 80060da:	f000 f97f 	bl	80063dc <memcpy>
 80060de:	4621      	mov	r1, r4
 80060e0:	4640      	mov	r0, r8
 80060e2:	f7ff fa73 	bl	80055cc <_free_r>
 80060e6:	463c      	mov	r4, r7
 80060e8:	e7e0      	b.n	80060ac <_realloc_r+0x1e>

080060ea <__swbuf_r>:
 80060ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ec:	460e      	mov	r6, r1
 80060ee:	4614      	mov	r4, r2
 80060f0:	4605      	mov	r5, r0
 80060f2:	b118      	cbz	r0, 80060fc <__swbuf_r+0x12>
 80060f4:	6a03      	ldr	r3, [r0, #32]
 80060f6:	b90b      	cbnz	r3, 80060fc <__swbuf_r+0x12>
 80060f8:	f7ff f97c 	bl	80053f4 <__sinit>
 80060fc:	69a3      	ldr	r3, [r4, #24]
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	071a      	lsls	r2, r3, #28
 8006104:	d501      	bpl.n	800610a <__swbuf_r+0x20>
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	b943      	cbnz	r3, 800611c <__swbuf_r+0x32>
 800610a:	4621      	mov	r1, r4
 800610c:	4628      	mov	r0, r5
 800610e:	f000 f82b 	bl	8006168 <__swsetup_r>
 8006112:	b118      	cbz	r0, 800611c <__swbuf_r+0x32>
 8006114:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006118:	4638      	mov	r0, r7
 800611a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	6922      	ldr	r2, [r4, #16]
 8006120:	1a98      	subs	r0, r3, r2
 8006122:	6963      	ldr	r3, [r4, #20]
 8006124:	b2f6      	uxtb	r6, r6
 8006126:	4283      	cmp	r3, r0
 8006128:	4637      	mov	r7, r6
 800612a:	dc05      	bgt.n	8006138 <__swbuf_r+0x4e>
 800612c:	4621      	mov	r1, r4
 800612e:	4628      	mov	r0, r5
 8006130:	f7ff ff42 	bl	8005fb8 <_fflush_r>
 8006134:	2800      	cmp	r0, #0
 8006136:	d1ed      	bne.n	8006114 <__swbuf_r+0x2a>
 8006138:	68a3      	ldr	r3, [r4, #8]
 800613a:	3b01      	subs	r3, #1
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	6022      	str	r2, [r4, #0]
 8006144:	701e      	strb	r6, [r3, #0]
 8006146:	6962      	ldr	r2, [r4, #20]
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	429a      	cmp	r2, r3
 800614c:	d004      	beq.n	8006158 <__swbuf_r+0x6e>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	07db      	lsls	r3, r3, #31
 8006152:	d5e1      	bpl.n	8006118 <__swbuf_r+0x2e>
 8006154:	2e0a      	cmp	r6, #10
 8006156:	d1df      	bne.n	8006118 <__swbuf_r+0x2e>
 8006158:	4621      	mov	r1, r4
 800615a:	4628      	mov	r0, r5
 800615c:	f7ff ff2c 	bl	8005fb8 <_fflush_r>
 8006160:	2800      	cmp	r0, #0
 8006162:	d0d9      	beq.n	8006118 <__swbuf_r+0x2e>
 8006164:	e7d6      	b.n	8006114 <__swbuf_r+0x2a>
	...

08006168 <__swsetup_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4b29      	ldr	r3, [pc, #164]	@ (8006210 <__swsetup_r+0xa8>)
 800616c:	4605      	mov	r5, r0
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	460c      	mov	r4, r1
 8006172:	b118      	cbz	r0, 800617c <__swsetup_r+0x14>
 8006174:	6a03      	ldr	r3, [r0, #32]
 8006176:	b90b      	cbnz	r3, 800617c <__swsetup_r+0x14>
 8006178:	f7ff f93c 	bl	80053f4 <__sinit>
 800617c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006180:	0719      	lsls	r1, r3, #28
 8006182:	d422      	bmi.n	80061ca <__swsetup_r+0x62>
 8006184:	06da      	lsls	r2, r3, #27
 8006186:	d407      	bmi.n	8006198 <__swsetup_r+0x30>
 8006188:	2209      	movs	r2, #9
 800618a:	602a      	str	r2, [r5, #0]
 800618c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006196:	e033      	b.n	8006200 <__swsetup_r+0x98>
 8006198:	0758      	lsls	r0, r3, #29
 800619a:	d512      	bpl.n	80061c2 <__swsetup_r+0x5a>
 800619c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800619e:	b141      	cbz	r1, 80061b2 <__swsetup_r+0x4a>
 80061a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061a4:	4299      	cmp	r1, r3
 80061a6:	d002      	beq.n	80061ae <__swsetup_r+0x46>
 80061a8:	4628      	mov	r0, r5
 80061aa:	f7ff fa0f 	bl	80055cc <_free_r>
 80061ae:	2300      	movs	r3, #0
 80061b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061b8:	81a3      	strh	r3, [r4, #12]
 80061ba:	2300      	movs	r3, #0
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f043 0308 	orr.w	r3, r3, #8
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	b94b      	cbnz	r3, 80061e2 <__swsetup_r+0x7a>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061d8:	d003      	beq.n	80061e2 <__swsetup_r+0x7a>
 80061da:	4621      	mov	r1, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 f83f 	bl	8006260 <__smakebuf_r>
 80061e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e6:	f013 0201 	ands.w	r2, r3, #1
 80061ea:	d00a      	beq.n	8006202 <__swsetup_r+0x9a>
 80061ec:	2200      	movs	r2, #0
 80061ee:	60a2      	str	r2, [r4, #8]
 80061f0:	6962      	ldr	r2, [r4, #20]
 80061f2:	4252      	negs	r2, r2
 80061f4:	61a2      	str	r2, [r4, #24]
 80061f6:	6922      	ldr	r2, [r4, #16]
 80061f8:	b942      	cbnz	r2, 800620c <__swsetup_r+0xa4>
 80061fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061fe:	d1c5      	bne.n	800618c <__swsetup_r+0x24>
 8006200:	bd38      	pop	{r3, r4, r5, pc}
 8006202:	0799      	lsls	r1, r3, #30
 8006204:	bf58      	it	pl
 8006206:	6962      	ldrpl	r2, [r4, #20]
 8006208:	60a2      	str	r2, [r4, #8]
 800620a:	e7f4      	b.n	80061f6 <__swsetup_r+0x8e>
 800620c:	2000      	movs	r0, #0
 800620e:	e7f7      	b.n	8006200 <__swsetup_r+0x98>
 8006210:	20000018 	.word	0x20000018

08006214 <__swhatbuf_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	460c      	mov	r4, r1
 8006218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621c:	2900      	cmp	r1, #0
 800621e:	b096      	sub	sp, #88	@ 0x58
 8006220:	4615      	mov	r5, r2
 8006222:	461e      	mov	r6, r3
 8006224:	da0d      	bge.n	8006242 <__swhatbuf_r+0x2e>
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800622c:	f04f 0100 	mov.w	r1, #0
 8006230:	bf14      	ite	ne
 8006232:	2340      	movne	r3, #64	@ 0x40
 8006234:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006238:	2000      	movs	r0, #0
 800623a:	6031      	str	r1, [r6, #0]
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	b016      	add	sp, #88	@ 0x58
 8006240:	bd70      	pop	{r4, r5, r6, pc}
 8006242:	466a      	mov	r2, sp
 8006244:	f000 f872 	bl	800632c <_fstat_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	dbec      	blt.n	8006226 <__swhatbuf_r+0x12>
 800624c:	9901      	ldr	r1, [sp, #4]
 800624e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006252:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006256:	4259      	negs	r1, r3
 8006258:	4159      	adcs	r1, r3
 800625a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800625e:	e7eb      	b.n	8006238 <__swhatbuf_r+0x24>

08006260 <__smakebuf_r>:
 8006260:	898b      	ldrh	r3, [r1, #12]
 8006262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006264:	079d      	lsls	r5, r3, #30
 8006266:	4606      	mov	r6, r0
 8006268:	460c      	mov	r4, r1
 800626a:	d507      	bpl.n	800627c <__smakebuf_r+0x1c>
 800626c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	2301      	movs	r3, #1
 8006276:	6163      	str	r3, [r4, #20]
 8006278:	b003      	add	sp, #12
 800627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627c:	ab01      	add	r3, sp, #4
 800627e:	466a      	mov	r2, sp
 8006280:	f7ff ffc8 	bl	8006214 <__swhatbuf_r>
 8006284:	9f00      	ldr	r7, [sp, #0]
 8006286:	4605      	mov	r5, r0
 8006288:	4639      	mov	r1, r7
 800628a:	4630      	mov	r0, r6
 800628c:	f7fe ff7a 	bl	8005184 <_malloc_r>
 8006290:	b948      	cbnz	r0, 80062a6 <__smakebuf_r+0x46>
 8006292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006296:	059a      	lsls	r2, r3, #22
 8006298:	d4ee      	bmi.n	8006278 <__smakebuf_r+0x18>
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	f043 0302 	orr.w	r3, r3, #2
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	e7e2      	b.n	800626c <__smakebuf_r+0xc>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	6020      	str	r0, [r4, #0]
 80062aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	9b01      	ldr	r3, [sp, #4]
 80062b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062b6:	b15b      	cbz	r3, 80062d0 <__smakebuf_r+0x70>
 80062b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f847 	bl	8006350 <_isatty_r>
 80062c2:	b128      	cbz	r0, 80062d0 <__smakebuf_r+0x70>
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	431d      	orrs	r5, r3
 80062d4:	81a5      	strh	r5, [r4, #12]
 80062d6:	e7cf      	b.n	8006278 <__smakebuf_r+0x18>

080062d8 <memmove>:
 80062d8:	4288      	cmp	r0, r1
 80062da:	b510      	push	{r4, lr}
 80062dc:	eb01 0402 	add.w	r4, r1, r2
 80062e0:	d902      	bls.n	80062e8 <memmove+0x10>
 80062e2:	4284      	cmp	r4, r0
 80062e4:	4623      	mov	r3, r4
 80062e6:	d807      	bhi.n	80062f8 <memmove+0x20>
 80062e8:	1e43      	subs	r3, r0, #1
 80062ea:	42a1      	cmp	r1, r4
 80062ec:	d008      	beq.n	8006300 <memmove+0x28>
 80062ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062f6:	e7f8      	b.n	80062ea <memmove+0x12>
 80062f8:	4402      	add	r2, r0
 80062fa:	4601      	mov	r1, r0
 80062fc:	428a      	cmp	r2, r1
 80062fe:	d100      	bne.n	8006302 <memmove+0x2a>
 8006300:	bd10      	pop	{r4, pc}
 8006302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800630a:	e7f7      	b.n	80062fc <memmove+0x24>

0800630c <_close_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d06      	ldr	r5, [pc, #24]	@ (8006328 <_close_r+0x1c>)
 8006310:	2300      	movs	r3, #0
 8006312:	4604      	mov	r4, r0
 8006314:	4608      	mov	r0, r1
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	f7fb fa49 	bl	80017ae <_close>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_close_r+0x1a>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_close_r+0x1a>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	200002fc 	.word	0x200002fc

0800632c <_fstat_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d07      	ldr	r5, [pc, #28]	@ (800634c <_fstat_r+0x20>)
 8006330:	2300      	movs	r3, #0
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	602b      	str	r3, [r5, #0]
 800633a:	f7fb fa44 	bl	80017c6 <_fstat>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	d102      	bne.n	8006348 <_fstat_r+0x1c>
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	b103      	cbz	r3, 8006348 <_fstat_r+0x1c>
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	bd38      	pop	{r3, r4, r5, pc}
 800634a:	bf00      	nop
 800634c:	200002fc 	.word	0x200002fc

08006350 <_isatty_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4d06      	ldr	r5, [pc, #24]	@ (800636c <_isatty_r+0x1c>)
 8006354:	2300      	movs	r3, #0
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f7fb fa43 	bl	80017e6 <_isatty>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_isatty_r+0x1a>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_isatty_r+0x1a>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	200002fc 	.word	0x200002fc

08006370 <_lseek_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d07      	ldr	r5, [pc, #28]	@ (8006390 <_lseek_r+0x20>)
 8006374:	4604      	mov	r4, r0
 8006376:	4608      	mov	r0, r1
 8006378:	4611      	mov	r1, r2
 800637a:	2200      	movs	r2, #0
 800637c:	602a      	str	r2, [r5, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	f7fb fa3c 	bl	80017fc <_lseek>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_lseek_r+0x1e>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_lseek_r+0x1e>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	200002fc 	.word	0x200002fc

08006394 <_read_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d07      	ldr	r5, [pc, #28]	@ (80063b4 <_read_r+0x20>)
 8006398:	4604      	mov	r4, r0
 800639a:	4608      	mov	r0, r1
 800639c:	4611      	mov	r1, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7fb f9ca 	bl	800173c <_read>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_read_r+0x1e>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_read_r+0x1e>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	200002fc 	.word	0x200002fc

080063b8 <_write_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	@ (80063d8 <_write_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fb f9d5 	bl	8001776 <_write>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_write_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_write_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200002fc 	.word	0x200002fc

080063dc <memcpy>:
 80063dc:	440a      	add	r2, r1
 80063de:	4291      	cmp	r1, r2
 80063e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80063e4:	d100      	bne.n	80063e8 <memcpy+0xc>
 80063e6:	4770      	bx	lr
 80063e8:	b510      	push	{r4, lr}
 80063ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f2:	4291      	cmp	r1, r2
 80063f4:	d1f9      	bne.n	80063ea <memcpy+0xe>
 80063f6:	bd10      	pop	{r4, pc}

080063f8 <_malloc_usable_size_r>:
 80063f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fc:	1f18      	subs	r0, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bfbc      	itt	lt
 8006402:	580b      	ldrlt	r3, [r1, r0]
 8006404:	18c0      	addlt	r0, r0, r3
 8006406:	4770      	bx	lr

08006408 <_init>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr

08006414 <_fini>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr
