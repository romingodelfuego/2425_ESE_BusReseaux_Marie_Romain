
Tp_capteurs_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08005e90  08005e90  00006e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  080061c0  080061c0  000071c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c8  080061c8  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c8  080061c8  000071c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080061d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000080  08006250  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006250  00008378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100e7  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccf  00000000  00000000  00018197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a33  00000000  00000000  0001bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023de3  00000000  00000000  0001c5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001316e  00000000  00000000  000403c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa9f  00000000  00000000  00053534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122fd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  00123018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00126fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e78 	.word	0x08005e78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08005e78 	.word	0x08005e78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BMP280_check>:

PRES_COEFF  pres_coeff;
TEMP_COEFF temp_coeff;
BMP280_S32_t t_fine;

int BMP280_check() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005a6:	23d0      	movs	r3, #208	@ 0xd0
 80005a8:	713b      	strb	r3, [r7, #4]
	printf("\r\nChecking for BMP280...\r\n");
 80005aa:	481f      	ldr	r0, [pc, #124]	@ (8000628 <BMP280_check+0x88>)
 80005ac:	f004 fd20 	bl	8004ff0 <puts>

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005b0:	23ee      	movs	r3, #238	@ 0xee
 80005b2:	4619      	mov	r1, r3
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	481b      	ldr	r0, [pc, #108]	@ (800062c <BMP280_check+0x8c>)
 80005c0:	f001 feb6 	bl	8002330 <HAL_I2C_Master_Transmit>
 80005c4:	4603      	mov	r3, r0
 80005c6:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <BMP280_check+0x34>
		printf("Problem with check (I2C Transmit)\r\n");
 80005ce:	4818      	ldr	r0, [pc, #96]	@ (8000630 <BMP280_check+0x90>)
 80005d0:	f004 fd0e 	bl	8004ff0 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80005d4:	23ee      	movs	r3, #238	@ 0xee
 80005d6:	4619      	mov	r1, r3
 80005d8:	2301      	movs	r3, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	4603      	mov	r3, r0
 80005e6:	4811      	ldr	r0, [pc, #68]	@ (800062c <BMP280_check+0x8c>)
 80005e8:	f001 ffa0 	bl	800252c <HAL_I2C_Master_Receive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <BMP280_check+0x5c>
		printf("Problem with check (I2C Receive) \r\n");
 80005f6:	480f      	ldr	r0, [pc, #60]	@ (8000634 <BMP280_check+0x94>)
 80005f8:	f004 fcfa 	bl	8004ff0 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80005fc:	793b      	ldrb	r3, [r7, #4]
 80005fe:	4619      	mov	r1, r3
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <BMP280_check+0x98>)
 8000602:	f004 fc8d 	bl	8004f20 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000606:	793b      	ldrb	r3, [r7, #4]
 8000608:	2258      	movs	r2, #88	@ 0x58
 800060a:	4293      	cmp	r3, r2
 800060c:	d104      	bne.n	8000618 <BMP280_check+0x78>
		printf("Ok\r\n");
 800060e:	480b      	ldr	r0, [pc, #44]	@ (800063c <BMP280_check+0x9c>)
 8000610:	f004 fcee 	bl	8004ff0 <puts>
		return 0;
 8000614:	2300      	movs	r3, #0
 8000616:	e003      	b.n	8000620 <BMP280_check+0x80>
	} else {
		printf("not Ok!\r\n");
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <BMP280_check+0xa0>)
 800061a:	f004 fce9 	bl	8004ff0 <puts>
		return 1;
 800061e:	2301      	movs	r3, #1
	}
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08005e90 	.word	0x08005e90
 800062c:	200000d8 	.word	0x200000d8
 8000630:	08005eac 	.word	0x08005eac
 8000634:	08005ed0 	.word	0x08005ed0
 8000638:	08005ef4 	.word	0x08005ef4
 800063c:	08005f00 	.word	0x08005f00
 8000640:	08005f04 	.word	0x08005f04

08000644 <get_coef_temperature>:


TEMP_COEFF get_coef_temperature(){
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af02      	add	r7, sp, #8
 800064a:	6078      	str	r0, [r7, #4]
	uint8_t coeff_TEMP[3*2];
	uint8_t reg_trimming_TEMP=0x88;
 800064c:	2388      	movs	r3, #136	@ 0x88
 800064e:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_TEMP, 1,1000);
 8000650:	23ee      	movs	r3, #238	@ 0xee
 8000652:	4619      	mov	r1, r3
 8000654:	f107 0217 	add.w	r2, r7, #23
 8000658:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <get_coef_temperature+0x60>)
 8000662:	f001 fe65 	bl	8002330 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(BMP280_ADDR), coeff_TEMP, 3*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 8000666:	23ee      	movs	r3, #238	@ 0xee
 8000668:	4619      	mov	r1, r3
 800066a:	f107 0218 	add.w	r2, r7, #24
 800066e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2306      	movs	r3, #6
 8000676:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <get_coef_temperature+0x60>)
 8000678:	f001 ff58 	bl	800252c <HAL_I2C_Master_Receive>

	TEMP_COEFF temp_coeff=(TEMP_COEFF){
	.dig_T1 = coeff_TEMP[0],
 800067c:	7e3b      	ldrb	r3, [r7, #24]
	TEMP_COEFF temp_coeff=(TEMP_COEFF){
 800067e:	823b      	strh	r3, [r7, #16]
	.dig_T2 = coeff_TEMP[1],
 8000680:	7e7b      	ldrb	r3, [r7, #25]
 8000682:	b21b      	sxth	r3, r3
	TEMP_COEFF temp_coeff=(TEMP_COEFF){
 8000684:	827b      	strh	r3, [r7, #18]
	.dig_T3 = coeff_TEMP[3]
 8000686:	7efb      	ldrb	r3, [r7, #27]
 8000688:	b21b      	sxth	r3, r3
	TEMP_COEFF temp_coeff=(TEMP_COEFF){
 800068a:	82bb      	strh	r3, [r7, #20]
	};
	return temp_coeff;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	461a      	mov	r2, r3
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	6010      	str	r0, [r2, #0]
 8000698:	889b      	ldrh	r3, [r3, #4]
 800069a:	8093      	strh	r3, [r2, #4]
}
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000d8 	.word	0x200000d8

080006a8 <get_coef_pressure>:

PRES_COEFF get_coef_pressure(){
 80006a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ac:	b08e      	sub	sp, #56	@ 0x38
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	6078      	str	r0, [r7, #4]
	uint8_t coeff_PRESS[9*2];
	uint8_t reg_trimming_PRESS=0x8E;
 80006b2:	238e      	movs	r3, #142	@ 0x8e
 80006b4:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit( &hi2c1,(uint16_t)(BMP280_ADDR), &reg_trimming_PRESS, 1,1000);
 80006b6:	23ee      	movs	r3, #238	@ 0xee
 80006b8:	4619      	mov	r1, r3
 80006ba:	f107 021b 	add.w	r2, r7, #27
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	4826      	ldr	r0, [pc, #152]	@ (8000760 <get_coef_pressure+0xb8>)
 80006c8:	f001 fe32 	bl	8002330 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1,(uint16_t)(BMP280_ADDR), coeff_PRESS, 9*2, 1000); // Tout est sotcké sur 16 bits donc on regarde 2 fois 8 bits
 80006cc:	23ee      	movs	r3, #238	@ 0xee
 80006ce:	4619      	mov	r1, r3
 80006d0:	f107 021c 	add.w	r2, r7, #28
 80006d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2312      	movs	r3, #18
 80006dc:	4820      	ldr	r0, [pc, #128]	@ (8000760 <get_coef_pressure+0xb8>)
 80006de:	f001 ff25 	bl	800252c <HAL_I2C_Master_Receive>

	pres_coeff=(PRES_COEFF){
	.dig_P1 =coeff_PRESS[0],
 80006e2:	7f3b      	ldrb	r3, [r7, #28]
 80006e4:	4698      	mov	r8, r3
	.dig_P2 =coeff_PRESS[1],
 80006e6:	7f7b      	ldrb	r3, [r7, #29]
 80006e8:	fa0f fe83 	sxth.w	lr, r3
	.dig_P3 =coeff_PRESS[2],
 80006ec:	7fbb      	ldrb	r3, [r7, #30]
 80006ee:	fa0f fc83 	sxth.w	ip, r3
	.dig_P4 =coeff_PRESS[3],
 80006f2:	7ffb      	ldrb	r3, [r7, #31]
 80006f4:	b21e      	sxth	r6, r3
	.dig_P5 =coeff_PRESS[4],
 80006f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006fa:	b21d      	sxth	r5, r3
	.dig_P6 =coeff_PRESS[5],
 80006fc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000700:	b21c      	sxth	r4, r3
	.dig_P7 =coeff_PRESS[6],
 8000702:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000706:	b218      	sxth	r0, r3
	.dig_P8 =coeff_PRESS[7],
 8000708:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800070c:	b219      	sxth	r1, r3
	.dig_P9 =coeff_PRESS[8],
 800070e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000712:	b21a      	sxth	r2, r3
	pres_coeff=(PRES_COEFF){
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <get_coef_pressure+0xbc>)
 8000716:	f8a3 8000 	strh.w	r8, [r3]
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <get_coef_pressure+0xbc>)
 800071c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <get_coef_pressure+0xbc>)
 8000722:	f8a3 c004 	strh.w	ip, [r3, #4]
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <get_coef_pressure+0xbc>)
 8000728:	80de      	strh	r6, [r3, #6]
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <get_coef_pressure+0xbc>)
 800072c:	811d      	strh	r5, [r3, #8]
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <get_coef_pressure+0xbc>)
 8000730:	815c      	strh	r4, [r3, #10]
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <get_coef_pressure+0xbc>)
 8000734:	8198      	strh	r0, [r3, #12]
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <get_coef_pressure+0xbc>)
 8000738:	81d9      	strh	r1, [r3, #14]
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <get_coef_pressure+0xbc>)
 800073c:	821a      	strh	r2, [r3, #16]
	};
	return pres_coeff;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <get_coef_pressure+0xbc>)
 8000742:	461d      	mov	r5, r3
 8000744:	4614      	mov	r4, r2
 8000746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000748:	6028      	str	r0, [r5, #0]
 800074a:	6069      	str	r1, [r5, #4]
 800074c:	60aa      	str	r2, [r5, #8]
 800074e:	60eb      	str	r3, [r5, #12]
 8000750:	8823      	ldrh	r3, [r4, #0]
 8000752:	822b      	strh	r3, [r5, #16]
}
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	3730      	adds	r7, #48	@ 0x30
 8000758:	46bd      	mov	sp, r7
 800075a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8
 8000764:	2000009c 	.word	0x2000009c

08000768 <BMP280_init>:


int BMP280_init() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 800076e:	2357      	movs	r3, #87	@ 0x57
 8000770:	77fb      	strb	r3, [r7, #31]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("\r\nConfigure BMP280...\r\n");
 8000772:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <BMP280_init+0x50>)
 8000774:	f004 fc3c 	bl	8004ff0 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 8000778:	22f4      	movs	r2, #244	@ 0xf4
 800077a:	7ffb      	ldrb	r3, [r7, #31]
 800077c:	4619      	mov	r1, r3
 800077e:	4610      	mov	r0, r2
 8000780:	f000 f820 	bl	80007c4 <BMP280_Write_Reg>
 8000784:	4603      	mov	r3, r0
 8000786:	77bb      	strb	r3, [r7, #30]
	if (ret == 0) {
 8000788:	7fbb      	ldrb	r3, [r7, #30]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10c      	bne.n	80007a8 <BMP280_init+0x40>
		printf("Config Ok\r\n");
 800078e:	480b      	ldr	r0, [pc, #44]	@ (80007bc <BMP280_init+0x54>)
 8000790:	f004 fc2e 	bl	8004ff0 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	get_coef_pressure();
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff86 	bl	80006a8 <get_coef_pressure>
	get_coef_temperature();
 800079c:	463b      	mov	r3, r7
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff50 	bl	8000644 <get_coef_temperature>
	return 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e003      	b.n	80007b0 <BMP280_init+0x48>
		printf("Config not Ok!\r\n");
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <BMP280_init+0x58>)
 80007aa:	f004 fc21 	bl	8004ff0 <puts>
		return 1;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08005f10 	.word	0x08005f10
 80007bc:	08005f28 	.word	0x08005f28
 80007c0:	08005f34 	.word	0x08005f34

080007c4 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80007dc:	23ee      	movs	r3, #238	@ 0xee
 80007de:	4619      	mov	r1, r3
 80007e0:	f107 020c 	add.w	r2, r7, #12
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2302      	movs	r3, #2
 80007ec:	4814      	ldr	r0, [pc, #80]	@ (8000840 <BMP280_Write_Reg+0x7c>)
 80007ee:	f001 fd9f 	bl	8002330 <HAL_I2C_Master_Transmit>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <BMP280_Write_Reg+0x3e>
		printf("xErreur with I2C Transmit\r\n");
 80007fc:	4811      	ldr	r0, [pc, #68]	@ (8000844 <BMP280_Write_Reg+0x80>)
 80007fe:	f004 fbf7 	bl	8004ff0 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8000802:	23ee      	movs	r3, #238	@ 0xee
 8000804:	4619      	mov	r1, r3
 8000806:	f107 020c 	add.w	r2, r7, #12
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2301      	movs	r3, #1
 8000812:	480b      	ldr	r0, [pc, #44]	@ (8000840 <BMP280_Write_Reg+0x7c>)
 8000814:	f001 fe8a 	bl	800252c <HAL_I2C_Master_Receive>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <BMP280_Write_Reg+0x64>
		printf("xErreur with I2C Receive\r\n");
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <BMP280_Write_Reg+0x84>)
 8000824:	f004 fbe4 	bl	8004ff0 <puts>
	}

	if (buf[0] == value) {
 8000828:	7b3b      	ldrb	r3, [r7, #12]
 800082a:	79ba      	ldrb	r2, [r7, #6]
 800082c:	429a      	cmp	r2, r3
 800082e:	d101      	bne.n	8000834 <BMP280_Write_Reg+0x70>
		return 0;
 8000830:	2300      	movs	r3, #0
 8000832:	e000      	b.n	8000836 <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8000834:	2301      	movs	r3, #1
	}
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000d8 	.word	0x200000d8
 8000844:	08005f44 	.word	0x08005f44
 8000848:	08005f60 	.word	0x08005f60

0800084c <BMP280_Read_Reg>:

void BMP280_Read_Reg(uint8_t *buf, uint8_t reg, uint8_t length) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af02      	add	r7, sp, #8
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
 8000858:	4613      	mov	r3, r2
 800085a:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 800085c:	23ee      	movs	r3, #238	@ 0xee
 800085e:	4619      	mov	r1, r3
 8000860:	1cfa      	adds	r2, r7, #3
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <BMP280_Read_Reg+0x64>)
 800086c:	f001 fd60 	bl	8002330 <HAL_I2C_Master_Transmit>
 8000870:	4603      	mov	r3, r0
 8000872:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <BMP280_Read_Reg+0x34>
		printf("xErreur with I2C Transmit\r\n");
 800087a:	480e      	ldr	r0, [pc, #56]	@ (80008b4 <BMP280_Read_Reg+0x68>)
 800087c:	f004 fbb8 	bl	8004ff0 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000880:	23ee      	movs	r3, #238	@ 0xee
 8000882:	4619      	mov	r1, r3
 8000884:	78bb      	ldrb	r3, [r7, #2]
 8000886:	b29b      	uxth	r3, r3
 8000888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800088c:	9200      	str	r2, [sp, #0]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <BMP280_Read_Reg+0x64>)
 8000892:	f001 fe4b 	bl	800252c <HAL_I2C_Master_Receive>
 8000896:	4603      	mov	r3, r0
 8000898:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <BMP280_Read_Reg+0x5a>
		printf("xErreur with I2C Receive\r\n");
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <BMP280_Read_Reg+0x6c>)
 80008a2:	f004 fba5 	bl	8004ff0 <puts>
	}
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000d8 	.word	0x200000d8
 80008b4:	08005f44 	.word	0x08005f44
 80008b8:	08005f60 	.word	0x08005f60

080008bc <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	466b      	mov	r3, sp
 80008c4:	461e      	mov	r6, r3
	uint8_t buf[BMP280_TEMP_LEN];
 80008c6:	2303      	movs	r3, #3
 80008c8:	3b01      	subs	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	2303      	movs	r3, #3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	461c      	mov	r4, r3
 80008d4:	4615      	mov	r5, r2
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	00eb      	lsls	r3, r5, #3
 80008e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008e4:	00e2      	lsls	r2, r4, #3
 80008e6:	2303      	movs	r3, #3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	4611      	mov	r1, r2
 80008f0:	f04f 0200 	mov.w	r2, #0
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	00cb      	lsls	r3, r1, #3
 80008fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008fe:	00c2      	lsls	r2, r0, #3
 8000900:	2303      	movs	r3, #3
 8000902:	3307      	adds	r3, #7
 8000904:	08db      	lsrs	r3, r3, #3
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	ebad 0d03 	sub.w	sp, sp, r3
 800090c:	466b      	mov	r3, sp
 800090e:	3300      	adds	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
;
	BMP280_S32_t adc_T;

	BMP280_Read_Reg(buf,BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8000912:	23fa      	movs	r3, #250	@ 0xfa
 8000914:	2203      	movs	r2, #3
 8000916:	4619      	mov	r1, r3
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f7ff ff97 	bl	800084c <BMP280_Read_Reg>

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	031a      	lsls	r2, r3, #12
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	011b      	lsls	r3, r3, #4
 800092a:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	7892      	ldrb	r2, [r2, #2]
 8000930:	0912      	lsrs	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000934:	4313      	orrs	r3, r2
 8000936:	607b      	str	r3, [r7, #4]

	printf("Temperature: %lu\r\n", adc_T);
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <BMP280_get_temperature+0x90>)
 800093c:	f004 faf0 	bl	8004f20 <iprintf>
	return adc_T;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	46b5      	mov	sp, r6
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	08005f7c 	.word	0x08005f7c

08000950 <BMP280_get_pressure>:

BMP280_S32_t BMP280_get_pressure() {
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	466b      	mov	r3, sp
 8000958:	461e      	mov	r6, r3
	uint8_t buf[BMP280_PRES_LEN];
 800095a:	2303      	movs	r3, #3
 800095c:	3b01      	subs	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	2303      	movs	r3, #3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2200      	movs	r2, #0
 8000966:	461c      	mov	r4, r3
 8000968:	4615      	mov	r5, r2
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	f04f 0300 	mov.w	r3, #0
 8000972:	00eb      	lsls	r3, r5, #3
 8000974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000978:	00e2      	lsls	r2, r4, #3
 800097a:	2303      	movs	r3, #3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2200      	movs	r2, #0
 8000980:	4618      	mov	r0, r3
 8000982:	4611      	mov	r1, r2
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	00cb      	lsls	r3, r1, #3
 800098e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000992:	00c2      	lsls	r2, r0, #3
 8000994:	2303      	movs	r3, #3
 8000996:	3307      	adds	r3, #7
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	ebad 0d03 	sub.w	sp, sp, r3
 80009a0:	466b      	mov	r3, sp
 80009a2:	3300      	adds	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]

	BMP280_S32_t adc_P;

	BMP280_Read_Reg(buf, BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 80009a6:	23f7      	movs	r3, #247	@ 0xf7
 80009a8:	2203      	movs	r2, #3
 80009aa:	4619      	mov	r1, r3
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f7ff ff4d 	bl	800084c <BMP280_Read_Reg>

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	031a      	lsls	r2, r3, #12
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	7892      	ldrb	r2, [r2, #2]
 80009c4:	0912      	lsrs	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80009c8:	4313      	orrs	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
	printf("Pressure: %lu\r\n", adc_P);
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <BMP280_get_pressure+0x90>)
 80009d0:	f004 faa6 	bl	8004f20 <iprintf>
	return adc_P;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	46b5      	mov	sp, r6
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e0:	08005f90 	.word	0x08005f90

080009e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009e8:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_CAN1_Init+0x68>)
 80009ea:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <MX_CAN1_Init+0x6c>)
 80009ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_CAN1_Init+0x68>)
 80009f0:	2206      	movs	r2, #6
 80009f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_CAN1_Init+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_CAN1_Init+0x68>)
 80009fc:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8000a00:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000a02:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a04:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000a08:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a10:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_CAN1_Init+0x68>)
 8000a38:	f000 fdd4 	bl	80015e4 <HAL_CAN_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a42:	f000 fa0d 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	40006400 	.word	0x40006400

08000a54 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a22      	ldr	r2, [pc, #136]	@ (8000afc <HAL_CAN_MspInit+0xa8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d13d      	bne.n	8000af2 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <HAL_CAN_MspInit+0xac>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a20      	ldr	r2, [pc, #128]	@ (8000b00 <HAL_CAN_MspInit+0xac>)
 8000a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <HAL_CAN_MspInit+0xac>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <HAL_CAN_MspInit+0xac>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <HAL_CAN_MspInit+0xac>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_CAN_MspInit+0xac>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ac0:	2309      	movs	r3, #9
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480e      	ldr	r0, [pc, #56]	@ (8000b04 <HAL_CAN_MspInit+0xb0>)
 8000acc:	f001 f93e 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ae2:	2309      	movs	r3, #9
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <HAL_CAN_MspInit+0xb0>)
 8000aee:	f001 f92d 	bl	8001d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	@ 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40006400 	.word	0x40006400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400

08000b08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a25      	ldr	r2, [pc, #148]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a17      	ldr	r2, [pc, #92]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2120      	movs	r1, #32
 8000b92:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <MX_GPIO_Init+0xd4>)
 8000b94:	f001 fa6e 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b9e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_GPIO_Init+0xd8>)
 8000bb0:	f001 f8cc 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <MX_GPIO_Init+0xd4>)
 8000bcc:	f001 f8be 	bl	8001d4c <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	@ 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020800 	.word	0x40020800

08000be4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bea:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <MX_I2C1_Init+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bf0:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <MX_I2C1_Init+0x58>)
 8000bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c22:	f001 fa41 	bl	80020a8 <HAL_I2C_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c2c:	f000 f918 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000d8 	.word	0x200000d8
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	000186a0 	.word	0x000186a0

08000c40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <HAL_I2C_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23c0      	movs	r3, #192	@ 0xc0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <HAL_I2C_MspInit+0x8c>)
 8000c9a:	f001 f857 	bl	8001d4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000ca8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cd6:	f000 fbef 	bl	80014b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cda:	f000 f853 	bl	8000d84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cde:	f7ff ff13 	bl	8000b08 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ce2:	f000 fb11 	bl	8001308 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000ce6:	f000 fae5 	bl	80012b4 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8000cea:	f7ff fe7b 	bl	80009e4 <MX_CAN1_Init>
	MX_I2C1_Init();
 8000cee:	f7ff ff79 	bl	8000be4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
#ifdef CAN
	printf("START\r\n");
 8000cf2:	481e      	ldr	r0, [pc, #120]	@ (8000d6c <main+0x9c>)
 8000cf4:	f004 f97c 	bl	8004ff0 <puts>
	if(HAL_CAN_Start(&hcan1)==HAL_ERROR){printf("Erreur initialisation\r\n");}
 8000cf8:	481d      	ldr	r0, [pc, #116]	@ (8000d70 <main+0xa0>)
 8000cfa:	f000 fd6e 	bl	80017da <HAL_CAN_Start>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d102      	bne.n	8000d0a <main+0x3a>
 8000d04:	481b      	ldr	r0, [pc, #108]	@ (8000d74 <main+0xa4>)
 8000d06:	f004 f973 	bl	8004ff0 <puts>


#endif
#ifdef BMP280
	printf("------BMP280------\r\n");
 8000d0a:	481b      	ldr	r0, [pc, #108]	@ (8000d78 <main+0xa8>)
 8000d0c:	f004 f970 	bl	8004ff0 <puts>
	BMP280_check();
 8000d10:	f7ff fc46 	bl	80005a0 <BMP280_check>
	BMP280_init();
 8000d14:	f7ff fd28 	bl	8000768 <BMP280_init>
	uint32_t temp_ref =  BMP280_get_temperature();
 8000d18:	f7ff fdd0 	bl	80008bc <BMP280_get_temperature>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
#ifdef MOTOR
		uint32_t temp =  BMP280_get_temperature();
 8000d20:	f7ff fdcc 	bl	80008bc <BMP280_get_temperature>
 8000d24:	4603      	mov	r3, r0
 8000d26:	60bb      	str	r3, [r7, #8]
		uint8_t angle = (uint8_t)((temp_ref-temp)/2);
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	085b      	lsrs	r3, r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]

		if (angle >180){
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d36:	d904      	bls.n	8000d42 <main+0x72>
			motor_Angle(CLOCKWISE,90);
 8000d38:	215a      	movs	r1, #90	@ 0x5a
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f896 	bl	8000e6c <motor_Angle>
 8000d40:	e003      	b.n	8000d4a <main+0x7a>
		}
		else{
			motor_Angle(ANTI_CLOCKWISE,90);
 8000d42:	215a      	movs	r1, #90	@ 0x5a
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 f891 	bl	8000e6c <motor_Angle>

		}
		printf("angle  : %u°\r\n", angle);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <main+0xac>)
 8000d50:	f004 f8e6 	bl	8004f20 <iprintf>
		printf("moteur actualisé\r\n");
 8000d54:	480a      	ldr	r0, [pc, #40]	@ (8000d80 <main+0xb0>)
 8000d56:	f004 f94b 	bl	8004ff0 <puts>
		HAL_Delay(1000);
 8000d5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d5e:	f000 fc1d 	bl	800159c <HAL_Delay>
		temp_ref = temp;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	60fb      	str	r3, [r7, #12]
#endif
#ifdef SHELLV1
		shellv1();
#endif
#ifdef SHELLV2
		shellv2();
 8000d66:	f000 f8a9 	bl	8000ebc <shellv2>
	{
 8000d6a:	e7d9      	b.n	8000d20 <main+0x50>
 8000d6c:	08005fa0 	.word	0x08005fa0
 8000d70:	200000b0 	.word	0x200000b0
 8000d74:	08005fa8 	.word	0x08005fa8
 8000d78:	08005fc0 	.word	0x08005fc0
 8000d7c:	08005fd4 	.word	0x08005fd4
 8000d80:	08005fe4 	.word	0x08005fe4

08000d84 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	@ 0x50
 8000d88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2234      	movs	r2, #52	@ 0x34
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 f990 	bl	80050b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <SystemClock_Config+0xd4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <SystemClock_Config+0xd4>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <SystemClock_Config+0xd4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <SystemClock_Config+0xd8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dd0:	4a22      	ldr	r2, [pc, #136]	@ (8000e5c <SystemClock_Config+0xd8>)
 8000dd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <SystemClock_Config+0xd8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dec:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000df6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000dfc:	23b4      	movs	r3, #180	@ 0xb4
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 fc8d 	bl	8003730 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000e1c:	f000 f820 	bl	8000e60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 f92c 	bl	800309c <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000e4a:	f000 f809 	bl	8000e60 <Error_Handler>
	}
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	@ 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <Error_Handler+0x8>

08000e6c <motor_Angle>:
#include "motor.h"


extern CAN_HandleTypeDef hcan1;

void motor_Angle(ANGLE_SENS sens,uint8_t angle){
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b090      	sub	sp, #64	@ 0x40
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef pHeader =(CAN_TxHeaderTypeDef){
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <motor_Angle+0x48>)
 8000e7e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000e82:	461d      	mov	r5, r3
 8000e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e8c:	e884 0003 	stmia.w	r4, {r0, r1}
				.RTR = CAN_RTR_DATA,
				.DLC = 0x02,
				.TransmitGlobalTime = DISABLE
	};
	uint32_t pTxMailbox;
	uint8_t aData[2]={sens,angle};
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	723b      	strb	r3, [r7, #8]
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	727b      	strb	r3, [r7, #9]
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	f107 0208 	add.w	r2, r7, #8
 8000ea0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <motor_Angle+0x4c>)
 8000ea6:	f000 fcdc 	bl	8001862 <HAL_CAN_AddTxMessage>
}
 8000eaa:	bf00      	nop
 8000eac:	3740      	adds	r7, #64	@ 0x40
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08005ff8 	.word	0x08005ff8
 8000eb8:	200000b0 	.word	0x200000b0

08000ebc <shellv2>:
		Rx_index = 0;
		memset(Rx_Buffer, 0, SIZE_BUFFER);
	}
}

void shellv2(){ //!\\ Pose probleme pour le set_k=1234
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
	//Recuperons le caractère
	uint8_t Rx_data;
	int isFind;
	HAL_UART_Receive(&huart1,  (uint8_t*)&Rx_data, 1, 1000);
 8000ec2:	1df9      	adds	r1, r7, #7
 8000ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4827      	ldr	r0, [pc, #156]	@ (8000f68 <shellv2+0xac>)
 8000ecc:	f002 ffa9 	bl	8003e22 <HAL_UART_Receive>
	Rx_Buffer[Rx_index++] = Rx_data;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <shellv2+0xb0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	b2d1      	uxtb	r1, r2
 8000ed8:	4a24      	ldr	r2, [pc, #144]	@ (8000f6c <shellv2+0xb0>)
 8000eda:	7011      	strb	r1, [r2, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	79f9      	ldrb	r1, [r7, #7]
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <shellv2+0xb4>)
 8000ee2:	5499      	strb	r1, [r3, r2]

	// Interaction lors de la touche entrée
	if (Rx_data == '\r'){
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b0d      	cmp	r3, #13
 8000ee8:	d129      	bne.n	8000f3e <shellv2+0x82>
		char * command = strtok(Rx_Buffer,"=");// Divise la chaîne à chaque égal, et altere la cahien d'origine
 8000eea:	4922      	ldr	r1, [pc, #136]	@ (8000f74 <shellv2+0xb8>)
 8000eec:	4820      	ldr	r0, [pc, #128]	@ (8000f70 <shellv2+0xb4>)
 8000eee:	f004 f887 	bl	8005000 <strtok>
 8000ef2:	60f8      	str	r0, [r7, #12]
		char* value = strtok(NULL, " ");  // strtok(NULL) reprend là où la première division a été faite
 8000ef4:	4920      	ldr	r1, [pc, #128]	@ (8000f78 <shellv2+0xbc>)
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f004 f882 	bl	8005000 <strtok>
 8000efc:	60b8      	str	r0, [r7, #8]
		for (int i=0; i< sizeof(mapping);i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	e019      	b.n	8000f38 <shellv2+0x7c>
			if (mapping[i].requete==command){
 8000f04:	4a1d      	ldr	r2, [pc, #116]	@ (8000f7c <shellv2+0xc0>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d108      	bne.n	8000f24 <shellv2+0x68>
				mapping[i].funct(value);
 8000f12:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <shellv2+0xc0>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	68b8      	ldr	r0, [r7, #8]
 8000f1e:	4798      	blx	r3
				isFind = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
			}
			if (!isFind) {printf("Unknown command : %s\r\n",Rx_Buffer);}
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <shellv2+0x76>
 8000f2a:	4911      	ldr	r1, [pc, #68]	@ (8000f70 <shellv2+0xb4>)
 8000f2c:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <shellv2+0xc4>)
 8000f2e:	f003 fff7 	bl	8004f20 <iprintf>
		for (int i=0; i< sizeof(mapping);i++){
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	3301      	adds	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b17      	cmp	r3, #23
 8000f3c:	d9e2      	bls.n	8000f04 <shellv2+0x48>
		}
	}
	//Interaction shell normal
	if (Rx_data == '\b'){Rx_Buffer[Rx_index--]='\0';}
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d109      	bne.n	8000f58 <shellv2+0x9c>
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <shellv2+0xb0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	b2d1      	uxtb	r1, r2
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <shellv2+0xb0>)
 8000f4e:	7011      	strb	r1, [r2, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <shellv2+0xb4>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	5499      	strb	r1, [r3, r2]
	printf("%s",Rx_Buffer);
 8000f58:	4905      	ldr	r1, [pc, #20]	@ (8000f70 <shellv2+0xb4>)
 8000f5a:	480a      	ldr	r0, [pc, #40]	@ (8000f84 <shellv2+0xc8>)
 8000f5c:	f003 ffe0 	bl	8004f20 <iprintf>

}
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000198 	.word	0x20000198
 8000f6c:	2000012c 	.word	0x2000012c
 8000f70:	20000130 	.word	0x20000130
 8000f74:	08006070 	.word	0x08006070
 8000f78:	08006074 	.word	0x08006074
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	08006078 	.word	0x08006078
 8000f84:	08006090 	.word	0x08006090

08000f88 <subfunct_GET_T>:
void subfunct_GET_T(char *value){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	int32_t temp;
	temp = BMP280_get_temperature();
 8000f90:	f7ff fc94 	bl	80008bc <BMP280_get_temperature>
 8000f94:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)temp, sizeof(temp), HAL_MAX_DELAY);
 8000f96:	68f9      	ldr	r1, [r7, #12]
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <subfunct_GET_T+0x2c>)
 8000fa0:	f002 feb4 	bl	8003d0c <HAL_UART_Transmit>
	printf("Temperature:%lu°C\r\n",temp);
 8000fa4:	68f9      	ldr	r1, [r7, #12]
 8000fa6:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <subfunct_GET_T+0x30>)
 8000fa8:	f003 ffba 	bl	8004f20 <iprintf>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000198 	.word	0x20000198
 8000fb8:	08006094 	.word	0x08006094

08000fbc <subfunct_GET_P>:
void subfunct_GET_P(char *value){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	int32_t press;
	press = BMP280_get_pressure();
 8000fc4:	f7ff fcc4 	bl	8000950 <BMP280_get_pressure>
 8000fc8:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)press, sizeof(press), HAL_MAX_DELAY);
 8000fca:	68f9      	ldr	r1, [r7, #12]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <subfunct_GET_P+0x2c>)
 8000fd4:	f002 fe9a 	bl	8003d0c <HAL_UART_Transmit>
	printf("Pression:%lu\r\n",press);
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	4804      	ldr	r0, [pc, #16]	@ (8000fec <subfunct_GET_P+0x30>)
 8000fdc:	f003 ffa0 	bl	8004f20 <iprintf>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000198 	.word	0x20000198
 8000fec:	080060ac 	.word	0x080060ac

08000ff0 <subfunct_SET_K>:
void subfunct_SET_K(char *value){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	/*Fonction pour modifier le K :
	 * ici
	 */
	HAL_UART_Transmit(&huart1, (uint8_t*)&"SET_K=OK", 10, HAL_MAX_DELAY);
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	4905      	ldr	r1, [pc, #20]	@ (8001014 <subfunct_SET_K+0x24>)
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <subfunct_SET_K+0x28>)
 8001002:	f002 fe83 	bl	8003d0c <HAL_UART_Transmit>
	printf("SET_K=OK");
 8001006:	4803      	ldr	r0, [pc, #12]	@ (8001014 <subfunct_SET_K+0x24>)
 8001008:	f003 ff8a 	bl	8004f20 <iprintf>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	080060bc 	.word	0x080060bc
 8001018:	20000198 	.word	0x20000198

0800101c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001024:	1d39      	adds	r1, r7, #4
 8001026:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800102a:	2201      	movs	r2, #1
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <__io_putchar+0x20>)
 800102e:	f002 fe6d 	bl	8003d0c <HAL_UART_Transmit>

  return ch;
 8001032:	687b      	ldr	r3, [r7, #4]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001e0 	.word	0x200001e0

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <HAL_MspInit+0x4c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x4c>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800107e:	2007      	movs	r0, #7
 8001080:	f000 fd90 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 fa39 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <USART1_IRQHandler+0x10>)
 80010f6:	f002 ff2b 	bl	8003f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000198 	.word	0x20000198

08001104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return 1;
 8001108:	2301      	movs	r3, #1
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_kill>:

int _kill(int pid, int sig)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800111e:	f003 ffd3 	bl	80050c8 <__errno>
 8001122:	4603      	mov	r3, r0
 8001124:	2216      	movs	r2, #22
 8001126:	601a      	str	r2, [r3, #0]
  return -1;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_exit>:

void _exit (int status)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800113c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffe7 	bl	8001114 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <_exit+0x12>

0800114a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e00a      	b.n	8001172 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800115c:	f3af 8000 	nop.w
 8001160:	4601      	mov	r1, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	60ba      	str	r2, [r7, #8]
 8001168:	b2ca      	uxtb	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	429a      	cmp	r2, r3
 8001178:	dbf0      	blt.n	800115c <_read+0x12>
  }

  return len;
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e009      	b.n	80011aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	60ba      	str	r2, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff3c 	bl	800101c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dbf1      	blt.n	8001196 <_write+0x12>
  }
  return len;
 80011b2:	687b      	ldr	r3, [r7, #4]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_close>:

int _close(int file)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e4:	605a      	str	r2, [r3, #4]
  return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_isatty>:

int _isatty(int file)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011fc:	2301      	movs	r3, #1
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f003 ff38 	bl	80050c8 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20020000 	.word	0x20020000
 8001284:	00000400 	.word	0x00000400
 8001288:	20000194 	.word	0x20000194
 800128c:	20000378 	.word	0x20000378

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <MX_USART1_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ec:	f002 fcbe 	bl	8003c6c <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f7ff fdb3 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000198 	.word	0x20000198
 8001304:	40011000 	.word	0x40011000

08001308 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <MX_USART2_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001340:	f002 fc94 	bl	8003c6c <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f7ff fd89 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001e0 	.word	0x200001e0
 8001358:	40004400 	.word	0x40004400

0800135c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	@ 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a36      	ldr	r2, [pc, #216]	@ (8001454 <HAL_UART_MspInit+0xf8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d135      	bne.n	80013ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a34      	ldr	r2, [pc, #208]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c8:	2307      	movs	r3, #7
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4822      	ldr	r0, [pc, #136]	@ (800145c <HAL_UART_MspInit+0x100>)
 80013d4:	f000 fcba 	bl	8001d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2025      	movs	r0, #37	@ 0x25
 80013de:	f000 fbec 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013e2:	2025      	movs	r0, #37	@ 0x25
 80013e4:	f000 fc05 	bl	8001bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013e8:	e030      	b.n	800144c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <HAL_UART_MspInit+0x104>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d12b      	bne.n	800144c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	4a16      	ldr	r2, [pc, #88]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 80013fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001402:	6413      	str	r3, [r2, #64]	@ 0x40
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_UART_MspInit+0xfc>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800142c:	230c      	movs	r3, #12
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800143c:	2307      	movs	r3, #7
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <HAL_UART_MspInit+0x100>)
 8001448:	f000 fc80 	bl	8001d4c <HAL_GPIO_Init>
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	@ 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40011000 	.word	0x40011000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000
 8001460:	40004400 	.word	0x40004400

08001464 <Reset_Handler>:
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800149c <LoopFillZerobss+0xe>
 8001468:	f7ff ff12 	bl	8001290 <SystemInit>
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <LoopFillZerobss+0x12>)
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x16>)
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x1a>)
 8001472:	2300      	movs	r3, #0
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:
 8001476:	58d4      	ldr	r4, [r2, r3]
 8001478:	50c4      	str	r4, [r0, r3]
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:
 800147c:	18c4      	adds	r4, r0, r3
 800147e:	428c      	cmp	r4, r1
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LoopFillZerobss+0x1e>)
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x22>)
 8001486:	2300      	movs	r3, #0
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:
 800148e:	42a2      	cmp	r2, r4
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>
 8001492:	f003 fe1f 	bl	80050d4 <__libc_init_array>
 8001496:	f7ff fc1b 	bl	8000cd0 <main>
 800149a:	4770      	bx	lr
 800149c:	20020000 	.word	0x20020000
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000080 	.word	0x20000080
 80014a8:	080061d0 	.word	0x080061d0
 80014ac:	20000080 	.word	0x20000080
 80014b0:	20000378 	.word	0x20000378

080014b4 <ADC_IRQHandler>:
 80014b4:	e7fe      	b.n	80014b4 <ADC_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <HAL_Init+0x40>)
 80014c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_Init+0x40>)
 80014ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	@ (80014f8 <HAL_Init+0x40>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 fb5f 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff fda8 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023c00 	.word	0x40023c00

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fb77 	bl	8001c0e <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001538:	f000 fb3f 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000018 	.word	0x20000018
 8001554:	20000020 	.word	0x20000020
 8001558:	2000001c 	.word	0x2000001c

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000020 	.word	0x20000020
 8001580:	20000228 	.word	0x20000228

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000228 	.word	0x20000228

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000020 	.word	0x20000020

080015e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0ed      	b.n	80017d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fa26 	bl	8000a54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001618:	f7ff ffb4 	bl	8001584 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800161e:	e012      	b.n	8001646 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001620:	f7ff ffb0 	bl	8001584 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b0a      	cmp	r3, #10
 800162c:	d90b      	bls.n	8001646 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2205      	movs	r2, #5
 800163e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0c5      	b.n	80017d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0e5      	beq.n	8001620 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0202 	bic.w	r2, r2, #2
 8001662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff ff8e 	bl	8001584 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800166a:	e012      	b.n	8001692 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800166c:	f7ff ff8a 	bl	8001584 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b0a      	cmp	r3, #10
 8001678:	d90b      	bls.n	8001692 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2205      	movs	r2, #5
 800168a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e09f      	b.n	80017d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e5      	bne.n	800166c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7e5b      	ldrb	r3, [r3, #25]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7e9b      	ldrb	r3, [r3, #26]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0220 	orr.w	r2, r2, #32
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0220 	bic.w	r2, r2, #32
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7edb      	ldrb	r3, [r3, #27]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0210 	bic.w	r2, r2, #16
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e007      	b.n	8001748 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0210 	orr.w	r2, r2, #16
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7f1b      	ldrb	r3, [r3, #28]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0208 	orr.w	r2, r2, #8
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e007      	b.n	8001772 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0208 	bic.w	r2, r2, #8
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7f5b      	ldrb	r3, [r3, #29]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0204 	orr.w	r2, r2, #4
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e007      	b.n	800179c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	ea42 0103 	orr.w	r1, r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d12e      	bne.n	800184c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001806:	f7ff febd 	bl	8001584 <HAL_GetTick>
 800180a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800180c:	e012      	b.n	8001834 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800180e:	f7ff feb9 	bl	8001584 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b0a      	cmp	r3, #10
 800181a:	d90b      	bls.n	8001834 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2205      	movs	r2, #5
 800182c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e012      	b.n	800185a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e5      	bne.n	800180e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e006      	b.n	800185a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
  }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001862:	b480      	push	{r7}
 8001864:	b089      	sub	sp, #36	@ 0x24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001876:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001880:	7ffb      	ldrb	r3, [r7, #31]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d003      	beq.n	800188e <HAL_CAN_AddTxMessage+0x2c>
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	2b02      	cmp	r3, #2
 800188a:	f040 80ad 	bne.w	80019e8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d105      	bne.n	80018ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8095 	beq.w	80019d8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	0e1b      	lsrs	r3, r3, #24
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018b8:	2201      	movs	r2, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	409a      	lsls	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10d      	bne.n	80018e6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018d4:	68f9      	ldr	r1, [r7, #12]
 80018d6:	6809      	ldr	r1, [r1, #0]
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3318      	adds	r3, #24
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	440b      	add	r3, r1
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e00f      	b.n	8001906 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018f0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018f6:	68f9      	ldr	r1, [r7, #12]
 80018f8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018fa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3318      	adds	r3, #24
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	440b      	add	r3, r1
 8001904:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6819      	ldr	r1, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3318      	adds	r3, #24
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	440b      	add	r3, r1
 8001916:	3304      	adds	r3, #4
 8001918:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	7d1b      	ldrb	r3, [r3, #20]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d111      	bne.n	8001946 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3318      	adds	r3, #24
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	3304      	adds	r3, #4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	6811      	ldr	r1, [r2, #0]
 8001936:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3318      	adds	r3, #24
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	440b      	add	r3, r1
 8001942:	3304      	adds	r3, #4
 8001944:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3307      	adds	r3, #7
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	061a      	lsls	r2, r3, #24
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3306      	adds	r3, #6
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3305      	adds	r3, #5
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	4313      	orrs	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	3204      	adds	r2, #4
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	4610      	mov	r0, r2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	6811      	ldr	r1, [r2, #0]
 800196e:	ea43 0200 	orr.w	r2, r3, r0
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	440b      	add	r3, r1
 8001978:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800197c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3303      	adds	r3, #3
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	061a      	lsls	r2, r3, #24
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3302      	adds	r3, #2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	4313      	orrs	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	4610      	mov	r0, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	6811      	ldr	r1, [r2, #0]
 80019a4:	ea43 0200 	orr.w	r2, r3, r0
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	440b      	add	r3, r1
 80019ae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3318      	adds	r3, #24
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	6811      	ldr	r1, [r2, #0]
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3318      	adds	r3, #24
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	440b      	add	r3, r1
 80019d2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e00e      	b.n	80019f6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e006      	b.n	80019f6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
  }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	@ (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff3e 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff31 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff fca6 	bl	8001584 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d008      	beq.n	8001c58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e052      	b.n	8001cfe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0216 	bic.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <HAL_DMA_Abort+0x62>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0208 	bic.w	r2, r2, #8
 8001c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca8:	e013      	b.n	8001cd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001caa:	f7ff fc6b 	bl	8001584 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d90c      	bls.n	8001cd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e015      	b.n	8001cfe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e4      	bne.n	8001caa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	223f      	movs	r2, #63	@ 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e00c      	b.n	8001d3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2205      	movs	r2, #5
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e165      	b.n	8002034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8154 	bne.w	800202e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80ae 	beq.w	800202e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <HAL_GPIO_Init+0x300>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	4a5c      	ldr	r2, [pc, #368]	@ (800204c <HAL_GPIO_Init+0x300>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800204c <HAL_GPIO_Init+0x300>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	@ (8002054 <HAL_GPIO_Init+0x308>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d025      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002058 <HAL_GPIO_Init+0x30c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	@ (800205c <HAL_GPIO_Init+0x310>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002060 <HAL_GPIO_Init+0x314>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	@ (8002064 <HAL_GPIO_Init+0x318>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x20a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <HAL_GPIO_Init+0x31c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x206>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a49      	ldr	r2, [pc, #292]	@ (800206c <HAL_GPIO_Init+0x320>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x202>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e00c      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f4e:	2307      	movs	r3, #7
 8001f50:	e00a      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f86:	4b3a      	ldr	r3, [pc, #232]	@ (8002070 <HAL_GPIO_Init+0x324>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001faa:	4a31      	ldr	r2, [pc, #196]	@ (8002070 <HAL_GPIO_Init+0x324>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <HAL_GPIO_Init+0x324>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd4:	4a26      	ldr	r2, [pc, #152]	@ (8002070 <HAL_GPIO_Init+0x324>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fda:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <HAL_GPIO_Init+0x324>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <HAL_GPIO_Init+0x324>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_GPIO_Init+0x324>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_GPIO_Init+0x324>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f ae96 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40021400 	.word	0x40021400
 800206c:	40021800 	.word	0x40021800
 8002070:	40013c00 	.word	0x40013c00

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e12b      	b.n	8002312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fdb6 	bl	8000c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	@ 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800210a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800210c:	f001 f8b8 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a81      	ldr	r2, [pc, #516]	@ (800231c <HAL_I2C_Init+0x274>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d807      	bhi.n	800212c <HAL_I2C_Init+0x84>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a80      	ldr	r2, [pc, #512]	@ (8002320 <HAL_I2C_Init+0x278>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e006      	b.n	800213a <HAL_I2C_Init+0x92>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a7d      	ldr	r2, [pc, #500]	@ (8002324 <HAL_I2C_Init+0x27c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e7      	b.n	8002312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a78      	ldr	r2, [pc, #480]	@ (8002328 <HAL_I2C_Init+0x280>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0c9b      	lsrs	r3, r3, #18
 800214c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a6a      	ldr	r2, [pc, #424]	@ (800231c <HAL_I2C_Init+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d802      	bhi.n	800217c <HAL_I2C_Init+0xd4>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	e009      	b.n	8002190 <HAL_I2C_Init+0xe8>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a69      	ldr	r2, [pc, #420]	@ (800232c <HAL_I2C_Init+0x284>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	495c      	ldr	r1, [pc, #368]	@ (800231c <HAL_I2C_Init+0x274>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d819      	bhi.n	80021e4 <HAL_I2C_Init+0x13c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e59      	subs	r1, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021c4:	400b      	ands	r3, r1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_I2C_Init+0x138>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	e051      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e04f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_I2C_Init+0x168>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e012      	b.n	8002236 <HAL_I2C_Init+0x18e>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	0099      	lsls	r1, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x196>
 800223a:	2301      	movs	r3, #1
 800223c:	e022      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <HAL_I2C_Init+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e58      	subs	r0, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	440b      	add	r3, r1
 8002254:	fbb0 f3f3 	udiv	r3, r0, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6911      	ldr	r1, [r2, #16]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	000186a0 	.word	0x000186a0
 8002320:	001e847f 	.word	0x001e847f
 8002324:	003d08ff 	.word	0x003d08ff
 8002328:	431bde83 	.word	0x431bde83
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff f91e 	bl	8001584 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 80e0 	bne.w	8002518 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2319      	movs	r3, #25
 800235e:	2201      	movs	r2, #1
 8002360:	4970      	ldr	r1, [pc, #448]	@ (8002524 <HAL_I2C_Master_Transmit+0x1f4>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fc64 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	e0d3      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Master_Transmit+0x50>
 800237c:	2302      	movs	r3, #2
 800237e:	e0cc      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d007      	beq.n	80023a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2221      	movs	r2, #33	@ 0x21
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2210      	movs	r2, #16
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a50      	ldr	r2, [pc, #320]	@ (8002528 <HAL_I2C_Master_Transmit+0x1f8>)
 80023e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 face 	bl	8002990 <I2C_MasterRequestWrite>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e08d      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002414:	e066      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fd22 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fd19 	bl	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d107      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e01a      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d194      	bne.n	8002416 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	00100002 	.word	0x00100002
 8002528:	ffff0000 	.word	0xffff0000

0800252c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	@ 0x30
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	461a      	mov	r2, r3
 8002538:	460b      	mov	r3, r1
 800253a:	817b      	strh	r3, [r7, #10]
 800253c:	4613      	mov	r3, r2
 800253e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff f820 	bl	8001584 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b20      	cmp	r3, #32
 8002550:	f040 8217 	bne.w	8002982 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2319      	movs	r3, #25
 800255a:	2201      	movs	r2, #1
 800255c:	497c      	ldr	r1, [pc, #496]	@ (8002750 <HAL_I2C_Master_Receive+0x224>)
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fb66 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
 800256c:	e20a      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_I2C_Master_Receive+0x50>
 8002578:	2302      	movs	r3, #2
 800257a:	e203      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d007      	beq.n	80025a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2222      	movs	r2, #34	@ 0x22
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2210      	movs	r2, #16
 80025be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	893a      	ldrh	r2, [r7, #8]
 80025d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002754 <HAL_I2C_Master_Receive+0x228>)
 80025e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025e4:	8979      	ldrh	r1, [r7, #10]
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa52 	bl	8002a94 <I2C_MasterRequestRead>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c4      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e198      	b.n	800295c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	2b01      	cmp	r3, #1
 8002630:	d11b      	bne.n	800266a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e178      	b.n	800295c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266e:	2b02      	cmp	r3, #2
 8002670:	d11b      	bne.n	80026aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002680:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	e158      	b.n	800295c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026d0:	e144      	b.n	800295c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	f200 80f1 	bhi.w	80028be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d123      	bne.n	800272c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fc4b 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e145      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800272a:	e117      	b.n	800295c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	2b02      	cmp	r3, #2
 8002732:	d14e      	bne.n	80027d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	2200      	movs	r2, #0
 800273c:	4906      	ldr	r1, [pc, #24]	@ (8002758 <HAL_I2C_Master_Receive+0x22c>)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fa76 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e11a      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
 800274e:	bf00      	nop
 8002750:	00100002 	.word	0x00100002
 8002754:	ffff0000 	.word	0xffff0000
 8002758:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027d0:	e0c4      	b.n	800295c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d8:	2200      	movs	r2, #0
 80027da:	496c      	ldr	r1, [pc, #432]	@ (800298c <HAL_I2C_Master_Receive+0x460>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fa27 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0cb      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002834:	2200      	movs	r2, #0
 8002836:	4955      	ldr	r1, [pc, #340]	@ (800298c <HAL_I2C_Master_Receive+0x460>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f9f9 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e09d      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028bc:	e04e      	b.n	800295c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fb5e 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e058      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d124      	bne.n	800295c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002916:	2b03      	cmp	r3, #3
 8002918:	d107      	bne.n	800292a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002928:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f aeb6 	bne.w	80026d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3728      	adds	r7, #40	@ 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	00010004 	.word	0x00010004

08002990 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	460b      	mov	r3, r1
 800299e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d006      	beq.n	80029ba <I2C_MasterRequestWrite+0x2a>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d003      	beq.n	80029ba <I2C_MasterRequestWrite+0x2a>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029b8:	d108      	bne.n	80029cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e00b      	b.n	80029e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	2b12      	cmp	r3, #18
 80029d2:	d107      	bne.n	80029e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f91d 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0a:	d103      	bne.n	8002a14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e035      	b.n	8002a84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a20:	d108      	bne.n	8002a34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	e01b      	b.n	8002a6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a34:	897b      	ldrh	r3, [r7, #10]
 8002a36:	11db      	asrs	r3, r3, #7
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 0306 	and.w	r3, r3, #6
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f063 030f 	orn	r3, r3, #15
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	490e      	ldr	r1, [pc, #56]	@ (8002a8c <I2C_MasterRequestWrite+0xfc>)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f966 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e010      	b.n	8002a84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4907      	ldr	r1, [pc, #28]	@ (8002a90 <I2C_MasterRequestWrite+0x100>)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f956 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	00010008 	.word	0x00010008
 8002a90:	00010002 	.word	0x00010002

08002a94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d006      	beq.n	8002ace <I2C_MasterRequestRead+0x3a>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d003      	beq.n	8002ace <I2C_MasterRequestRead+0x3a>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002acc:	d108      	bne.n	8002ae0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e00b      	b.n	8002af8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	2b11      	cmp	r3, #17
 8002ae6:	d107      	bne.n	8002af8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f893 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1e:	d103      	bne.n	8002b28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e079      	b.n	8002c20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b34:	d108      	bne.n	8002b48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	e05f      	b.n	8002c08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b48:	897b      	ldrh	r3, [r7, #10]
 8002b4a:	11db      	asrs	r3, r3, #7
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0306 	and.w	r3, r3, #6
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f063 030f 	orn	r3, r3, #15
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4930      	ldr	r1, [pc, #192]	@ (8002c28 <I2C_MasterRequestRead+0x194>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f8dc 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e054      	b.n	8002c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4929      	ldr	r1, [pc, #164]	@ (8002c2c <I2C_MasterRequestRead+0x198>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f8cc 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e044      	b.n	8002c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f831 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be2:	d103      	bne.n	8002bec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e017      	b.n	8002c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	11db      	asrs	r3, r3, #7
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0306 	and.w	r3, r3, #6
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f063 030e 	orn	r3, r3, #14
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4907      	ldr	r1, [pc, #28]	@ (8002c2c <I2C_MasterRequestRead+0x198>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f888 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	00010008 	.word	0x00010008
 8002c2c:	00010002 	.word	0x00010002

08002c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	e048      	b.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c48:	d044      	beq.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe fc9b 	bl	8001584 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d139      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10d      	bne.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	e00c      	b.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d116      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e023      	b.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10d      	bne.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	e00c      	b.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	43da      	mvns	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4013      	ands	r3, r2
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d093      	beq.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d32:	e071      	b.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d123      	bne.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e067      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d92:	d041      	beq.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fe fbf6 	bl	8001584 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d136      	bne.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10c      	bne.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e00b      	b.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e021      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10c      	bne.n	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e00b      	b.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f47f af6d 	bne.w	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e70:	e034      	b.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8e3 	bl	800303e <I2C_IsAcknowledgeFailed>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e034      	b.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e88:	d028      	beq.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe fb7b 	bl	8001584 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11d      	bne.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eaa:	2b80      	cmp	r3, #128	@ 0x80
 8002eac:	d016      	beq.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d1c3      	bne.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f00:	e034      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f89b 	bl	800303e <I2C_IsAcknowledgeFailed>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e034      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f18:	d028      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fb33 	bl	8001584 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11d      	bne.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d016      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d1c3      	bne.n	8002f02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f90:	e049      	b.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d119      	bne.n	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e030      	b.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fe fad6 	bl	8001584 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11d      	bne.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff4:	2b40      	cmp	r3, #64	@ 0x40
 8002ff6:	d016      	beq.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e007      	b.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d1ae      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003054:	d11b      	bne.n	800308e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800305e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f043 0204 	orr.w	r2, r3, #4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0cc      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b68      	ldr	r3, [pc, #416]	@ (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d90c      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b65      	ldr	r3, [pc, #404]	@ (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b63      	ldr	r3, [pc, #396]	@ (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0b8      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f0:	4b59      	ldr	r3, [pc, #356]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a58      	ldr	r2, [pc, #352]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003108:	4b53      	ldr	r3, [pc, #332]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a52      	ldr	r2, [pc, #328]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003114:	4b50      	ldr	r3, [pc, #320]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	494d      	ldr	r1, [pc, #308]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d044      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d119      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d003      	beq.n	800315a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003156:	2b03      	cmp	r3, #3
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e067      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4934      	ldr	r1, [pc, #208]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7fe f9fa 	bl	8001584 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe f9f6 	bl	8001584 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e04f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d20c      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b22      	ldr	r3, [pc, #136]	@ (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b20      	ldr	r3, [pc, #128]	@ (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e032      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f0:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4916      	ldr	r1, [pc, #88]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320e:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	490e      	ldr	r1, [pc, #56]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003222:	f000 f855 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8003226:	4602      	mov	r2, r0
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	490a      	ldr	r1, [pc, #40]	@ (800325c <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	5ccb      	ldrb	r3, [r1, r3]
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800323e:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f95a 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023c00 	.word	0x40023c00
 8003258:	40023800 	.word	0x40023800
 800325c:	080060c8 	.word	0x080060c8
 8003260:	20000018 	.word	0x20000018
 8003264:	2000001c 	.word	0x2000001c

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b03      	ldr	r3, [pc, #12]	@ (800327c <HAL_RCC_GetHCLKFreq+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000018 	.word	0x20000018

08003280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003284:	f7ff fff0 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	@ (80032a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	080060d8 	.word	0x080060d8

080032a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032ac:	f7ff ffdc 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0b5b      	lsrs	r3, r3, #13
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4903      	ldr	r1, [pc, #12]	@ (80032cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	080060d8 	.word	0x080060d8

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b0ae      	sub	sp, #184	@ 0xb8
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f6:	4bcb      	ldr	r3, [pc, #812]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	f200 8206 	bhi.w	8003710 <HAL_RCC_GetSysClockFreq+0x440>
 8003304:	a201      	add	r2, pc, #4	@ (adr r2, 800330c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	08003341 	.word	0x08003341
 8003310:	08003711 	.word	0x08003711
 8003314:	08003711 	.word	0x08003711
 8003318:	08003711 	.word	0x08003711
 800331c:	08003349 	.word	0x08003349
 8003320:	08003711 	.word	0x08003711
 8003324:	08003711 	.word	0x08003711
 8003328:	08003711 	.word	0x08003711
 800332c:	08003351 	.word	0x08003351
 8003330:	08003711 	.word	0x08003711
 8003334:	08003711 	.word	0x08003711
 8003338:	08003711 	.word	0x08003711
 800333c:	08003541 	.word	0x08003541
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4bb9      	ldr	r3, [pc, #740]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x358>)
 8003342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003346:	e1e7      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003348:	4bb8      	ldr	r3, [pc, #736]	@ (800362c <HAL_RCC_GetSysClockFreq+0x35c>)
 800334a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800334e:	e1e3      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003350:	4bb4      	ldr	r3, [pc, #720]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800335c:	4bb1      	ldr	r3, [pc, #708]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d071      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003368:	4bae      	ldr	r3, [pc, #696]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003374:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003378:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800338a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800338e:	4622      	mov	r2, r4
 8003390:	462b      	mov	r3, r5
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	0159      	lsls	r1, r3, #5
 800339c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a0:	0150      	lsls	r0, r2, #5
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4621      	mov	r1, r4
 80033a8:	1a51      	subs	r1, r2, r1
 80033aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80033ac:	4629      	mov	r1, r5
 80033ae:	eb63 0301 	sbc.w	r3, r3, r1
 80033b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80033c0:	4649      	mov	r1, r9
 80033c2:	018b      	lsls	r3, r1, #6
 80033c4:	4641      	mov	r1, r8
 80033c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ca:	4641      	mov	r1, r8
 80033cc:	018a      	lsls	r2, r1, #6
 80033ce:	4641      	mov	r1, r8
 80033d0:	1a51      	subs	r1, r2, r1
 80033d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d4:	4649      	mov	r1, r9
 80033d6:	eb63 0301 	sbc.w	r3, r3, r1
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80033e8:	4649      	mov	r1, r9
 80033ea:	00cb      	lsls	r3, r1, #3
 80033ec:	4641      	mov	r1, r8
 80033ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033f2:	4641      	mov	r1, r8
 80033f4:	00ca      	lsls	r2, r1, #3
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	4622      	mov	r2, r4
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	633b      	str	r3, [r7, #48]	@ 0x30
 8003402:	462b      	mov	r3, r5
 8003404:	460a      	mov	r2, r1
 8003406:	eb42 0303 	adc.w	r3, r2, r3
 800340a:	637b      	str	r3, [r7, #52]	@ 0x34
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003418:	4629      	mov	r1, r5
 800341a:	024b      	lsls	r3, r1, #9
 800341c:	4621      	mov	r1, r4
 800341e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003422:	4621      	mov	r1, r4
 8003424:	024a      	lsls	r2, r1, #9
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800342e:	2200      	movs	r2, #0
 8003430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003434:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003438:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800343c:	f7fc ff38 	bl	80002b0 <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4613      	mov	r3, r2
 8003446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800344a:	e067      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344c:	4b75      	ldr	r3, [pc, #468]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	099b      	lsrs	r3, r3, #6
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003458:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800345c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003464:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003466:	2300      	movs	r3, #0
 8003468:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800346a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800346e:	4622      	mov	r2, r4
 8003470:	462b      	mov	r3, r5
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	0159      	lsls	r1, r3, #5
 800347c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003480:	0150      	lsls	r0, r2, #5
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4621      	mov	r1, r4
 8003488:	1a51      	subs	r1, r2, r1
 800348a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800348c:	4629      	mov	r1, r5
 800348e:	eb63 0301 	sbc.w	r3, r3, r1
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80034a0:	4649      	mov	r1, r9
 80034a2:	018b      	lsls	r3, r1, #6
 80034a4:	4641      	mov	r1, r8
 80034a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034aa:	4641      	mov	r1, r8
 80034ac:	018a      	lsls	r2, r1, #6
 80034ae:	4641      	mov	r1, r8
 80034b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b4:	4649      	mov	r1, r9
 80034b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ce:	4692      	mov	sl, r2
 80034d0:	469b      	mov	fp, r3
 80034d2:	4623      	mov	r3, r4
 80034d4:	eb1a 0303 	adds.w	r3, sl, r3
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	462b      	mov	r3, r5
 80034dc:	eb4b 0303 	adc.w	r3, fp, r3
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034ee:	4629      	mov	r1, r5
 80034f0:	028b      	lsls	r3, r1, #10
 80034f2:	4621      	mov	r1, r4
 80034f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f8:	4621      	mov	r1, r4
 80034fa:	028a      	lsls	r2, r1, #10
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003504:	2200      	movs	r2, #0
 8003506:	673b      	str	r3, [r7, #112]	@ 0x70
 8003508:	677a      	str	r2, [r7, #116]	@ 0x74
 800350a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800350e:	f7fc fecf 	bl	80002b0 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4613      	mov	r3, r2
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800351c:	4b41      	ldr	r3, [pc, #260]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	3301      	adds	r3, #1
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800352e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800353e:	e0eb      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003540:	4b38      	ldr	r3, [pc, #224]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354c:	4b35      	ldr	r3, [pc, #212]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d06b      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003558:	4b32      	ldr	r3, [pc, #200]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x354>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	2200      	movs	r2, #0
 8003560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003562:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	663b      	str	r3, [r7, #96]	@ 0x60
 800356c:	2300      	movs	r3, #0
 800356e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003570:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003574:	4622      	mov	r2, r4
 8003576:	462b      	mov	r3, r5
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	0159      	lsls	r1, r3, #5
 8003582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003586:	0150      	lsls	r0, r2, #5
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4621      	mov	r1, r4
 800358e:	1a51      	subs	r1, r2, r1
 8003590:	61b9      	str	r1, [r7, #24]
 8003592:	4629      	mov	r1, r5
 8003594:	eb63 0301 	sbc.w	r3, r3, r1
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035a6:	4659      	mov	r1, fp
 80035a8:	018b      	lsls	r3, r1, #6
 80035aa:	4651      	mov	r1, sl
 80035ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b0:	4651      	mov	r1, sl
 80035b2:	018a      	lsls	r2, r1, #6
 80035b4:	4651      	mov	r1, sl
 80035b6:	ebb2 0801 	subs.w	r8, r2, r1
 80035ba:	4659      	mov	r1, fp
 80035bc:	eb63 0901 	sbc.w	r9, r3, r1
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d4:	4690      	mov	r8, r2
 80035d6:	4699      	mov	r9, r3
 80035d8:	4623      	mov	r3, r4
 80035da:	eb18 0303 	adds.w	r3, r8, r3
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	462b      	mov	r3, r5
 80035e2:	eb49 0303 	adc.w	r3, r9, r3
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035f4:	4629      	mov	r1, r5
 80035f6:	024b      	lsls	r3, r1, #9
 80035f8:	4621      	mov	r1, r4
 80035fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035fe:	4621      	mov	r1, r4
 8003600:	024a      	lsls	r2, r1, #9
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800360a:	2200      	movs	r2, #0
 800360c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800360e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003614:	f7fc fe4c 	bl	80002b0 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4613      	mov	r3, r2
 800361e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003622:	e065      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x420>
 8003624:	40023800 	.word	0x40023800
 8003628:	00f42400 	.word	0x00f42400
 800362c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003630:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x458>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	2200      	movs	r2, #0
 8003638:	4618      	mov	r0, r3
 800363a:	4611      	mov	r1, r2
 800363c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003640:	653b      	str	r3, [r7, #80]	@ 0x50
 8003642:	2300      	movs	r3, #0
 8003644:	657b      	str	r3, [r7, #84]	@ 0x54
 8003646:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800364a:	4642      	mov	r2, r8
 800364c:	464b      	mov	r3, r9
 800364e:	f04f 0000 	mov.w	r0, #0
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	0159      	lsls	r1, r3, #5
 8003658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800365c:	0150      	lsls	r0, r2, #5
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4641      	mov	r1, r8
 8003664:	1a51      	subs	r1, r2, r1
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	4649      	mov	r1, r9
 800366a:	eb63 0301 	sbc.w	r3, r3, r1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800367c:	4659      	mov	r1, fp
 800367e:	018b      	lsls	r3, r1, #6
 8003680:	4651      	mov	r1, sl
 8003682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003686:	4651      	mov	r1, sl
 8003688:	018a      	lsls	r2, r1, #6
 800368a:	4651      	mov	r1, sl
 800368c:	1a54      	subs	r4, r2, r1
 800368e:	4659      	mov	r1, fp
 8003690:	eb63 0501 	sbc.w	r5, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	00eb      	lsls	r3, r5, #3
 800369e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a2:	00e2      	lsls	r2, r4, #3
 80036a4:	4614      	mov	r4, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	18e3      	adds	r3, r4, r3
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	464b      	mov	r3, r9
 80036b0:	eb45 0303 	adc.w	r3, r5, r3
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036c2:	4629      	mov	r1, r5
 80036c4:	028b      	lsls	r3, r1, #10
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036cc:	4621      	mov	r1, r4
 80036ce:	028a      	lsls	r2, r1, #10
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036d8:	2200      	movs	r2, #0
 80036da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036e2:	f7fc fde5 	bl	80002b0 <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4613      	mov	r3, r2
 80036ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x458>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	0f1b      	lsrs	r3, r3, #28
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80036fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800370e:	e003      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b06      	ldr	r3, [pc, #24]	@ (800372c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003716:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800371c:	4618      	mov	r0, r3
 800371e:	37b8      	adds	r7, #184	@ 0xb8
 8003720:	46bd      	mov	sp, r7
 8003722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	00f42400 	.word	0x00f42400

08003730 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e28d      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8083 	beq.w	8003856 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003750:	4b94      	ldr	r3, [pc, #592]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b04      	cmp	r3, #4
 800375a:	d019      	beq.n	8003790 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800375c:	4b91      	ldr	r3, [pc, #580]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
        || \
 8003764:	2b08      	cmp	r3, #8
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003768:	4b8e      	ldr	r3, [pc, #568]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003770:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003774:	d00c      	beq.n	8003790 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4b8b      	ldr	r3, [pc, #556]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003782:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800378e:	d10b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	4b84      	ldr	r3, [pc, #528]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05b      	beq.n	8003854 <HAL_RCC_OscConfig+0x124>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d157      	bne.n	8003854 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e25a      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x90>
 80037b2:	4b7c      	ldr	r3, [pc, #496]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7b      	ldr	r2, [pc, #492]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e01d      	b.n	80037fc <HAL_RCC_OscConfig+0xcc>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0xb4>
 80037ca:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a72      	ldr	r2, [pc, #456]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0xcc>
 80037e4:	4b6f      	ldr	r3, [pc, #444]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a6e      	ldr	r2, [pc, #440]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b6c      	ldr	r3, [pc, #432]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6b      	ldr	r2, [pc, #428]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd febe 	bl	8001584 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fd feba 	bl	8001584 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	@ 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e21f      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b61      	ldr	r3, [pc, #388]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0xdc>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd feaa 	bl	8001584 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd fea6 	bl	8001584 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e20b      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x104>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d06f      	beq.n	8003942 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003862:	4b50      	ldr	r3, [pc, #320]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b00      	cmp	r3, #0
 800386c:	d017      	beq.n	800389e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800386e:	4b4d      	ldr	r3, [pc, #308]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
        || \
 8003876:	2b08      	cmp	r3, #8
 8003878:	d105      	bne.n	8003886 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d11c      	bne.n	80038cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b44      	ldr	r3, [pc, #272]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x186>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e1d3      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4937      	ldr	r1, [pc, #220]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d4:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_OscConfig+0x278>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd fe53 	bl	8001584 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fd fe4f 	bl	8001584 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1b4      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4925      	ldr	r1, [pc, #148]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCC_OscConfig+0x278>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fe32 	bl	8001584 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7fd fe2e 	bl	8001584 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e193      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d036      	beq.n	80039bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fe12 	bl	8001584 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003964:	f7fd fe0e 	bl	8001584 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e173      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x234>
 8003982:	e01b      	b.n	80039bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fd fdfb 	bl	8001584 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	e00e      	b.n	80039b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fd fdf7 	bl	8001584 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d907      	bls.n	80039b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e15c      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	42470000 	.word	0x42470000
 80039ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	4b8a      	ldr	r3, [pc, #552]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 80039b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ea      	bne.n	8003992 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8097 	beq.w	8003af8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ce:	4b83      	ldr	r3, [pc, #524]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b7f      	ldr	r3, [pc, #508]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a7e      	ldr	r2, [pc, #504]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b7c      	ldr	r3, [pc, #496]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b79      	ldr	r3, [pc, #484]	@ (8003be0 <HAL_RCC_OscConfig+0x4b0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b76      	ldr	r3, [pc, #472]	@ (8003be0 <HAL_RCC_OscConfig+0x4b0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	@ (8003be0 <HAL_RCC_OscConfig+0x4b0>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fd fdb7 	bl	8001584 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fd fdb3 	bl	8001584 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e118      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003be0 <HAL_RCC_OscConfig+0x4b0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x31e>
 8003a40:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	4a65      	ldr	r2, [pc, #404]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4c:	e01c      	b.n	8003a88 <HAL_RCC_OscConfig+0x358>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x340>
 8003a56:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a60      	ldr	r2, [pc, #384]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a62:	4b5e      	ldr	r3, [pc, #376]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a5d      	ldr	r2, [pc, #372]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0x358>
 8003a70:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a59      	ldr	r2, [pc, #356]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	4b57      	ldr	r3, [pc, #348]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	4a56      	ldr	r2, [pc, #344]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd fd78 	bl	8001584 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fd fd74 	bl	8001584 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0d7      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	4b4b      	ldr	r3, [pc, #300]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ee      	beq.n	8003a98 <HAL_RCC_OscConfig+0x368>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd fd62 	bl	8001584 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fd fd5e 	bl	8001584 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0c1      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	4b40      	ldr	r3, [pc, #256]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ee      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b3b      	ldr	r3, [pc, #236]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	4a3a      	ldr	r2, [pc, #232]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80ad 	beq.w	8003c5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b02:	4b36      	ldr	r3, [pc, #216]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d060      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d145      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b33      	ldr	r3, [pc, #204]	@ (8003be4 <HAL_RCC_OscConfig+0x4b4>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fd32 	bl	8001584 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fd fd2e 	bl	8001584 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e093      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	491b      	ldr	r1, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCC_OscConfig+0x4b4>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fd03 	bl	8001584 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fd fcff 	bl	8001584 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e064      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b94:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x452>
 8003ba0:	e05c      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <HAL_RCC_OscConfig+0x4b4>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fcec 	bl	8001584 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fd fce8 	bl	8001584 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e04d      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_RCC_OscConfig+0x4ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x480>
 8003bce:	e045      	b.n	8003c5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e040      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40007000 	.word	0x40007000
 8003be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c68 <HAL_RCC_OscConfig+0x538>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d030      	beq.n	8003c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d129      	bne.n	8003c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d122      	bne.n	8003c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d119      	bne.n	8003c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	3b01      	subs	r3, #1
 8003c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d10f      	bne.n	8003c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800

08003c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e042      	b.n	8003d04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd fb62 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	@ 0x24
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fdff 	bl	80048b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d175      	bne.n	8003e18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Transmit+0x2c>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e06e      	b.n	8003e1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2221      	movs	r2, #33	@ 0x21
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd fc1b 	bl	8001584 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d64:	d108      	bne.n	8003d78 <HAL_UART_Transmit+0x6c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e003      	b.n	8003d80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d80:	e02e      	b.n	8003de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2180      	movs	r1, #128	@ 0x80
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fb9b 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e03a      	b.n	8003e1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e007      	b.n	8003dd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1cb      	bne.n	8003d82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2140      	movs	r1, #64	@ 0x40
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb67 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e006      	b.n	8003e1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b08a      	sub	sp, #40	@ 0x28
 8003e26:	af02      	add	r7, sp, #8
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 8081 	bne.w	8003f46 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_UART_Receive+0x2e>
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e079      	b.n	8003f48 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2222      	movs	r2, #34	@ 0x22
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e68:	f7fd fb8c 	bl	8001584 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e82:	d108      	bne.n	8003e96 <HAL_UART_Receive+0x74>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	e003      	b.n	8003e9e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e9e:	e047      	b.n	8003f30 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2120      	movs	r1, #32
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fb0c 	bl	80044c8 <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e042      	b.n	8003f48 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	3302      	adds	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e01f      	b.n	8003f22 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eea:	d007      	beq.n	8003efc <HAL_UART_Receive+0xda>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <HAL_UART_Receive+0xe8>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	e008      	b.n	8003f1c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1b2      	bne.n	8003ea0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b0ba      	sub	sp, #232	@ 0xe8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x66>
 8003fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fbc2 	bl	8004738 <UART_Receive_IT>
      return;
 8003fb4:	e25b      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80de 	beq.w	800417c <HAL_UART_IRQHandler+0x22c>
 8003fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80d1 	beq.w	800417c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_UART_IRQHandler+0xae>
 8003fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xd2>
 800400a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_UART_IRQHandler+0xf6>
 800402e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f043 0204 	orr.w	r2, r3, #4
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d011      	beq.n	8004076 <HAL_UART_IRQHandler+0x126>
 8004052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800405e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f043 0208 	orr.w	r2, r3, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 81f2 	beq.w	8004464 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_UART_IRQHandler+0x14e>
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fb4d 	bl	8004738 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <HAL_UART_IRQHandler+0x17a>
 80040c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d04f      	beq.n	800416a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa55 	bl	800457a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040da:	2b40      	cmp	r3, #64	@ 0x40
 80040dc:	d141      	bne.n	8004162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3314      	adds	r3, #20
 8004106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800410a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800410e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1d9      	bne.n	80040de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d013      	beq.n	800415a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	4a7e      	ldr	r2, [pc, #504]	@ (8004330 <HAL_UART_IRQHandler+0x3e0>)
 8004138:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fde1 	bl	8001d06 <HAL_DMA_Abort_IT>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004154:	4610      	mov	r0, r2
 8004156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e00e      	b.n	8004178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f99e 	bl	800449c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e00a      	b.n	8004178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f99a 	bl	800449c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e006      	b.n	8004178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f996 	bl	800449c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004176:	e175      	b.n	8004464 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	bf00      	nop
    return;
 800417a:	e173      	b.n	8004464 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 814f 	bne.w	8004424 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8148 	beq.w	8004424 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8141 	beq.w	8004424 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	f040 80b6 	bne.w	8004334 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8145 	beq.w	8004468 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041e6:	429a      	cmp	r2, r3
 80041e8:	f080 813e 	bcs.w	8004468 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fe:	f000 8088 	beq.w	8004312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800421c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800422e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800423a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1d9      	bne.n	8004202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800425e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3314      	adds	r3, #20
 800426e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004272:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004276:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800427a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e1      	bne.n	800424e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800429a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e2:	f023 0310 	bic.w	r3, r3, #16
 80042e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e3      	bne.n	80042d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fc8a 	bl	8001c26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	b29b      	uxth	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f8c1 	bl	80044b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800432e:	e09b      	b.n	8004468 <HAL_UART_IRQHandler+0x518>
 8004330:	08004641 	.word	0x08004641
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800433c:	b29b      	uxth	r3, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 808e 	beq.w	800446c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8089 	beq.w	800446c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800437e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004380:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e3      	bne.n	800435a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	623b      	str	r3, [r7, #32]
   return(result);
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e3      	bne.n	8004392 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043fc:	61fa      	str	r2, [r7, #28]
 80043fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	617b      	str	r3, [r7, #20]
   return(result);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e3      	bne.n	80043d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f847 	bl	80044b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004422:	e023      	b.n	800446c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <HAL_UART_IRQHandler+0x4f4>
 8004430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f913 	bl	8004668 <UART_Transmit_IT>
    return;
 8004442:	e014      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <HAL_UART_IRQHandler+0x51e>
 8004450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f953 	bl	8004708 <UART_EndTransmit_IT>
    return;
 8004462:	e004      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
    return;
 8004464:	bf00      	nop
 8004466:	e002      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
      return;
 8004468:	bf00      	nop
 800446a:	e000      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
      return;
 800446c:	bf00      	nop
  }
}
 800446e:	37e8      	adds	r7, #232	@ 0xe8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d8:	e03b      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e0:	d037      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fd f84f 	bl	8001584 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e03a      	b.n	8004572 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d023      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x8a>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b80      	cmp	r3, #128	@ 0x80
 800450e:	d020      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b40      	cmp	r3, #64	@ 0x40
 8004514:	d01d      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d116      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f81d 	bl	800457a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2208      	movs	r2, #8
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e00f      	b.n	8004572 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4013      	ands	r3, r2
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	bf0c      	ite	eq
 8004562:	2301      	moveq	r3, #1
 8004564:	2300      	movne	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	429a      	cmp	r2, r3
 800456e:	d0b4      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457a:	b480      	push	{r7}
 800457c:	b095      	sub	sp, #84	@ 0x54
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80045a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e5      	bne.n	80045b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d119      	bne.n	8004626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	60bb      	str	r3, [r7, #8]
   return(result);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0310 	bic.w	r3, r3, #16
 8004608:	647b      	str	r3, [r7, #68]	@ 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004612:	61ba      	str	r2, [r7, #24]
 8004614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	613b      	str	r3, [r7, #16]
   return(result);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004634:	bf00      	nop
 8004636:	3754      	adds	r7, #84	@ 0x54
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff ff1e 	bl	800449c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b21      	cmp	r3, #33	@ 0x21
 800467a:	d13e      	bne.n	80046fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	d114      	bne.n	80046b0 <UART_Transmit_IT+0x48>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d110      	bne.n	80046b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]
 80046ae:	e008      	b.n	80046c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6211      	str	r1, [r2, #32]
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4619      	mov	r1, r3
 80046d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800471e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fea3 	bl	8004474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08c      	sub	sp, #48	@ 0x30
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b22      	cmp	r3, #34	@ 0x22
 800474a:	f040 80ae 	bne.w	80048aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004756:	d117      	bne.n	8004788 <UART_Receive_IT+0x50>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d113      	bne.n	8004788 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	b29a      	uxth	r2, r3
 8004778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	629a      	str	r2, [r3, #40]	@ 0x28
 8004786:	e026      	b.n	80047d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	d007      	beq.n	80047ac <UART_Receive_IT+0x74>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <UART_Receive_IT+0x82>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	e008      	b.n	80047cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4619      	mov	r1, r3
 80047e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d15d      	bne.n	80048a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0220 	bic.w	r2, r2, #32
 80047f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482c:	2b01      	cmp	r3, #1
 800482e:	d135      	bne.n	800489c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	613b      	str	r3, [r7, #16]
   return(result);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f023 0310 	bic.w	r3, r3, #16
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004856:	623a      	str	r2, [r7, #32]
 8004858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	69f9      	ldr	r1, [r7, #28]
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	61bb      	str	r3, [r7, #24]
   return(result);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e5      	bne.n	8004836 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b10      	cmp	r3, #16
 8004876:	d10a      	bne.n	800488e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fe0b 	bl	80044b0 <HAL_UARTEx_RxEventCallback>
 800489a:	e002      	b.n	80048a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fdf3 	bl	8004488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e002      	b.n	80048ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3730      	adds	r7, #48	@ 0x30
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b8:	b0c0      	sub	sp, #256	@ 0x100
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d0:	68d9      	ldr	r1, [r3, #12]
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	ea40 0301 	orr.w	r3, r0, r1
 80048dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800490c:	f021 010c 	bic.w	r1, r1, #12
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800491a:	430b      	orrs	r3, r1
 800491c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492e:	6999      	ldr	r1, [r3, #24]
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	ea40 0301 	orr.w	r3, r0, r1
 800493a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b8f      	ldr	r3, [pc, #572]	@ (8004b80 <UART_SetConfig+0x2cc>)
 8004944:	429a      	cmp	r2, r3
 8004946:	d005      	beq.n	8004954 <UART_SetConfig+0xa0>
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b84 <UART_SetConfig+0x2d0>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d104      	bne.n	800495e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7fe fca8 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 8004958:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800495c:	e003      	b.n	8004966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800495e:	f7fe fc8f 	bl	8003280 <HAL_RCC_GetPCLK1Freq>
 8004962:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004970:	f040 810c 	bne.w	8004b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800497e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	1891      	adds	r1, r2, r2
 800498c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800498e:	415b      	adcs	r3, r3
 8004990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004996:	4621      	mov	r1, r4
 8004998:	eb12 0801 	adds.w	r8, r2, r1
 800499c:	4629      	mov	r1, r5
 800499e:	eb43 0901 	adc.w	r9, r3, r1
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049b6:	4690      	mov	r8, r2
 80049b8:	4699      	mov	r9, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	eb18 0303 	adds.w	r3, r8, r3
 80049c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049c4:	462b      	mov	r3, r5
 80049c6:	eb49 0303 	adc.w	r3, r9, r3
 80049ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049e2:	460b      	mov	r3, r1
 80049e4:	18db      	adds	r3, r3, r3
 80049e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e8:	4613      	mov	r3, r2
 80049ea:	eb42 0303 	adc.w	r3, r2, r3
 80049ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80049f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049f8:	f7fb fc5a 	bl	80002b0 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4b61      	ldr	r3, [pc, #388]	@ (8004b88 <UART_SetConfig+0x2d4>)
 8004a02:	fba3 2302 	umull	r2, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	011c      	lsls	r4, r3, #4
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a24:	415b      	adcs	r3, r3
 8004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a32:	4649      	mov	r1, r9
 8004a34:	eb43 0b01 	adc.w	fp, r3, r1
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a4c:	4692      	mov	sl, r2
 8004a4e:	469b      	mov	fp, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	eb1a 0303 	adds.w	r3, sl, r3
 8004a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	18db      	adds	r3, r3, r3
 8004a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a7e:	4613      	mov	r3, r2
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a8e:	f7fb fc0f 	bl	80002b0 <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	4b3b      	ldr	r3, [pc, #236]	@ (8004b88 <UART_SetConfig+0x2d4>)
 8004a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2264      	movs	r2, #100	@ 0x64
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	1acb      	subs	r3, r1, r3
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004aae:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <UART_SetConfig+0x2d4>)
 8004ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004abc:	441c      	add	r4, r3
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b34:	460b      	mov	r3, r1
 8004b36:	18db      	adds	r3, r3, r3
 8004b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b4a:	f7fb fbb1 	bl	80002b0 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <UART_SetConfig+0x2d4>)
 8004b54:	fba3 1302 	umull	r1, r3, r3, r2
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	2164      	movs	r1, #100	@ 0x64
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	3332      	adds	r3, #50	@ 0x32
 8004b66:	4a08      	ldr	r2, [pc, #32]	@ (8004b88 <UART_SetConfig+0x2d4>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	f003 0207 	and.w	r2, r3, #7
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4422      	add	r2, r4
 8004b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b7c:	e106      	b.n	8004d8c <UART_SetConfig+0x4d8>
 8004b7e:	bf00      	nop
 8004b80:	40011000 	.word	0x40011000
 8004b84:	40011400 	.word	0x40011400
 8004b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	6239      	str	r1, [r7, #32]
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bae:	4641      	mov	r1, r8
 8004bb0:	1854      	adds	r4, r2, r1
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	eb43 0501 	adc.w	r5, r3, r1
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	00eb      	lsls	r3, r5, #3
 8004bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc6:	00e2      	lsls	r2, r4, #3
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	4643      	mov	r3, r8
 8004bce:	18e3      	adds	r3, r4, r3
 8004bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	eb45 0303 	adc.w	r3, r5, r3
 8004bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	4621      	mov	r1, r4
 8004c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c04:	4621      	mov	r1, r4
 8004c06:	008a      	lsls	r2, r1, #2
 8004c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c0c:	f7fb fb50 	bl	80002b0 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b60      	ldr	r3, [pc, #384]	@ (8004d98 <UART_SetConfig+0x4e4>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011c      	lsls	r4, r3, #4
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	61b9      	str	r1, [r7, #24]
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c40:	4641      	mov	r1, r8
 8004c42:	1851      	adds	r1, r2, r1
 8004c44:	6139      	str	r1, [r7, #16]
 8004c46:	4649      	mov	r1, r9
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c58:	4659      	mov	r1, fp
 8004c5a:	00cb      	lsls	r3, r1, #3
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c62:	4651      	mov	r1, sl
 8004c64:	00ca      	lsls	r2, r1, #3
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c74:	464b      	mov	r3, r9
 8004c76:	460a      	mov	r2, r1
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c98:	4649      	mov	r1, r9
 8004c9a:	008b      	lsls	r3, r1, #2
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	008a      	lsls	r2, r1, #2
 8004ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004caa:	f7fb fb01 	bl	80002b0 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4b38      	ldr	r3, [pc, #224]	@ (8004d98 <UART_SetConfig+0x4e4>)
 8004cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2264      	movs	r2, #100	@ 0x64
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	1acb      	subs	r3, r1, r3
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	3332      	adds	r3, #50	@ 0x32
 8004cc8:	4a33      	ldr	r2, [pc, #204]	@ (8004d98 <UART_SetConfig+0x4e4>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd4:	441c      	add	r4, r3
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cde:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	415b      	adcs	r3, r3
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d26:	464b      	mov	r3, r9
 8004d28:	460a      	mov	r2, r1
 8004d2a:	eb42 0303 	adc.w	r3, r2, r3
 8004d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d48:	4649      	mov	r1, r9
 8004d4a:	008b      	lsls	r3, r1, #2
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d52:	4641      	mov	r1, r8
 8004d54:	008a      	lsls	r2, r1, #2
 8004d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d5a:	f7fb faa9 	bl	80002b0 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <UART_SetConfig+0x4e4>)
 8004d64:	fba3 1302 	umull	r1, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	2164      	movs	r1, #100	@ 0x64
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	3332      	adds	r3, #50	@ 0x32
 8004d76:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <UART_SetConfig+0x4e4>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4422      	add	r2, r4
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d92:	46bd      	mov	sp, r7
 8004d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d98:	51eb851f 	.word	0x51eb851f

08004d9c <std>:
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	4604      	mov	r4, r0
 8004da2:	e9c0 3300 	strd	r3, r3, [r0]
 8004da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004daa:	6083      	str	r3, [r0, #8]
 8004dac:	8181      	strh	r1, [r0, #12]
 8004dae:	6643      	str	r3, [r0, #100]	@ 0x64
 8004db0:	81c2      	strh	r2, [r0, #14]
 8004db2:	6183      	str	r3, [r0, #24]
 8004db4:	4619      	mov	r1, r3
 8004db6:	2208      	movs	r2, #8
 8004db8:	305c      	adds	r0, #92	@ 0x5c
 8004dba:	f000 f97d 	bl	80050b8 <memset>
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <std+0x58>)
 8004dc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <std+0x5c>)
 8004dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <std+0x60>)
 8004dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dca:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <std+0x64>)
 8004dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <std+0x68>)
 8004dd0:	6224      	str	r4, [r4, #32]
 8004dd2:	429c      	cmp	r4, r3
 8004dd4:	d006      	beq.n	8004de4 <std+0x48>
 8004dd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dda:	4294      	cmp	r4, r2
 8004ddc:	d002      	beq.n	8004de4 <std+0x48>
 8004dde:	33d0      	adds	r3, #208	@ 0xd0
 8004de0:	429c      	cmp	r4, r3
 8004de2:	d105      	bne.n	8004df0 <std+0x54>
 8004de4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dec:	f000 b996 	b.w	800511c <__retarget_lock_init_recursive>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	bf00      	nop
 8004df4:	080059c5 	.word	0x080059c5
 8004df8:	080059e7 	.word	0x080059e7
 8004dfc:	08005a1f 	.word	0x08005a1f
 8004e00:	08005a43 	.word	0x08005a43
 8004e04:	2000022c 	.word	0x2000022c

08004e08 <stdio_exit_handler>:
 8004e08:	4a02      	ldr	r2, [pc, #8]	@ (8004e14 <stdio_exit_handler+0xc>)
 8004e0a:	4903      	ldr	r1, [pc, #12]	@ (8004e18 <stdio_exit_handler+0x10>)
 8004e0c:	4803      	ldr	r0, [pc, #12]	@ (8004e1c <stdio_exit_handler+0x14>)
 8004e0e:	f000 b869 	b.w	8004ee4 <_fwalk_sglue>
 8004e12:	bf00      	nop
 8004e14:	20000024 	.word	0x20000024
 8004e18:	0800595d 	.word	0x0800595d
 8004e1c:	20000034 	.word	0x20000034

08004e20 <cleanup_stdio>:
 8004e20:	6841      	ldr	r1, [r0, #4]
 8004e22:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <cleanup_stdio+0x34>)
 8004e24:	4299      	cmp	r1, r3
 8004e26:	b510      	push	{r4, lr}
 8004e28:	4604      	mov	r4, r0
 8004e2a:	d001      	beq.n	8004e30 <cleanup_stdio+0x10>
 8004e2c:	f000 fd96 	bl	800595c <_fflush_r>
 8004e30:	68a1      	ldr	r1, [r4, #8]
 8004e32:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <cleanup_stdio+0x38>)
 8004e34:	4299      	cmp	r1, r3
 8004e36:	d002      	beq.n	8004e3e <cleanup_stdio+0x1e>
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 fd8f 	bl	800595c <_fflush_r>
 8004e3e:	68e1      	ldr	r1, [r4, #12]
 8004e40:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <cleanup_stdio+0x3c>)
 8004e42:	4299      	cmp	r1, r3
 8004e44:	d004      	beq.n	8004e50 <cleanup_stdio+0x30>
 8004e46:	4620      	mov	r0, r4
 8004e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e4c:	f000 bd86 	b.w	800595c <_fflush_r>
 8004e50:	bd10      	pop	{r4, pc}
 8004e52:	bf00      	nop
 8004e54:	2000022c 	.word	0x2000022c
 8004e58:	20000294 	.word	0x20000294
 8004e5c:	200002fc 	.word	0x200002fc

08004e60 <global_stdio_init.part.0>:
 8004e60:	b510      	push	{r4, lr}
 8004e62:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <global_stdio_init.part.0+0x30>)
 8004e64:	4c0b      	ldr	r4, [pc, #44]	@ (8004e94 <global_stdio_init.part.0+0x34>)
 8004e66:	4a0c      	ldr	r2, [pc, #48]	@ (8004e98 <global_stdio_init.part.0+0x38>)
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2104      	movs	r1, #4
 8004e70:	f7ff ff94 	bl	8004d9c <std>
 8004e74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2109      	movs	r1, #9
 8004e7c:	f7ff ff8e 	bl	8004d9c <std>
 8004e80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e84:	2202      	movs	r2, #2
 8004e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8a:	2112      	movs	r1, #18
 8004e8c:	f7ff bf86 	b.w	8004d9c <std>
 8004e90:	20000364 	.word	0x20000364
 8004e94:	2000022c 	.word	0x2000022c
 8004e98:	08004e09 	.word	0x08004e09

08004e9c <__sfp_lock_acquire>:
 8004e9c:	4801      	ldr	r0, [pc, #4]	@ (8004ea4 <__sfp_lock_acquire+0x8>)
 8004e9e:	f000 b93e 	b.w	800511e <__retarget_lock_acquire_recursive>
 8004ea2:	bf00      	nop
 8004ea4:	20000369 	.word	0x20000369

08004ea8 <__sfp_lock_release>:
 8004ea8:	4801      	ldr	r0, [pc, #4]	@ (8004eb0 <__sfp_lock_release+0x8>)
 8004eaa:	f000 b939 	b.w	8005120 <__retarget_lock_release_recursive>
 8004eae:	bf00      	nop
 8004eb0:	20000369 	.word	0x20000369

08004eb4 <__sinit>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	f7ff fff0 	bl	8004e9c <__sfp_lock_acquire>
 8004ebc:	6a23      	ldr	r3, [r4, #32]
 8004ebe:	b11b      	cbz	r3, 8004ec8 <__sinit+0x14>
 8004ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec4:	f7ff bff0 	b.w	8004ea8 <__sfp_lock_release>
 8004ec8:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <__sinit+0x28>)
 8004eca:	6223      	str	r3, [r4, #32]
 8004ecc:	4b04      	ldr	r3, [pc, #16]	@ (8004ee0 <__sinit+0x2c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f5      	bne.n	8004ec0 <__sinit+0xc>
 8004ed4:	f7ff ffc4 	bl	8004e60 <global_stdio_init.part.0>
 8004ed8:	e7f2      	b.n	8004ec0 <__sinit+0xc>
 8004eda:	bf00      	nop
 8004edc:	08004e21 	.word	0x08004e21
 8004ee0:	20000364 	.word	0x20000364

08004ee4 <_fwalk_sglue>:
 8004ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	4607      	mov	r7, r0
 8004eea:	4688      	mov	r8, r1
 8004eec:	4614      	mov	r4, r2
 8004eee:	2600      	movs	r6, #0
 8004ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ef8:	d505      	bpl.n	8004f06 <_fwalk_sglue+0x22>
 8004efa:	6824      	ldr	r4, [r4, #0]
 8004efc:	2c00      	cmp	r4, #0
 8004efe:	d1f7      	bne.n	8004ef0 <_fwalk_sglue+0xc>
 8004f00:	4630      	mov	r0, r6
 8004f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d907      	bls.n	8004f1c <_fwalk_sglue+0x38>
 8004f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f10:	3301      	adds	r3, #1
 8004f12:	d003      	beq.n	8004f1c <_fwalk_sglue+0x38>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4638      	mov	r0, r7
 8004f18:	47c0      	blx	r8
 8004f1a:	4306      	orrs	r6, r0
 8004f1c:	3568      	adds	r5, #104	@ 0x68
 8004f1e:	e7e9      	b.n	8004ef4 <_fwalk_sglue+0x10>

08004f20 <iprintf>:
 8004f20:	b40f      	push	{r0, r1, r2, r3}
 8004f22:	b507      	push	{r0, r1, r2, lr}
 8004f24:	4906      	ldr	r1, [pc, #24]	@ (8004f40 <iprintf+0x20>)
 8004f26:	ab04      	add	r3, sp, #16
 8004f28:	6808      	ldr	r0, [r1, #0]
 8004f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2e:	6881      	ldr	r1, [r0, #8]
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	f000 f93f 	bl	80051b4 <_vfiprintf_r>
 8004f36:	b003      	add	sp, #12
 8004f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f3c:	b004      	add	sp, #16
 8004f3e:	4770      	bx	lr
 8004f40:	20000030 	.word	0x20000030

08004f44 <_puts_r>:
 8004f44:	6a03      	ldr	r3, [r0, #32]
 8004f46:	b570      	push	{r4, r5, r6, lr}
 8004f48:	6884      	ldr	r4, [r0, #8]
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	b90b      	cbnz	r3, 8004f54 <_puts_r+0x10>
 8004f50:	f7ff ffb0 	bl	8004eb4 <__sinit>
 8004f54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f56:	07db      	lsls	r3, r3, #31
 8004f58:	d405      	bmi.n	8004f66 <_puts_r+0x22>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	0598      	lsls	r0, r3, #22
 8004f5e:	d402      	bmi.n	8004f66 <_puts_r+0x22>
 8004f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f62:	f000 f8dc 	bl	800511e <__retarget_lock_acquire_recursive>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	0719      	lsls	r1, r3, #28
 8004f6a:	d502      	bpl.n	8004f72 <_puts_r+0x2e>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d135      	bne.n	8004fde <_puts_r+0x9a>
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 fdb9 	bl	8005aec <__swsetup_r>
 8004f7a:	b380      	cbz	r0, 8004fde <_puts_r+0x9a>
 8004f7c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004f80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f82:	07da      	lsls	r2, r3, #31
 8004f84:	d405      	bmi.n	8004f92 <_puts_r+0x4e>
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	059b      	lsls	r3, r3, #22
 8004f8a:	d402      	bmi.n	8004f92 <_puts_r+0x4e>
 8004f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f8e:	f000 f8c7 	bl	8005120 <__retarget_lock_release_recursive>
 8004f92:	4628      	mov	r0, r5
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da04      	bge.n	8004fa4 <_puts_r+0x60>
 8004f9a:	69a2      	ldr	r2, [r4, #24]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	dc17      	bgt.n	8004fd0 <_puts_r+0x8c>
 8004fa0:	290a      	cmp	r1, #10
 8004fa2:	d015      	beq.n	8004fd0 <_puts_r+0x8c>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	6022      	str	r2, [r4, #0]
 8004faa:	7019      	strb	r1, [r3, #0]
 8004fac:	68a3      	ldr	r3, [r4, #8]
 8004fae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	60a3      	str	r3, [r4, #8]
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	d1ed      	bne.n	8004f96 <_puts_r+0x52>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da11      	bge.n	8004fe2 <_puts_r+0x9e>
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	210a      	movs	r1, #10
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 fd54 	bl	8005a70 <__swbuf_r>
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d0d7      	beq.n	8004f7c <_puts_r+0x38>
 8004fcc:	250a      	movs	r5, #10
 8004fce:	e7d7      	b.n	8004f80 <_puts_r+0x3c>
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 fd4c 	bl	8005a70 <__swbuf_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d1e7      	bne.n	8004fac <_puts_r+0x68>
 8004fdc:	e7ce      	b.n	8004f7c <_puts_r+0x38>
 8004fde:	3e01      	subs	r6, #1
 8004fe0:	e7e4      	b.n	8004fac <_puts_r+0x68>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	220a      	movs	r2, #10
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e7ee      	b.n	8004fcc <_puts_r+0x88>
	...

08004ff0 <puts>:
 8004ff0:	4b02      	ldr	r3, [pc, #8]	@ (8004ffc <puts+0xc>)
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f7ff bfa5 	b.w	8004f44 <_puts_r>
 8004ffa:	bf00      	nop
 8004ffc:	20000030 	.word	0x20000030

08005000 <strtok>:
 8005000:	4b16      	ldr	r3, [pc, #88]	@ (800505c <strtok+0x5c>)
 8005002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005006:	681f      	ldr	r7, [r3, #0]
 8005008:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800500a:	4605      	mov	r5, r0
 800500c:	460e      	mov	r6, r1
 800500e:	b9ec      	cbnz	r4, 800504c <strtok+0x4c>
 8005010:	2050      	movs	r0, #80	@ 0x50
 8005012:	f000 f9e7 	bl	80053e4 <malloc>
 8005016:	4602      	mov	r2, r0
 8005018:	6478      	str	r0, [r7, #68]	@ 0x44
 800501a:	b920      	cbnz	r0, 8005026 <strtok+0x26>
 800501c:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <strtok+0x60>)
 800501e:	4811      	ldr	r0, [pc, #68]	@ (8005064 <strtok+0x64>)
 8005020:	215b      	movs	r1, #91	@ 0x5b
 8005022:	f000 f87f 	bl	8005124 <__assert_func>
 8005026:	e9c0 4400 	strd	r4, r4, [r0]
 800502a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800502e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005032:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005036:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800503a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800503e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005042:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005046:	6184      	str	r4, [r0, #24]
 8005048:	7704      	strb	r4, [r0, #28]
 800504a:	6244      	str	r4, [r0, #36]	@ 0x24
 800504c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800504e:	4631      	mov	r1, r6
 8005050:	4628      	mov	r0, r5
 8005052:	2301      	movs	r3, #1
 8005054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005058:	f000 b806 	b.w	8005068 <__strtok_r>
 800505c:	20000030 	.word	0x20000030
 8005060:	080060e0 	.word	0x080060e0
 8005064:	080060f7 	.word	0x080060f7

08005068 <__strtok_r>:
 8005068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506a:	4604      	mov	r4, r0
 800506c:	b908      	cbnz	r0, 8005072 <__strtok_r+0xa>
 800506e:	6814      	ldr	r4, [r2, #0]
 8005070:	b144      	cbz	r4, 8005084 <__strtok_r+0x1c>
 8005072:	4620      	mov	r0, r4
 8005074:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005078:	460f      	mov	r7, r1
 800507a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800507e:	b91e      	cbnz	r6, 8005088 <__strtok_r+0x20>
 8005080:	b965      	cbnz	r5, 800509c <__strtok_r+0x34>
 8005082:	6015      	str	r5, [r2, #0]
 8005084:	2000      	movs	r0, #0
 8005086:	e005      	b.n	8005094 <__strtok_r+0x2c>
 8005088:	42b5      	cmp	r5, r6
 800508a:	d1f6      	bne.n	800507a <__strtok_r+0x12>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <__strtok_r+0xa>
 8005090:	6014      	str	r4, [r2, #0]
 8005092:	7003      	strb	r3, [r0, #0]
 8005094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005096:	461c      	mov	r4, r3
 8005098:	e00c      	b.n	80050b4 <__strtok_r+0x4c>
 800509a:	b915      	cbnz	r5, 80050a2 <__strtok_r+0x3a>
 800509c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050a0:	460e      	mov	r6, r1
 80050a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80050a6:	42ab      	cmp	r3, r5
 80050a8:	d1f7      	bne.n	800509a <__strtok_r+0x32>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f3      	beq.n	8005096 <__strtok_r+0x2e>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80050b4:	6014      	str	r4, [r2, #0]
 80050b6:	e7ed      	b.n	8005094 <__strtok_r+0x2c>

080050b8 <memset>:
 80050b8:	4402      	add	r2, r0
 80050ba:	4603      	mov	r3, r0
 80050bc:	4293      	cmp	r3, r2
 80050be:	d100      	bne.n	80050c2 <memset+0xa>
 80050c0:	4770      	bx	lr
 80050c2:	f803 1b01 	strb.w	r1, [r3], #1
 80050c6:	e7f9      	b.n	80050bc <memset+0x4>

080050c8 <__errno>:
 80050c8:	4b01      	ldr	r3, [pc, #4]	@ (80050d0 <__errno+0x8>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000030 	.word	0x20000030

080050d4 <__libc_init_array>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	4d0d      	ldr	r5, [pc, #52]	@ (800510c <__libc_init_array+0x38>)
 80050d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005110 <__libc_init_array+0x3c>)
 80050da:	1b64      	subs	r4, r4, r5
 80050dc:	10a4      	asrs	r4, r4, #2
 80050de:	2600      	movs	r6, #0
 80050e0:	42a6      	cmp	r6, r4
 80050e2:	d109      	bne.n	80050f8 <__libc_init_array+0x24>
 80050e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005114 <__libc_init_array+0x40>)
 80050e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005118 <__libc_init_array+0x44>)
 80050e8:	f000 fec6 	bl	8005e78 <_init>
 80050ec:	1b64      	subs	r4, r4, r5
 80050ee:	10a4      	asrs	r4, r4, #2
 80050f0:	2600      	movs	r6, #0
 80050f2:	42a6      	cmp	r6, r4
 80050f4:	d105      	bne.n	8005102 <__libc_init_array+0x2e>
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fc:	4798      	blx	r3
 80050fe:	3601      	adds	r6, #1
 8005100:	e7ee      	b.n	80050e0 <__libc_init_array+0xc>
 8005102:	f855 3b04 	ldr.w	r3, [r5], #4
 8005106:	4798      	blx	r3
 8005108:	3601      	adds	r6, #1
 800510a:	e7f2      	b.n	80050f2 <__libc_init_array+0x1e>
 800510c:	080061c8 	.word	0x080061c8
 8005110:	080061c8 	.word	0x080061c8
 8005114:	080061c8 	.word	0x080061c8
 8005118:	080061cc 	.word	0x080061cc

0800511c <__retarget_lock_init_recursive>:
 800511c:	4770      	bx	lr

0800511e <__retarget_lock_acquire_recursive>:
 800511e:	4770      	bx	lr

08005120 <__retarget_lock_release_recursive>:
 8005120:	4770      	bx	lr
	...

08005124 <__assert_func>:
 8005124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005126:	4614      	mov	r4, r2
 8005128:	461a      	mov	r2, r3
 800512a:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <__assert_func+0x2c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4605      	mov	r5, r0
 8005130:	68d8      	ldr	r0, [r3, #12]
 8005132:	b954      	cbnz	r4, 800514a <__assert_func+0x26>
 8005134:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <__assert_func+0x30>)
 8005136:	461c      	mov	r4, r3
 8005138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800513c:	9100      	str	r1, [sp, #0]
 800513e:	462b      	mov	r3, r5
 8005140:	4905      	ldr	r1, [pc, #20]	@ (8005158 <__assert_func+0x34>)
 8005142:	f000 fc83 	bl	8005a4c <fiprintf>
 8005146:	f000 fe01 	bl	8005d4c <abort>
 800514a:	4b04      	ldr	r3, [pc, #16]	@ (800515c <__assert_func+0x38>)
 800514c:	e7f4      	b.n	8005138 <__assert_func+0x14>
 800514e:	bf00      	nop
 8005150:	20000030 	.word	0x20000030
 8005154:	0800618c 	.word	0x0800618c
 8005158:	0800615e 	.word	0x0800615e
 800515c:	08006151 	.word	0x08006151

08005160 <__sfputc_r>:
 8005160:	6893      	ldr	r3, [r2, #8]
 8005162:	3b01      	subs	r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	b410      	push	{r4}
 8005168:	6093      	str	r3, [r2, #8]
 800516a:	da08      	bge.n	800517e <__sfputc_r+0x1e>
 800516c:	6994      	ldr	r4, [r2, #24]
 800516e:	42a3      	cmp	r3, r4
 8005170:	db01      	blt.n	8005176 <__sfputc_r+0x16>
 8005172:	290a      	cmp	r1, #10
 8005174:	d103      	bne.n	800517e <__sfputc_r+0x1e>
 8005176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800517a:	f000 bc79 	b.w	8005a70 <__swbuf_r>
 800517e:	6813      	ldr	r3, [r2, #0]
 8005180:	1c58      	adds	r0, r3, #1
 8005182:	6010      	str	r0, [r2, #0]
 8005184:	7019      	strb	r1, [r3, #0]
 8005186:	4608      	mov	r0, r1
 8005188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800518c:	4770      	bx	lr

0800518e <__sfputs_r>:
 800518e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005190:	4606      	mov	r6, r0
 8005192:	460f      	mov	r7, r1
 8005194:	4614      	mov	r4, r2
 8005196:	18d5      	adds	r5, r2, r3
 8005198:	42ac      	cmp	r4, r5
 800519a:	d101      	bne.n	80051a0 <__sfputs_r+0x12>
 800519c:	2000      	movs	r0, #0
 800519e:	e007      	b.n	80051b0 <__sfputs_r+0x22>
 80051a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a4:	463a      	mov	r2, r7
 80051a6:	4630      	mov	r0, r6
 80051a8:	f7ff ffda 	bl	8005160 <__sfputc_r>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d1f3      	bne.n	8005198 <__sfputs_r+0xa>
 80051b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051b4 <_vfiprintf_r>:
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	460d      	mov	r5, r1
 80051ba:	b09d      	sub	sp, #116	@ 0x74
 80051bc:	4614      	mov	r4, r2
 80051be:	4698      	mov	r8, r3
 80051c0:	4606      	mov	r6, r0
 80051c2:	b118      	cbz	r0, 80051cc <_vfiprintf_r+0x18>
 80051c4:	6a03      	ldr	r3, [r0, #32]
 80051c6:	b90b      	cbnz	r3, 80051cc <_vfiprintf_r+0x18>
 80051c8:	f7ff fe74 	bl	8004eb4 <__sinit>
 80051cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051ce:	07d9      	lsls	r1, r3, #31
 80051d0:	d405      	bmi.n	80051de <_vfiprintf_r+0x2a>
 80051d2:	89ab      	ldrh	r3, [r5, #12]
 80051d4:	059a      	lsls	r2, r3, #22
 80051d6:	d402      	bmi.n	80051de <_vfiprintf_r+0x2a>
 80051d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051da:	f7ff ffa0 	bl	800511e <__retarget_lock_acquire_recursive>
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	071b      	lsls	r3, r3, #28
 80051e2:	d501      	bpl.n	80051e8 <_vfiprintf_r+0x34>
 80051e4:	692b      	ldr	r3, [r5, #16]
 80051e6:	b99b      	cbnz	r3, 8005210 <_vfiprintf_r+0x5c>
 80051e8:	4629      	mov	r1, r5
 80051ea:	4630      	mov	r0, r6
 80051ec:	f000 fc7e 	bl	8005aec <__swsetup_r>
 80051f0:	b170      	cbz	r0, 8005210 <_vfiprintf_r+0x5c>
 80051f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051f4:	07dc      	lsls	r4, r3, #31
 80051f6:	d504      	bpl.n	8005202 <_vfiprintf_r+0x4e>
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051fc:	b01d      	add	sp, #116	@ 0x74
 80051fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	0598      	lsls	r0, r3, #22
 8005206:	d4f7      	bmi.n	80051f8 <_vfiprintf_r+0x44>
 8005208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800520a:	f7ff ff89 	bl	8005120 <__retarget_lock_release_recursive>
 800520e:	e7f3      	b.n	80051f8 <_vfiprintf_r+0x44>
 8005210:	2300      	movs	r3, #0
 8005212:	9309      	str	r3, [sp, #36]	@ 0x24
 8005214:	2320      	movs	r3, #32
 8005216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800521a:	f8cd 800c 	str.w	r8, [sp, #12]
 800521e:	2330      	movs	r3, #48	@ 0x30
 8005220:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053d0 <_vfiprintf_r+0x21c>
 8005224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005228:	f04f 0901 	mov.w	r9, #1
 800522c:	4623      	mov	r3, r4
 800522e:	469a      	mov	sl, r3
 8005230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005234:	b10a      	cbz	r2, 800523a <_vfiprintf_r+0x86>
 8005236:	2a25      	cmp	r2, #37	@ 0x25
 8005238:	d1f9      	bne.n	800522e <_vfiprintf_r+0x7a>
 800523a:	ebba 0b04 	subs.w	fp, sl, r4
 800523e:	d00b      	beq.n	8005258 <_vfiprintf_r+0xa4>
 8005240:	465b      	mov	r3, fp
 8005242:	4622      	mov	r2, r4
 8005244:	4629      	mov	r1, r5
 8005246:	4630      	mov	r0, r6
 8005248:	f7ff ffa1 	bl	800518e <__sfputs_r>
 800524c:	3001      	adds	r0, #1
 800524e:	f000 80a7 	beq.w	80053a0 <_vfiprintf_r+0x1ec>
 8005252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005254:	445a      	add	r2, fp
 8005256:	9209      	str	r2, [sp, #36]	@ 0x24
 8005258:	f89a 3000 	ldrb.w	r3, [sl]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 809f 	beq.w	80053a0 <_vfiprintf_r+0x1ec>
 8005262:	2300      	movs	r3, #0
 8005264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800526c:	f10a 0a01 	add.w	sl, sl, #1
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005278:	931a      	str	r3, [sp, #104]	@ 0x68
 800527a:	4654      	mov	r4, sl
 800527c:	2205      	movs	r2, #5
 800527e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005282:	4853      	ldr	r0, [pc, #332]	@ (80053d0 <_vfiprintf_r+0x21c>)
 8005284:	f7fa ffc4 	bl	8000210 <memchr>
 8005288:	9a04      	ldr	r2, [sp, #16]
 800528a:	b9d8      	cbnz	r0, 80052c4 <_vfiprintf_r+0x110>
 800528c:	06d1      	lsls	r1, r2, #27
 800528e:	bf44      	itt	mi
 8005290:	2320      	movmi	r3, #32
 8005292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005296:	0713      	lsls	r3, r2, #28
 8005298:	bf44      	itt	mi
 800529a:	232b      	movmi	r3, #43	@ 0x2b
 800529c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052a0:	f89a 3000 	ldrb.w	r3, [sl]
 80052a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80052a6:	d015      	beq.n	80052d4 <_vfiprintf_r+0x120>
 80052a8:	9a07      	ldr	r2, [sp, #28]
 80052aa:	4654      	mov	r4, sl
 80052ac:	2000      	movs	r0, #0
 80052ae:	f04f 0c0a 	mov.w	ip, #10
 80052b2:	4621      	mov	r1, r4
 80052b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052b8:	3b30      	subs	r3, #48	@ 0x30
 80052ba:	2b09      	cmp	r3, #9
 80052bc:	d94b      	bls.n	8005356 <_vfiprintf_r+0x1a2>
 80052be:	b1b0      	cbz	r0, 80052ee <_vfiprintf_r+0x13a>
 80052c0:	9207      	str	r2, [sp, #28]
 80052c2:	e014      	b.n	80052ee <_vfiprintf_r+0x13a>
 80052c4:	eba0 0308 	sub.w	r3, r0, r8
 80052c8:	fa09 f303 	lsl.w	r3, r9, r3
 80052cc:	4313      	orrs	r3, r2
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	46a2      	mov	sl, r4
 80052d2:	e7d2      	b.n	800527a <_vfiprintf_r+0xc6>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	1d19      	adds	r1, r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	9103      	str	r1, [sp, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bfbb      	ittet	lt
 80052e0:	425b      	neglt	r3, r3
 80052e2:	f042 0202 	orrlt.w	r2, r2, #2
 80052e6:	9307      	strge	r3, [sp, #28]
 80052e8:	9307      	strlt	r3, [sp, #28]
 80052ea:	bfb8      	it	lt
 80052ec:	9204      	strlt	r2, [sp, #16]
 80052ee:	7823      	ldrb	r3, [r4, #0]
 80052f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80052f2:	d10a      	bne.n	800530a <_vfiprintf_r+0x156>
 80052f4:	7863      	ldrb	r3, [r4, #1]
 80052f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052f8:	d132      	bne.n	8005360 <_vfiprintf_r+0x1ac>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	1d1a      	adds	r2, r3, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	9203      	str	r2, [sp, #12]
 8005302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005306:	3402      	adds	r4, #2
 8005308:	9305      	str	r3, [sp, #20]
 800530a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053e0 <_vfiprintf_r+0x22c>
 800530e:	7821      	ldrb	r1, [r4, #0]
 8005310:	2203      	movs	r2, #3
 8005312:	4650      	mov	r0, sl
 8005314:	f7fa ff7c 	bl	8000210 <memchr>
 8005318:	b138      	cbz	r0, 800532a <_vfiprintf_r+0x176>
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	eba0 000a 	sub.w	r0, r0, sl
 8005320:	2240      	movs	r2, #64	@ 0x40
 8005322:	4082      	lsls	r2, r0
 8005324:	4313      	orrs	r3, r2
 8005326:	3401      	adds	r4, #1
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532e:	4829      	ldr	r0, [pc, #164]	@ (80053d4 <_vfiprintf_r+0x220>)
 8005330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005334:	2206      	movs	r2, #6
 8005336:	f7fa ff6b 	bl	8000210 <memchr>
 800533a:	2800      	cmp	r0, #0
 800533c:	d03f      	beq.n	80053be <_vfiprintf_r+0x20a>
 800533e:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <_vfiprintf_r+0x224>)
 8005340:	bb1b      	cbnz	r3, 800538a <_vfiprintf_r+0x1d6>
 8005342:	9b03      	ldr	r3, [sp, #12]
 8005344:	3307      	adds	r3, #7
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	3308      	adds	r3, #8
 800534c:	9303      	str	r3, [sp, #12]
 800534e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005350:	443b      	add	r3, r7
 8005352:	9309      	str	r3, [sp, #36]	@ 0x24
 8005354:	e76a      	b.n	800522c <_vfiprintf_r+0x78>
 8005356:	fb0c 3202 	mla	r2, ip, r2, r3
 800535a:	460c      	mov	r4, r1
 800535c:	2001      	movs	r0, #1
 800535e:	e7a8      	b.n	80052b2 <_vfiprintf_r+0xfe>
 8005360:	2300      	movs	r3, #0
 8005362:	3401      	adds	r4, #1
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	4619      	mov	r1, r3
 8005368:	f04f 0c0a 	mov.w	ip, #10
 800536c:	4620      	mov	r0, r4
 800536e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005372:	3a30      	subs	r2, #48	@ 0x30
 8005374:	2a09      	cmp	r2, #9
 8005376:	d903      	bls.n	8005380 <_vfiprintf_r+0x1cc>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0c6      	beq.n	800530a <_vfiprintf_r+0x156>
 800537c:	9105      	str	r1, [sp, #20]
 800537e:	e7c4      	b.n	800530a <_vfiprintf_r+0x156>
 8005380:	fb0c 2101 	mla	r1, ip, r1, r2
 8005384:	4604      	mov	r4, r0
 8005386:	2301      	movs	r3, #1
 8005388:	e7f0      	b.n	800536c <_vfiprintf_r+0x1b8>
 800538a:	ab03      	add	r3, sp, #12
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	462a      	mov	r2, r5
 8005390:	4b12      	ldr	r3, [pc, #72]	@ (80053dc <_vfiprintf_r+0x228>)
 8005392:	a904      	add	r1, sp, #16
 8005394:	4630      	mov	r0, r6
 8005396:	f3af 8000 	nop.w
 800539a:	4607      	mov	r7, r0
 800539c:	1c78      	adds	r0, r7, #1
 800539e:	d1d6      	bne.n	800534e <_vfiprintf_r+0x19a>
 80053a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053a2:	07d9      	lsls	r1, r3, #31
 80053a4:	d405      	bmi.n	80053b2 <_vfiprintf_r+0x1fe>
 80053a6:	89ab      	ldrh	r3, [r5, #12]
 80053a8:	059a      	lsls	r2, r3, #22
 80053aa:	d402      	bmi.n	80053b2 <_vfiprintf_r+0x1fe>
 80053ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053ae:	f7ff feb7 	bl	8005120 <__retarget_lock_release_recursive>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	065b      	lsls	r3, r3, #25
 80053b6:	f53f af1f 	bmi.w	80051f8 <_vfiprintf_r+0x44>
 80053ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053bc:	e71e      	b.n	80051fc <_vfiprintf_r+0x48>
 80053be:	ab03      	add	r3, sp, #12
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	462a      	mov	r2, r5
 80053c4:	4b05      	ldr	r3, [pc, #20]	@ (80053dc <_vfiprintf_r+0x228>)
 80053c6:	a904      	add	r1, sp, #16
 80053c8:	4630      	mov	r0, r6
 80053ca:	f000 f923 	bl	8005614 <_printf_i>
 80053ce:	e7e4      	b.n	800539a <_vfiprintf_r+0x1e6>
 80053d0:	0800618d 	.word	0x0800618d
 80053d4:	08006197 	.word	0x08006197
 80053d8:	00000000 	.word	0x00000000
 80053dc:	0800518f 	.word	0x0800518f
 80053e0:	08006193 	.word	0x08006193

080053e4 <malloc>:
 80053e4:	4b02      	ldr	r3, [pc, #8]	@ (80053f0 <malloc+0xc>)
 80053e6:	4601      	mov	r1, r0
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	f000 b825 	b.w	8005438 <_malloc_r>
 80053ee:	bf00      	nop
 80053f0:	20000030 	.word	0x20000030

080053f4 <sbrk_aligned>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005434 <sbrk_aligned+0x40>)
 80053f8:	460c      	mov	r4, r1
 80053fa:	6831      	ldr	r1, [r6, #0]
 80053fc:	4605      	mov	r5, r0
 80053fe:	b911      	cbnz	r1, 8005406 <sbrk_aligned+0x12>
 8005400:	f000 fc82 	bl	8005d08 <_sbrk_r>
 8005404:	6030      	str	r0, [r6, #0]
 8005406:	4621      	mov	r1, r4
 8005408:	4628      	mov	r0, r5
 800540a:	f000 fc7d 	bl	8005d08 <_sbrk_r>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	d103      	bne.n	800541a <sbrk_aligned+0x26>
 8005412:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005416:	4620      	mov	r0, r4
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	1cc4      	adds	r4, r0, #3
 800541c:	f024 0403 	bic.w	r4, r4, #3
 8005420:	42a0      	cmp	r0, r4
 8005422:	d0f8      	beq.n	8005416 <sbrk_aligned+0x22>
 8005424:	1a21      	subs	r1, r4, r0
 8005426:	4628      	mov	r0, r5
 8005428:	f000 fc6e 	bl	8005d08 <_sbrk_r>
 800542c:	3001      	adds	r0, #1
 800542e:	d1f2      	bne.n	8005416 <sbrk_aligned+0x22>
 8005430:	e7ef      	b.n	8005412 <sbrk_aligned+0x1e>
 8005432:	bf00      	nop
 8005434:	2000036c 	.word	0x2000036c

08005438 <_malloc_r>:
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800543c:	1ccd      	adds	r5, r1, #3
 800543e:	f025 0503 	bic.w	r5, r5, #3
 8005442:	3508      	adds	r5, #8
 8005444:	2d0c      	cmp	r5, #12
 8005446:	bf38      	it	cc
 8005448:	250c      	movcc	r5, #12
 800544a:	2d00      	cmp	r5, #0
 800544c:	4606      	mov	r6, r0
 800544e:	db01      	blt.n	8005454 <_malloc_r+0x1c>
 8005450:	42a9      	cmp	r1, r5
 8005452:	d904      	bls.n	800545e <_malloc_r+0x26>
 8005454:	230c      	movs	r3, #12
 8005456:	6033      	str	r3, [r6, #0]
 8005458:	2000      	movs	r0, #0
 800545a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005534 <_malloc_r+0xfc>
 8005462:	f000 faa3 	bl	80059ac <__malloc_lock>
 8005466:	f8d8 3000 	ldr.w	r3, [r8]
 800546a:	461c      	mov	r4, r3
 800546c:	bb44      	cbnz	r4, 80054c0 <_malloc_r+0x88>
 800546e:	4629      	mov	r1, r5
 8005470:	4630      	mov	r0, r6
 8005472:	f7ff ffbf 	bl	80053f4 <sbrk_aligned>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	4604      	mov	r4, r0
 800547a:	d158      	bne.n	800552e <_malloc_r+0xf6>
 800547c:	f8d8 4000 	ldr.w	r4, [r8]
 8005480:	4627      	mov	r7, r4
 8005482:	2f00      	cmp	r7, #0
 8005484:	d143      	bne.n	800550e <_malloc_r+0xd6>
 8005486:	2c00      	cmp	r4, #0
 8005488:	d04b      	beq.n	8005522 <_malloc_r+0xea>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	4639      	mov	r1, r7
 800548e:	4630      	mov	r0, r6
 8005490:	eb04 0903 	add.w	r9, r4, r3
 8005494:	f000 fc38 	bl	8005d08 <_sbrk_r>
 8005498:	4581      	cmp	r9, r0
 800549a:	d142      	bne.n	8005522 <_malloc_r+0xea>
 800549c:	6821      	ldr	r1, [r4, #0]
 800549e:	1a6d      	subs	r5, r5, r1
 80054a0:	4629      	mov	r1, r5
 80054a2:	4630      	mov	r0, r6
 80054a4:	f7ff ffa6 	bl	80053f4 <sbrk_aligned>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d03a      	beq.n	8005522 <_malloc_r+0xea>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	442b      	add	r3, r5
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	f8d8 3000 	ldr.w	r3, [r8]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	bb62      	cbnz	r2, 8005514 <_malloc_r+0xdc>
 80054ba:	f8c8 7000 	str.w	r7, [r8]
 80054be:	e00f      	b.n	80054e0 <_malloc_r+0xa8>
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	1b52      	subs	r2, r2, r5
 80054c4:	d420      	bmi.n	8005508 <_malloc_r+0xd0>
 80054c6:	2a0b      	cmp	r2, #11
 80054c8:	d917      	bls.n	80054fa <_malloc_r+0xc2>
 80054ca:	1961      	adds	r1, r4, r5
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	6025      	str	r5, [r4, #0]
 80054d0:	bf18      	it	ne
 80054d2:	6059      	strne	r1, [r3, #4]
 80054d4:	6863      	ldr	r3, [r4, #4]
 80054d6:	bf08      	it	eq
 80054d8:	f8c8 1000 	streq.w	r1, [r8]
 80054dc:	5162      	str	r2, [r4, r5]
 80054de:	604b      	str	r3, [r1, #4]
 80054e0:	4630      	mov	r0, r6
 80054e2:	f000 fa69 	bl	80059b8 <__malloc_unlock>
 80054e6:	f104 000b 	add.w	r0, r4, #11
 80054ea:	1d23      	adds	r3, r4, #4
 80054ec:	f020 0007 	bic.w	r0, r0, #7
 80054f0:	1ac2      	subs	r2, r0, r3
 80054f2:	bf1c      	itt	ne
 80054f4:	1a1b      	subne	r3, r3, r0
 80054f6:	50a3      	strne	r3, [r4, r2]
 80054f8:	e7af      	b.n	800545a <_malloc_r+0x22>
 80054fa:	6862      	ldr	r2, [r4, #4]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	bf0c      	ite	eq
 8005500:	f8c8 2000 	streq.w	r2, [r8]
 8005504:	605a      	strne	r2, [r3, #4]
 8005506:	e7eb      	b.n	80054e0 <_malloc_r+0xa8>
 8005508:	4623      	mov	r3, r4
 800550a:	6864      	ldr	r4, [r4, #4]
 800550c:	e7ae      	b.n	800546c <_malloc_r+0x34>
 800550e:	463c      	mov	r4, r7
 8005510:	687f      	ldr	r7, [r7, #4]
 8005512:	e7b6      	b.n	8005482 <_malloc_r+0x4a>
 8005514:	461a      	mov	r2, r3
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	42a3      	cmp	r3, r4
 800551a:	d1fb      	bne.n	8005514 <_malloc_r+0xdc>
 800551c:	2300      	movs	r3, #0
 800551e:	6053      	str	r3, [r2, #4]
 8005520:	e7de      	b.n	80054e0 <_malloc_r+0xa8>
 8005522:	230c      	movs	r3, #12
 8005524:	6033      	str	r3, [r6, #0]
 8005526:	4630      	mov	r0, r6
 8005528:	f000 fa46 	bl	80059b8 <__malloc_unlock>
 800552c:	e794      	b.n	8005458 <_malloc_r+0x20>
 800552e:	6005      	str	r5, [r0, #0]
 8005530:	e7d6      	b.n	80054e0 <_malloc_r+0xa8>
 8005532:	bf00      	nop
 8005534:	20000370 	.word	0x20000370

08005538 <_printf_common>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	4616      	mov	r6, r2
 800553e:	4698      	mov	r8, r3
 8005540:	688a      	ldr	r2, [r1, #8]
 8005542:	690b      	ldr	r3, [r1, #16]
 8005544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005548:	4293      	cmp	r3, r2
 800554a:	bfb8      	it	lt
 800554c:	4613      	movlt	r3, r2
 800554e:	6033      	str	r3, [r6, #0]
 8005550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005554:	4607      	mov	r7, r0
 8005556:	460c      	mov	r4, r1
 8005558:	b10a      	cbz	r2, 800555e <_printf_common+0x26>
 800555a:	3301      	adds	r3, #1
 800555c:	6033      	str	r3, [r6, #0]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	0699      	lsls	r1, r3, #26
 8005562:	bf42      	ittt	mi
 8005564:	6833      	ldrmi	r3, [r6, #0]
 8005566:	3302      	addmi	r3, #2
 8005568:	6033      	strmi	r3, [r6, #0]
 800556a:	6825      	ldr	r5, [r4, #0]
 800556c:	f015 0506 	ands.w	r5, r5, #6
 8005570:	d106      	bne.n	8005580 <_printf_common+0x48>
 8005572:	f104 0a19 	add.w	sl, r4, #25
 8005576:	68e3      	ldr	r3, [r4, #12]
 8005578:	6832      	ldr	r2, [r6, #0]
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	42ab      	cmp	r3, r5
 800557e:	dc26      	bgt.n	80055ce <_printf_common+0x96>
 8005580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	3b00      	subs	r3, #0
 8005588:	bf18      	it	ne
 800558a:	2301      	movne	r3, #1
 800558c:	0692      	lsls	r2, r2, #26
 800558e:	d42b      	bmi.n	80055e8 <_printf_common+0xb0>
 8005590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005594:	4641      	mov	r1, r8
 8005596:	4638      	mov	r0, r7
 8005598:	47c8      	blx	r9
 800559a:	3001      	adds	r0, #1
 800559c:	d01e      	beq.n	80055dc <_printf_common+0xa4>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	6922      	ldr	r2, [r4, #16]
 80055a2:	f003 0306 	and.w	r3, r3, #6
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	bf02      	ittt	eq
 80055aa:	68e5      	ldreq	r5, [r4, #12]
 80055ac:	6833      	ldreq	r3, [r6, #0]
 80055ae:	1aed      	subeq	r5, r5, r3
 80055b0:	68a3      	ldr	r3, [r4, #8]
 80055b2:	bf0c      	ite	eq
 80055b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b8:	2500      	movne	r5, #0
 80055ba:	4293      	cmp	r3, r2
 80055bc:	bfc4      	itt	gt
 80055be:	1a9b      	subgt	r3, r3, r2
 80055c0:	18ed      	addgt	r5, r5, r3
 80055c2:	2600      	movs	r6, #0
 80055c4:	341a      	adds	r4, #26
 80055c6:	42b5      	cmp	r5, r6
 80055c8:	d11a      	bne.n	8005600 <_printf_common+0xc8>
 80055ca:	2000      	movs	r0, #0
 80055cc:	e008      	b.n	80055e0 <_printf_common+0xa8>
 80055ce:	2301      	movs	r3, #1
 80055d0:	4652      	mov	r2, sl
 80055d2:	4641      	mov	r1, r8
 80055d4:	4638      	mov	r0, r7
 80055d6:	47c8      	blx	r9
 80055d8:	3001      	adds	r0, #1
 80055da:	d103      	bne.n	80055e4 <_printf_common+0xac>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e4:	3501      	adds	r5, #1
 80055e6:	e7c6      	b.n	8005576 <_printf_common+0x3e>
 80055e8:	18e1      	adds	r1, r4, r3
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	2030      	movs	r0, #48	@ 0x30
 80055ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055f2:	4422      	add	r2, r4
 80055f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055fc:	3302      	adds	r3, #2
 80055fe:	e7c7      	b.n	8005590 <_printf_common+0x58>
 8005600:	2301      	movs	r3, #1
 8005602:	4622      	mov	r2, r4
 8005604:	4641      	mov	r1, r8
 8005606:	4638      	mov	r0, r7
 8005608:	47c8      	blx	r9
 800560a:	3001      	adds	r0, #1
 800560c:	d0e6      	beq.n	80055dc <_printf_common+0xa4>
 800560e:	3601      	adds	r6, #1
 8005610:	e7d9      	b.n	80055c6 <_printf_common+0x8e>
	...

08005614 <_printf_i>:
 8005614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	7e0f      	ldrb	r7, [r1, #24]
 800561a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800561c:	2f78      	cmp	r7, #120	@ 0x78
 800561e:	4691      	mov	r9, r2
 8005620:	4680      	mov	r8, r0
 8005622:	460c      	mov	r4, r1
 8005624:	469a      	mov	sl, r3
 8005626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800562a:	d807      	bhi.n	800563c <_printf_i+0x28>
 800562c:	2f62      	cmp	r7, #98	@ 0x62
 800562e:	d80a      	bhi.n	8005646 <_printf_i+0x32>
 8005630:	2f00      	cmp	r7, #0
 8005632:	f000 80d2 	beq.w	80057da <_printf_i+0x1c6>
 8005636:	2f58      	cmp	r7, #88	@ 0x58
 8005638:	f000 80b9 	beq.w	80057ae <_printf_i+0x19a>
 800563c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005644:	e03a      	b.n	80056bc <_printf_i+0xa8>
 8005646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800564a:	2b15      	cmp	r3, #21
 800564c:	d8f6      	bhi.n	800563c <_printf_i+0x28>
 800564e:	a101      	add	r1, pc, #4	@ (adr r1, 8005654 <_printf_i+0x40>)
 8005650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005654:	080056ad 	.word	0x080056ad
 8005658:	080056c1 	.word	0x080056c1
 800565c:	0800563d 	.word	0x0800563d
 8005660:	0800563d 	.word	0x0800563d
 8005664:	0800563d 	.word	0x0800563d
 8005668:	0800563d 	.word	0x0800563d
 800566c:	080056c1 	.word	0x080056c1
 8005670:	0800563d 	.word	0x0800563d
 8005674:	0800563d 	.word	0x0800563d
 8005678:	0800563d 	.word	0x0800563d
 800567c:	0800563d 	.word	0x0800563d
 8005680:	080057c1 	.word	0x080057c1
 8005684:	080056eb 	.word	0x080056eb
 8005688:	0800577b 	.word	0x0800577b
 800568c:	0800563d 	.word	0x0800563d
 8005690:	0800563d 	.word	0x0800563d
 8005694:	080057e3 	.word	0x080057e3
 8005698:	0800563d 	.word	0x0800563d
 800569c:	080056eb 	.word	0x080056eb
 80056a0:	0800563d 	.word	0x0800563d
 80056a4:	0800563d 	.word	0x0800563d
 80056a8:	08005783 	.word	0x08005783
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	1d1a      	adds	r2, r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6032      	str	r2, [r6, #0]
 80056b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056bc:	2301      	movs	r3, #1
 80056be:	e09d      	b.n	80057fc <_printf_i+0x1e8>
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	6820      	ldr	r0, [r4, #0]
 80056c4:	1d19      	adds	r1, r3, #4
 80056c6:	6031      	str	r1, [r6, #0]
 80056c8:	0606      	lsls	r6, r0, #24
 80056ca:	d501      	bpl.n	80056d0 <_printf_i+0xbc>
 80056cc:	681d      	ldr	r5, [r3, #0]
 80056ce:	e003      	b.n	80056d8 <_printf_i+0xc4>
 80056d0:	0645      	lsls	r5, r0, #25
 80056d2:	d5fb      	bpl.n	80056cc <_printf_i+0xb8>
 80056d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056d8:	2d00      	cmp	r5, #0
 80056da:	da03      	bge.n	80056e4 <_printf_i+0xd0>
 80056dc:	232d      	movs	r3, #45	@ 0x2d
 80056de:	426d      	negs	r5, r5
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056e4:	4859      	ldr	r0, [pc, #356]	@ (800584c <_printf_i+0x238>)
 80056e6:	230a      	movs	r3, #10
 80056e8:	e011      	b.n	800570e <_printf_i+0xfa>
 80056ea:	6821      	ldr	r1, [r4, #0]
 80056ec:	6833      	ldr	r3, [r6, #0]
 80056ee:	0608      	lsls	r0, r1, #24
 80056f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80056f4:	d402      	bmi.n	80056fc <_printf_i+0xe8>
 80056f6:	0649      	lsls	r1, r1, #25
 80056f8:	bf48      	it	mi
 80056fa:	b2ad      	uxthmi	r5, r5
 80056fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80056fe:	4853      	ldr	r0, [pc, #332]	@ (800584c <_printf_i+0x238>)
 8005700:	6033      	str	r3, [r6, #0]
 8005702:	bf14      	ite	ne
 8005704:	230a      	movne	r3, #10
 8005706:	2308      	moveq	r3, #8
 8005708:	2100      	movs	r1, #0
 800570a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800570e:	6866      	ldr	r6, [r4, #4]
 8005710:	60a6      	str	r6, [r4, #8]
 8005712:	2e00      	cmp	r6, #0
 8005714:	bfa2      	ittt	ge
 8005716:	6821      	ldrge	r1, [r4, #0]
 8005718:	f021 0104 	bicge.w	r1, r1, #4
 800571c:	6021      	strge	r1, [r4, #0]
 800571e:	b90d      	cbnz	r5, 8005724 <_printf_i+0x110>
 8005720:	2e00      	cmp	r6, #0
 8005722:	d04b      	beq.n	80057bc <_printf_i+0x1a8>
 8005724:	4616      	mov	r6, r2
 8005726:	fbb5 f1f3 	udiv	r1, r5, r3
 800572a:	fb03 5711 	mls	r7, r3, r1, r5
 800572e:	5dc7      	ldrb	r7, [r0, r7]
 8005730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005734:	462f      	mov	r7, r5
 8005736:	42bb      	cmp	r3, r7
 8005738:	460d      	mov	r5, r1
 800573a:	d9f4      	bls.n	8005726 <_printf_i+0x112>
 800573c:	2b08      	cmp	r3, #8
 800573e:	d10b      	bne.n	8005758 <_printf_i+0x144>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07df      	lsls	r7, r3, #31
 8005744:	d508      	bpl.n	8005758 <_printf_i+0x144>
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	6861      	ldr	r1, [r4, #4]
 800574a:	4299      	cmp	r1, r3
 800574c:	bfde      	ittt	le
 800574e:	2330      	movle	r3, #48	@ 0x30
 8005750:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005754:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005758:	1b92      	subs	r2, r2, r6
 800575a:	6122      	str	r2, [r4, #16]
 800575c:	f8cd a000 	str.w	sl, [sp]
 8005760:	464b      	mov	r3, r9
 8005762:	aa03      	add	r2, sp, #12
 8005764:	4621      	mov	r1, r4
 8005766:	4640      	mov	r0, r8
 8005768:	f7ff fee6 	bl	8005538 <_printf_common>
 800576c:	3001      	adds	r0, #1
 800576e:	d14a      	bne.n	8005806 <_printf_i+0x1f2>
 8005770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005774:	b004      	add	sp, #16
 8005776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	f043 0320 	orr.w	r3, r3, #32
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	4833      	ldr	r0, [pc, #204]	@ (8005850 <_printf_i+0x23c>)
 8005784:	2778      	movs	r7, #120	@ 0x78
 8005786:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	6831      	ldr	r1, [r6, #0]
 800578e:	061f      	lsls	r7, r3, #24
 8005790:	f851 5b04 	ldr.w	r5, [r1], #4
 8005794:	d402      	bmi.n	800579c <_printf_i+0x188>
 8005796:	065f      	lsls	r7, r3, #25
 8005798:	bf48      	it	mi
 800579a:	b2ad      	uxthmi	r5, r5
 800579c:	6031      	str	r1, [r6, #0]
 800579e:	07d9      	lsls	r1, r3, #31
 80057a0:	bf44      	itt	mi
 80057a2:	f043 0320 	orrmi.w	r3, r3, #32
 80057a6:	6023      	strmi	r3, [r4, #0]
 80057a8:	b11d      	cbz	r5, 80057b2 <_printf_i+0x19e>
 80057aa:	2310      	movs	r3, #16
 80057ac:	e7ac      	b.n	8005708 <_printf_i+0xf4>
 80057ae:	4827      	ldr	r0, [pc, #156]	@ (800584c <_printf_i+0x238>)
 80057b0:	e7e9      	b.n	8005786 <_printf_i+0x172>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f023 0320 	bic.w	r3, r3, #32
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	e7f6      	b.n	80057aa <_printf_i+0x196>
 80057bc:	4616      	mov	r6, r2
 80057be:	e7bd      	b.n	800573c <_printf_i+0x128>
 80057c0:	6833      	ldr	r3, [r6, #0]
 80057c2:	6825      	ldr	r5, [r4, #0]
 80057c4:	6961      	ldr	r1, [r4, #20]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6030      	str	r0, [r6, #0]
 80057ca:	062e      	lsls	r6, r5, #24
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0x1c0>
 80057d0:	6019      	str	r1, [r3, #0]
 80057d2:	e002      	b.n	80057da <_printf_i+0x1c6>
 80057d4:	0668      	lsls	r0, r5, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0x1bc>
 80057d8:	8019      	strh	r1, [r3, #0]
 80057da:	2300      	movs	r3, #0
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	4616      	mov	r6, r2
 80057e0:	e7bc      	b.n	800575c <_printf_i+0x148>
 80057e2:	6833      	ldr	r3, [r6, #0]
 80057e4:	1d1a      	adds	r2, r3, #4
 80057e6:	6032      	str	r2, [r6, #0]
 80057e8:	681e      	ldr	r6, [r3, #0]
 80057ea:	6862      	ldr	r2, [r4, #4]
 80057ec:	2100      	movs	r1, #0
 80057ee:	4630      	mov	r0, r6
 80057f0:	f7fa fd0e 	bl	8000210 <memchr>
 80057f4:	b108      	cbz	r0, 80057fa <_printf_i+0x1e6>
 80057f6:	1b80      	subs	r0, r0, r6
 80057f8:	6060      	str	r0, [r4, #4]
 80057fa:	6863      	ldr	r3, [r4, #4]
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	2300      	movs	r3, #0
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005804:	e7aa      	b.n	800575c <_printf_i+0x148>
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	4632      	mov	r2, r6
 800580a:	4649      	mov	r1, r9
 800580c:	4640      	mov	r0, r8
 800580e:	47d0      	blx	sl
 8005810:	3001      	adds	r0, #1
 8005812:	d0ad      	beq.n	8005770 <_printf_i+0x15c>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	079b      	lsls	r3, r3, #30
 8005818:	d413      	bmi.n	8005842 <_printf_i+0x22e>
 800581a:	68e0      	ldr	r0, [r4, #12]
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	4298      	cmp	r0, r3
 8005820:	bfb8      	it	lt
 8005822:	4618      	movlt	r0, r3
 8005824:	e7a6      	b.n	8005774 <_printf_i+0x160>
 8005826:	2301      	movs	r3, #1
 8005828:	4632      	mov	r2, r6
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	47d0      	blx	sl
 8005830:	3001      	adds	r0, #1
 8005832:	d09d      	beq.n	8005770 <_printf_i+0x15c>
 8005834:	3501      	adds	r5, #1
 8005836:	68e3      	ldr	r3, [r4, #12]
 8005838:	9903      	ldr	r1, [sp, #12]
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	42ab      	cmp	r3, r5
 800583e:	dcf2      	bgt.n	8005826 <_printf_i+0x212>
 8005840:	e7eb      	b.n	800581a <_printf_i+0x206>
 8005842:	2500      	movs	r5, #0
 8005844:	f104 0619 	add.w	r6, r4, #25
 8005848:	e7f5      	b.n	8005836 <_printf_i+0x222>
 800584a:	bf00      	nop
 800584c:	0800619e 	.word	0x0800619e
 8005850:	080061af 	.word	0x080061af

08005854 <__sflush_r>:
 8005854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585c:	0716      	lsls	r6, r2, #28
 800585e:	4605      	mov	r5, r0
 8005860:	460c      	mov	r4, r1
 8005862:	d454      	bmi.n	800590e <__sflush_r+0xba>
 8005864:	684b      	ldr	r3, [r1, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	dc02      	bgt.n	8005870 <__sflush_r+0x1c>
 800586a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	dd48      	ble.n	8005902 <__sflush_r+0xae>
 8005870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005872:	2e00      	cmp	r6, #0
 8005874:	d045      	beq.n	8005902 <__sflush_r+0xae>
 8005876:	2300      	movs	r3, #0
 8005878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800587c:	682f      	ldr	r7, [r5, #0]
 800587e:	6a21      	ldr	r1, [r4, #32]
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	d030      	beq.n	80058e6 <__sflush_r+0x92>
 8005884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	0759      	lsls	r1, r3, #29
 800588a:	d505      	bpl.n	8005898 <__sflush_r+0x44>
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005892:	b10b      	cbz	r3, 8005898 <__sflush_r+0x44>
 8005894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	2300      	movs	r3, #0
 800589a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800589c:	6a21      	ldr	r1, [r4, #32]
 800589e:	4628      	mov	r0, r5
 80058a0:	47b0      	blx	r6
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	d106      	bne.n	80058b6 <__sflush_r+0x62>
 80058a8:	6829      	ldr	r1, [r5, #0]
 80058aa:	291d      	cmp	r1, #29
 80058ac:	d82b      	bhi.n	8005906 <__sflush_r+0xb2>
 80058ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <__sflush_r+0x104>)
 80058b0:	410a      	asrs	r2, r1
 80058b2:	07d6      	lsls	r6, r2, #31
 80058b4:	d427      	bmi.n	8005906 <__sflush_r+0xb2>
 80058b6:	2200      	movs	r2, #0
 80058b8:	6062      	str	r2, [r4, #4]
 80058ba:	04d9      	lsls	r1, r3, #19
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	6022      	str	r2, [r4, #0]
 80058c0:	d504      	bpl.n	80058cc <__sflush_r+0x78>
 80058c2:	1c42      	adds	r2, r0, #1
 80058c4:	d101      	bne.n	80058ca <__sflush_r+0x76>
 80058c6:	682b      	ldr	r3, [r5, #0]
 80058c8:	b903      	cbnz	r3, 80058cc <__sflush_r+0x78>
 80058ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80058cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058ce:	602f      	str	r7, [r5, #0]
 80058d0:	b1b9      	cbz	r1, 8005902 <__sflush_r+0xae>
 80058d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058d6:	4299      	cmp	r1, r3
 80058d8:	d002      	beq.n	80058e0 <__sflush_r+0x8c>
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 fa3e 	bl	8005d5c <_free_r>
 80058e0:	2300      	movs	r3, #0
 80058e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80058e4:	e00d      	b.n	8005902 <__sflush_r+0xae>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b0      	blx	r6
 80058ec:	4602      	mov	r2, r0
 80058ee:	1c50      	adds	r0, r2, #1
 80058f0:	d1c9      	bne.n	8005886 <__sflush_r+0x32>
 80058f2:	682b      	ldr	r3, [r5, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0c6      	beq.n	8005886 <__sflush_r+0x32>
 80058f8:	2b1d      	cmp	r3, #29
 80058fa:	d001      	beq.n	8005900 <__sflush_r+0xac>
 80058fc:	2b16      	cmp	r3, #22
 80058fe:	d11e      	bne.n	800593e <__sflush_r+0xea>
 8005900:	602f      	str	r7, [r5, #0]
 8005902:	2000      	movs	r0, #0
 8005904:	e022      	b.n	800594c <__sflush_r+0xf8>
 8005906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800590a:	b21b      	sxth	r3, r3
 800590c:	e01b      	b.n	8005946 <__sflush_r+0xf2>
 800590e:	690f      	ldr	r7, [r1, #16]
 8005910:	2f00      	cmp	r7, #0
 8005912:	d0f6      	beq.n	8005902 <__sflush_r+0xae>
 8005914:	0793      	lsls	r3, r2, #30
 8005916:	680e      	ldr	r6, [r1, #0]
 8005918:	bf08      	it	eq
 800591a:	694b      	ldreq	r3, [r1, #20]
 800591c:	600f      	str	r7, [r1, #0]
 800591e:	bf18      	it	ne
 8005920:	2300      	movne	r3, #0
 8005922:	eba6 0807 	sub.w	r8, r6, r7
 8005926:	608b      	str	r3, [r1, #8]
 8005928:	f1b8 0f00 	cmp.w	r8, #0
 800592c:	dde9      	ble.n	8005902 <__sflush_r+0xae>
 800592e:	6a21      	ldr	r1, [r4, #32]
 8005930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005932:	4643      	mov	r3, r8
 8005934:	463a      	mov	r2, r7
 8005936:	4628      	mov	r0, r5
 8005938:	47b0      	blx	r6
 800593a:	2800      	cmp	r0, #0
 800593c:	dc08      	bgt.n	8005950 <__sflush_r+0xfc>
 800593e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005950:	4407      	add	r7, r0
 8005952:	eba8 0800 	sub.w	r8, r8, r0
 8005956:	e7e7      	b.n	8005928 <__sflush_r+0xd4>
 8005958:	dfbffffe 	.word	0xdfbffffe

0800595c <_fflush_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	4605      	mov	r5, r0
 8005962:	460c      	mov	r4, r1
 8005964:	b913      	cbnz	r3, 800596c <_fflush_r+0x10>
 8005966:	2500      	movs	r5, #0
 8005968:	4628      	mov	r0, r5
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	b118      	cbz	r0, 8005976 <_fflush_r+0x1a>
 800596e:	6a03      	ldr	r3, [r0, #32]
 8005970:	b90b      	cbnz	r3, 8005976 <_fflush_r+0x1a>
 8005972:	f7ff fa9f 	bl	8004eb4 <__sinit>
 8005976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f3      	beq.n	8005966 <_fflush_r+0xa>
 800597e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005980:	07d0      	lsls	r0, r2, #31
 8005982:	d404      	bmi.n	800598e <_fflush_r+0x32>
 8005984:	0599      	lsls	r1, r3, #22
 8005986:	d402      	bmi.n	800598e <_fflush_r+0x32>
 8005988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800598a:	f7ff fbc8 	bl	800511e <__retarget_lock_acquire_recursive>
 800598e:	4628      	mov	r0, r5
 8005990:	4621      	mov	r1, r4
 8005992:	f7ff ff5f 	bl	8005854 <__sflush_r>
 8005996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005998:	07da      	lsls	r2, r3, #31
 800599a:	4605      	mov	r5, r0
 800599c:	d4e4      	bmi.n	8005968 <_fflush_r+0xc>
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	059b      	lsls	r3, r3, #22
 80059a2:	d4e1      	bmi.n	8005968 <_fflush_r+0xc>
 80059a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059a6:	f7ff fbbb 	bl	8005120 <__retarget_lock_release_recursive>
 80059aa:	e7dd      	b.n	8005968 <_fflush_r+0xc>

080059ac <__malloc_lock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	@ (80059b4 <__malloc_lock+0x8>)
 80059ae:	f7ff bbb6 	b.w	800511e <__retarget_lock_acquire_recursive>
 80059b2:	bf00      	nop
 80059b4:	20000368 	.word	0x20000368

080059b8 <__malloc_unlock>:
 80059b8:	4801      	ldr	r0, [pc, #4]	@ (80059c0 <__malloc_unlock+0x8>)
 80059ba:	f7ff bbb1 	b.w	8005120 <__retarget_lock_release_recursive>
 80059be:	bf00      	nop
 80059c0:	20000368 	.word	0x20000368

080059c4 <__sread>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	460c      	mov	r4, r1
 80059c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059cc:	f000 f98a 	bl	8005ce4 <_read_r>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	bfab      	itete	ge
 80059d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059d6:	89a3      	ldrhlt	r3, [r4, #12]
 80059d8:	181b      	addge	r3, r3, r0
 80059da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059de:	bfac      	ite	ge
 80059e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059e2:	81a3      	strhlt	r3, [r4, #12]
 80059e4:	bd10      	pop	{r4, pc}

080059e6 <__swrite>:
 80059e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ea:	461f      	mov	r7, r3
 80059ec:	898b      	ldrh	r3, [r1, #12]
 80059ee:	05db      	lsls	r3, r3, #23
 80059f0:	4605      	mov	r5, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	4616      	mov	r6, r2
 80059f6:	d505      	bpl.n	8005a04 <__swrite+0x1e>
 80059f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fc:	2302      	movs	r3, #2
 80059fe:	2200      	movs	r2, #0
 8005a00:	f000 f95e 	bl	8005cc0 <_lseek_r>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	4632      	mov	r2, r6
 8005a12:	463b      	mov	r3, r7
 8005a14:	4628      	mov	r0, r5
 8005a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1a:	f000 b985 	b.w	8005d28 <_write_r>

08005a1e <__sseek>:
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	460c      	mov	r4, r1
 8005a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a26:	f000 f94b 	bl	8005cc0 <_lseek_r>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	bf15      	itete	ne
 8005a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a3a:	81a3      	strheq	r3, [r4, #12]
 8005a3c:	bf18      	it	ne
 8005a3e:	81a3      	strhne	r3, [r4, #12]
 8005a40:	bd10      	pop	{r4, pc}

08005a42 <__sclose>:
 8005a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a46:	f000 b909 	b.w	8005c5c <_close_r>
	...

08005a4c <fiprintf>:
 8005a4c:	b40e      	push	{r1, r2, r3}
 8005a4e:	b503      	push	{r0, r1, lr}
 8005a50:	4601      	mov	r1, r0
 8005a52:	ab03      	add	r3, sp, #12
 8005a54:	4805      	ldr	r0, [pc, #20]	@ (8005a6c <fiprintf+0x20>)
 8005a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	f7ff fba9 	bl	80051b4 <_vfiprintf_r>
 8005a62:	b002      	add	sp, #8
 8005a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a68:	b003      	add	sp, #12
 8005a6a:	4770      	bx	lr
 8005a6c:	20000030 	.word	0x20000030

08005a70 <__swbuf_r>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	460e      	mov	r6, r1
 8005a74:	4614      	mov	r4, r2
 8005a76:	4605      	mov	r5, r0
 8005a78:	b118      	cbz	r0, 8005a82 <__swbuf_r+0x12>
 8005a7a:	6a03      	ldr	r3, [r0, #32]
 8005a7c:	b90b      	cbnz	r3, 8005a82 <__swbuf_r+0x12>
 8005a7e:	f7ff fa19 	bl	8004eb4 <__sinit>
 8005a82:	69a3      	ldr	r3, [r4, #24]
 8005a84:	60a3      	str	r3, [r4, #8]
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	071a      	lsls	r2, r3, #28
 8005a8a:	d501      	bpl.n	8005a90 <__swbuf_r+0x20>
 8005a8c:	6923      	ldr	r3, [r4, #16]
 8005a8e:	b943      	cbnz	r3, 8005aa2 <__swbuf_r+0x32>
 8005a90:	4621      	mov	r1, r4
 8005a92:	4628      	mov	r0, r5
 8005a94:	f000 f82a 	bl	8005aec <__swsetup_r>
 8005a98:	b118      	cbz	r0, 8005aa2 <__swbuf_r+0x32>
 8005a9a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	1a98      	subs	r0, r3, r2
 8005aa8:	6963      	ldr	r3, [r4, #20]
 8005aaa:	b2f6      	uxtb	r6, r6
 8005aac:	4283      	cmp	r3, r0
 8005aae:	4637      	mov	r7, r6
 8005ab0:	dc05      	bgt.n	8005abe <__swbuf_r+0x4e>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f7ff ff51 	bl	800595c <_fflush_r>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d1ed      	bne.n	8005a9a <__swbuf_r+0x2a>
 8005abe:	68a3      	ldr	r3, [r4, #8]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	60a3      	str	r3, [r4, #8]
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	6022      	str	r2, [r4, #0]
 8005aca:	701e      	strb	r6, [r3, #0]
 8005acc:	6962      	ldr	r2, [r4, #20]
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d004      	beq.n	8005ade <__swbuf_r+0x6e>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	07db      	lsls	r3, r3, #31
 8005ad8:	d5e1      	bpl.n	8005a9e <__swbuf_r+0x2e>
 8005ada:	2e0a      	cmp	r6, #10
 8005adc:	d1df      	bne.n	8005a9e <__swbuf_r+0x2e>
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f7ff ff3b 	bl	800595c <_fflush_r>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d0d9      	beq.n	8005a9e <__swbuf_r+0x2e>
 8005aea:	e7d6      	b.n	8005a9a <__swbuf_r+0x2a>

08005aec <__swsetup_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4b29      	ldr	r3, [pc, #164]	@ (8005b94 <__swsetup_r+0xa8>)
 8005af0:	4605      	mov	r5, r0
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	460c      	mov	r4, r1
 8005af6:	b118      	cbz	r0, 8005b00 <__swsetup_r+0x14>
 8005af8:	6a03      	ldr	r3, [r0, #32]
 8005afa:	b90b      	cbnz	r3, 8005b00 <__swsetup_r+0x14>
 8005afc:	f7ff f9da 	bl	8004eb4 <__sinit>
 8005b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b04:	0719      	lsls	r1, r3, #28
 8005b06:	d422      	bmi.n	8005b4e <__swsetup_r+0x62>
 8005b08:	06da      	lsls	r2, r3, #27
 8005b0a:	d407      	bmi.n	8005b1c <__swsetup_r+0x30>
 8005b0c:	2209      	movs	r2, #9
 8005b0e:	602a      	str	r2, [r5, #0]
 8005b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b1a:	e033      	b.n	8005b84 <__swsetup_r+0x98>
 8005b1c:	0758      	lsls	r0, r3, #29
 8005b1e:	d512      	bpl.n	8005b46 <__swsetup_r+0x5a>
 8005b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b22:	b141      	cbz	r1, 8005b36 <__swsetup_r+0x4a>
 8005b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b28:	4299      	cmp	r1, r3
 8005b2a:	d002      	beq.n	8005b32 <__swsetup_r+0x46>
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f000 f915 	bl	8005d5c <_free_r>
 8005b32:	2300      	movs	r3, #0
 8005b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6063      	str	r3, [r4, #4]
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f043 0308 	orr.w	r3, r3, #8
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	b94b      	cbnz	r3, 8005b66 <__swsetup_r+0x7a>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b5c:	d003      	beq.n	8005b66 <__swsetup_r+0x7a>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f000 f83f 	bl	8005be4 <__smakebuf_r>
 8005b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b6a:	f013 0201 	ands.w	r2, r3, #1
 8005b6e:	d00a      	beq.n	8005b86 <__swsetup_r+0x9a>
 8005b70:	2200      	movs	r2, #0
 8005b72:	60a2      	str	r2, [r4, #8]
 8005b74:	6962      	ldr	r2, [r4, #20]
 8005b76:	4252      	negs	r2, r2
 8005b78:	61a2      	str	r2, [r4, #24]
 8005b7a:	6922      	ldr	r2, [r4, #16]
 8005b7c:	b942      	cbnz	r2, 8005b90 <__swsetup_r+0xa4>
 8005b7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b82:	d1c5      	bne.n	8005b10 <__swsetup_r+0x24>
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	0799      	lsls	r1, r3, #30
 8005b88:	bf58      	it	pl
 8005b8a:	6962      	ldrpl	r2, [r4, #20]
 8005b8c:	60a2      	str	r2, [r4, #8]
 8005b8e:	e7f4      	b.n	8005b7a <__swsetup_r+0x8e>
 8005b90:	2000      	movs	r0, #0
 8005b92:	e7f7      	b.n	8005b84 <__swsetup_r+0x98>
 8005b94:	20000030 	.word	0x20000030

08005b98 <__swhatbuf_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	b096      	sub	sp, #88	@ 0x58
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	461e      	mov	r6, r3
 8005ba8:	da0d      	bge.n	8005bc6 <__swhatbuf_r+0x2e>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bb0:	f04f 0100 	mov.w	r1, #0
 8005bb4:	bf14      	ite	ne
 8005bb6:	2340      	movne	r3, #64	@ 0x40
 8005bb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	6031      	str	r1, [r6, #0]
 8005bc0:	602b      	str	r3, [r5, #0]
 8005bc2:	b016      	add	sp, #88	@ 0x58
 8005bc4:	bd70      	pop	{r4, r5, r6, pc}
 8005bc6:	466a      	mov	r2, sp
 8005bc8:	f000 f858 	bl	8005c7c <_fstat_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	dbec      	blt.n	8005baa <__swhatbuf_r+0x12>
 8005bd0:	9901      	ldr	r1, [sp, #4]
 8005bd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005bda:	4259      	negs	r1, r3
 8005bdc:	4159      	adcs	r1, r3
 8005bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005be2:	e7eb      	b.n	8005bbc <__swhatbuf_r+0x24>

08005be4 <__smakebuf_r>:
 8005be4:	898b      	ldrh	r3, [r1, #12]
 8005be6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be8:	079d      	lsls	r5, r3, #30
 8005bea:	4606      	mov	r6, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	d507      	bpl.n	8005c00 <__smakebuf_r+0x1c>
 8005bf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	6163      	str	r3, [r4, #20]
 8005bfc:	b003      	add	sp, #12
 8005bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c00:	ab01      	add	r3, sp, #4
 8005c02:	466a      	mov	r2, sp
 8005c04:	f7ff ffc8 	bl	8005b98 <__swhatbuf_r>
 8005c08:	9f00      	ldr	r7, [sp, #0]
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f7ff fc12 	bl	8005438 <_malloc_r>
 8005c14:	b948      	cbnz	r0, 8005c2a <__smakebuf_r+0x46>
 8005c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1a:	059a      	lsls	r2, r3, #22
 8005c1c:	d4ee      	bmi.n	8005bfc <__smakebuf_r+0x18>
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	e7e2      	b.n	8005bf0 <__smakebuf_r+0xc>
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	6020      	str	r0, [r4, #0]
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c3a:	b15b      	cbz	r3, 8005c54 <__smakebuf_r+0x70>
 8005c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c40:	4630      	mov	r0, r6
 8005c42:	f000 f82d 	bl	8005ca0 <_isatty_r>
 8005c46:	b128      	cbz	r0, 8005c54 <__smakebuf_r+0x70>
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	431d      	orrs	r5, r3
 8005c58:	81a5      	strh	r5, [r4, #12]
 8005c5a:	e7cf      	b.n	8005bfc <__smakebuf_r+0x18>

08005c5c <_close_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d06      	ldr	r5, [pc, #24]	@ (8005c78 <_close_r+0x1c>)
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	f7fb faa8 	bl	80011bc <_close>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_close_r+0x1a>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_close_r+0x1a>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20000374 	.word	0x20000374

08005c7c <_fstat_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d07      	ldr	r5, [pc, #28]	@ (8005c9c <_fstat_r+0x20>)
 8005c80:	2300      	movs	r3, #0
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	602b      	str	r3, [r5, #0]
 8005c8a:	f7fb faa3 	bl	80011d4 <_fstat>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d102      	bne.n	8005c98 <_fstat_r+0x1c>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	b103      	cbz	r3, 8005c98 <_fstat_r+0x1c>
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000374 	.word	0x20000374

08005ca0 <_isatty_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d06      	ldr	r5, [pc, #24]	@ (8005cbc <_isatty_r+0x1c>)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	f7fb faa2 	bl	80011f4 <_isatty>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_isatty_r+0x1a>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_isatty_r+0x1a>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	20000374 	.word	0x20000374

08005cc0 <_lseek_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4d07      	ldr	r5, [pc, #28]	@ (8005ce0 <_lseek_r+0x20>)
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	4608      	mov	r0, r1
 8005cc8:	4611      	mov	r1, r2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	602a      	str	r2, [r5, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f7fb fa9b 	bl	800120a <_lseek>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_lseek_r+0x1e>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_lseek_r+0x1e>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	20000374 	.word	0x20000374

08005ce4 <_read_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d07      	ldr	r5, [pc, #28]	@ (8005d04 <_read_r+0x20>)
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4608      	mov	r0, r1
 8005cec:	4611      	mov	r1, r2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7fb fa29 	bl	800114a <_read>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_read_r+0x1e>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_read_r+0x1e>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	20000374 	.word	0x20000374

08005d08 <_sbrk_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d06      	ldr	r5, [pc, #24]	@ (8005d24 <_sbrk_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb fa86 	bl	8001224 <_sbrk>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_sbrk_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_sbrk_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20000374 	.word	0x20000374

08005d28 <_write_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	@ (8005d48 <_write_r+0x20>)
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4608      	mov	r0, r1
 8005d30:	4611      	mov	r1, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f7fb fa24 	bl	8001184 <_write>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_write_r+0x1e>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_write_r+0x1e>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20000374 	.word	0x20000374

08005d4c <abort>:
 8005d4c:	b508      	push	{r3, lr}
 8005d4e:	2006      	movs	r0, #6
 8005d50:	f000 f876 	bl	8005e40 <raise>
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7fb f9ed 	bl	8001134 <_exit>
	...

08005d5c <_free_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4605      	mov	r5, r0
 8005d60:	2900      	cmp	r1, #0
 8005d62:	d041      	beq.n	8005de8 <_free_r+0x8c>
 8005d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d68:	1f0c      	subs	r4, r1, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bfb8      	it	lt
 8005d6e:	18e4      	addlt	r4, r4, r3
 8005d70:	f7ff fe1c 	bl	80059ac <__malloc_lock>
 8005d74:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <_free_r+0x90>)
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	b933      	cbnz	r3, 8005d88 <_free_r+0x2c>
 8005d7a:	6063      	str	r3, [r4, #4]
 8005d7c:	6014      	str	r4, [r2, #0]
 8005d7e:	4628      	mov	r0, r5
 8005d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d84:	f7ff be18 	b.w	80059b8 <__malloc_unlock>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d908      	bls.n	8005d9e <_free_r+0x42>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	1821      	adds	r1, r4, r0
 8005d90:	428b      	cmp	r3, r1
 8005d92:	bf01      	itttt	eq
 8005d94:	6819      	ldreq	r1, [r3, #0]
 8005d96:	685b      	ldreq	r3, [r3, #4]
 8005d98:	1809      	addeq	r1, r1, r0
 8005d9a:	6021      	streq	r1, [r4, #0]
 8005d9c:	e7ed      	b.n	8005d7a <_free_r+0x1e>
 8005d9e:	461a      	mov	r2, r3
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b10b      	cbz	r3, 8005da8 <_free_r+0x4c>
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d9fa      	bls.n	8005d9e <_free_r+0x42>
 8005da8:	6811      	ldr	r1, [r2, #0]
 8005daa:	1850      	adds	r0, r2, r1
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	d10b      	bne.n	8005dc8 <_free_r+0x6c>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	4401      	add	r1, r0
 8005db4:	1850      	adds	r0, r2, r1
 8005db6:	4283      	cmp	r3, r0
 8005db8:	6011      	str	r1, [r2, #0]
 8005dba:	d1e0      	bne.n	8005d7e <_free_r+0x22>
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	6053      	str	r3, [r2, #4]
 8005dc2:	4408      	add	r0, r1
 8005dc4:	6010      	str	r0, [r2, #0]
 8005dc6:	e7da      	b.n	8005d7e <_free_r+0x22>
 8005dc8:	d902      	bls.n	8005dd0 <_free_r+0x74>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	e7d6      	b.n	8005d7e <_free_r+0x22>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	1821      	adds	r1, r4, r0
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	bf04      	itt	eq
 8005dd8:	6819      	ldreq	r1, [r3, #0]
 8005dda:	685b      	ldreq	r3, [r3, #4]
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	bf04      	itt	eq
 8005de0:	1809      	addeq	r1, r1, r0
 8005de2:	6021      	streq	r1, [r4, #0]
 8005de4:	6054      	str	r4, [r2, #4]
 8005de6:	e7ca      	b.n	8005d7e <_free_r+0x22>
 8005de8:	bd38      	pop	{r3, r4, r5, pc}
 8005dea:	bf00      	nop
 8005dec:	20000370 	.word	0x20000370

08005df0 <_raise_r>:
 8005df0:	291f      	cmp	r1, #31
 8005df2:	b538      	push	{r3, r4, r5, lr}
 8005df4:	4605      	mov	r5, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	d904      	bls.n	8005e04 <_raise_r+0x14>
 8005dfa:	2316      	movs	r3, #22
 8005dfc:	6003      	str	r3, [r0, #0]
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e06:	b112      	cbz	r2, 8005e0e <_raise_r+0x1e>
 8005e08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e0c:	b94b      	cbnz	r3, 8005e22 <_raise_r+0x32>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 f830 	bl	8005e74 <_getpid_r>
 8005e14:	4622      	mov	r2, r4
 8005e16:	4601      	mov	r1, r0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e1e:	f000 b817 	b.w	8005e50 <_kill_r>
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d00a      	beq.n	8005e3c <_raise_r+0x4c>
 8005e26:	1c59      	adds	r1, r3, #1
 8005e28:	d103      	bne.n	8005e32 <_raise_r+0x42>
 8005e2a:	2316      	movs	r3, #22
 8005e2c:	6003      	str	r3, [r0, #0]
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e7e7      	b.n	8005e02 <_raise_r+0x12>
 8005e32:	2100      	movs	r1, #0
 8005e34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4798      	blx	r3
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e7e0      	b.n	8005e02 <_raise_r+0x12>

08005e40 <raise>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	@ (8005e4c <raise+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f7ff bfd3 	b.w	8005df0 <_raise_r>
 8005e4a:	bf00      	nop
 8005e4c:	20000030 	.word	0x20000030

08005e50 <_kill_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	@ (8005e70 <_kill_r+0x20>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f7fb f959 	bl	8001114 <_kill>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d102      	bne.n	8005e6c <_kill_r+0x1c>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b103      	cbz	r3, 8005e6c <_kill_r+0x1c>
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000374 	.word	0x20000374

08005e74 <_getpid_r>:
 8005e74:	f7fb b946 	b.w	8001104 <_getpid>

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
